bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  dump(buffer,  i);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer,  i);	  dump(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	36	None	replace
2	[BUG]  [BUGGY]  dump(pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(pos,  NON_EXECUTE_PREFIX);	  dump(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	36	None	replace
3	[BUG]  [BUGGY]  dumpPath(i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpPath(i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpPath(i,  NON_EXECUTE_PREFIX);	  dump(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	36	None	replace
4	[BUG]  [BUGGY]  dump(buffer[pos  +  i],  NON_EXECUTE_PREFIX);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer[pos  +  i],  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer[pos  +  i],  NON_EXECUTE_PREFIX);	  dump(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	36	None	replace
5	[BUG]  [BUGGY]  dump(i,  limit);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(i,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(i,  limit);	  dump(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	36	None	replace
6	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  limit,  NON_EXECUTE_PREFIX);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  limit,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  limit,  NON_EXECUTE_PREFIX);	  throwOnEof    String(buffer,    pos,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	153	None	replace
7	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX);	  throwOnEof    String(buffer,    pos,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	153	None	replace
8	[BUG]  [BUGGY]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  return;  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  return;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    return;    }    	non-compiled	[CE]  	106	None	replace
9	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  return;  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  return;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    return;    }    	non-compiled	[CE]  	106	None	replace
10	[BUG]  [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  return;  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  return;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    return;    }    	non-compiled	[CE]  	106	None	replace
11	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  limit,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  limit,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  limit,  NON_EXECUTE_PREFIX.length);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	81	None	replace
12	[BUG]  [BUGGY]  dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX.length);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	81	None	replace
13	[BUG]  [BUGGY]  throwOnEof(null,  i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(null,  i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(null,  i,  NON_EXECUTE_PREFIX.length);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	81	None	replace
14	[BUG]  [BUGGY]  throwOnEof(pos,  i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  i,  NON_EXECUTE_PREFIX.length);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	81	None	replace
15	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length  +  1);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length  +  1);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	81	None	replace
16	[BUG]  [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSYntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSYntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	128	None	replace
17	[BUG]  [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSYntaxException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSYntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	128	None	replace
18	[BUG]  [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSYntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));	  throwOnEof(JSYntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	128	None	replace
19	[BUG]  [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSYntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));	  throwOnEof(JSYntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	128	None	replace
20	[BUG]  [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSYntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));	  throwOnEof(JSYntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	128	None	replace
21	[BUG]  [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSYntaxException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSYntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	128	None	replace
22	[BUG]  [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  PEEKED_DOUBLE_QUOTED_NAME));  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  PEEKED_DOUBLE_QUOTED_NAME));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSYntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  PEEKED_DOUBLE_QUOTED_NAME));	  throwOnEof(JSYntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	128	None	replace
23	[BUG]  [BUGGY]  dumpBuffer(i,  pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(i,  pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(i,  pos,  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(i,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	8	None	replace
24	[BUG]  [BUGGY]  throwOnEof  Reader(i,  pos,  buffer[i],  NON_EXECUTE_PREFIX);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  pos,  buffer[i],  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  pos,  buffer[i],  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(i,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	8	None	replace
25	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  limit,  NON_EXECUTE_PREFIX[pos]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  limit,  NON_EXECUTE_PREFIX[pos]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  limit,  NON_EXECUTE_PREFIX[pos]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos]));    	non-compiled	[CE]  	20	None	replace
26	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  1]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  1]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  1]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos]));    	non-compiled	[CE]  	20	None	replace
27	[BUG]  [BUGGY]  throwOnEof(pos,  limit,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  limit,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  limit,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    limit,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	38	None	replace
28	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos  +  i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos  +  i]);	  throwOnEof(i,    limit,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	38	None	replace
29	[BUG]  [BUGGY]  bucket[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throwOnEof;    }    	non-compiled	[CE]  	109	None	replace
30	[BUG]  [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throwOnEof;    }    	non-compiled	[CE]  	109	None	replace
31	[BUG]  [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throwOnEof;    }    	non-compiled	[CE]  	109	None	replace
32	[BUG]  [BUGGY]  bucket[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throwOnEof;    }    	non-compiled	[CE]  	109	None	replace
33	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throwOnEof;    }    	non-compiled	[CE]  	109	None	replace
34	[BUG]  [BUGGY]  bucket[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throwOnEof;    }    	non-compiled	[CE]  	109	None	replace
35	[BUG]  [BUGGY]  throwOnEof(i,  limit,  pos,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  limit,  pos,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  limit,  pos,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    pos,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	87	None	replace
36	[BUG]  [BUGGY]  throwOnEof(i,  buffer,  pos,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer,  pos,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer,  pos,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    pos,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	87	None	replace
37	[BUG]  [BUGGY]  throwOnEof(i,  0,  pos,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  0,  pos,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  0,  pos,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    pos,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	87	None	replace
38	[BUG]  [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX.length  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX.length  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  NON_EXECUTE_PREFIX.length  +  1,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    pos,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	87	None	replace
39	[BUG]  [BUGGY]  throwOnEof(i,  pos  -  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos  -  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos  -  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	97	None	replace
40	[BUG]  [BUGGY]  throwOnEof(i,  pos  +  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos  +  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos  +  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	97	None	replace
41	[BUG]  [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX.length  -  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX.length  -  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  NON_EXECUTE_PREFIX.length  -  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	97	None	replace
42	[BUG]  [BUGGY]  throwOnEof(i,  limit  -  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  limit  -  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  limit  -  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	97	None	replace
43	[BUG]  [BUGGY]  throwOnEof(buffer,  i  -  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i  -  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i  -  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	97	None	replace
44	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos  +  i]  -  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos  +  i]  -  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos  +  i]  -  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	97	None	replace
45	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos  -  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos  -  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos  -  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	97	None	replace
46	[BUG]  [BUGGY]  throwOnEof(pos,  limit,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  limit,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  limit,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	80	None	replace
47	[BUG]  [BUGGY]  throwOnEof(i,  limit,  NON_EXECUTE_PREFIX.length  -  1);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  limit,  NON_EXECUTE_PREFIX.length  -  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  limit,  NON_EXECUTE_PREFIX.length  -  1);	  throwOnEof(i,    limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	80	None	replace
48	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[0]));    	non-compiled	[CE]  	127	None	replace
49	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  limit,  NON_EXECUTE_PREFIX[0]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  limit,  NON_EXECUTE_PREFIX[0]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  limit,  NON_EXECUTE_PREFIX[0]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[0]));    	non-compiled	[CE]  	127	None	replace
50	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[0],  limit));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[0],  limit));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[0],  limit));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[0]));    	non-compiled	[CE]  	127	None	replace
51	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[0],  value));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[0],  value));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[0],  value));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[0]));    	non-compiled	[CE]  	127	None	replace
52	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[1]));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[1]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[1]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[0]));    	non-compiled	[CE]  	127	None	replace
53	[BUG]  [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[0]));  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[0]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[0]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[0]));    	non-compiled	[CE]  	127	None	replace
54	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  NON_EXECUTE_PREFIX.length);	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX.length:   ");    	non-compiled	[CE]  	66	None	replace
55	[BUG]  [BUGGY]  Throwables.throwOnEofReadException( "Non-EXECUTE_PREFIX.length: ");  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEofReadException( "Non-EXECUTE_PREFIX.length: ");  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEofReadException( "Non-EXECUTE_PREFIX.length: ");	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX.length:   ");    	non-compiled	[CE]  	66	None	replace
56	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length ",  i);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length ",  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length ",  i);	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX.length:   ");    	non-compiled	[CE]  	66	None	replace
57	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  NON_EXECUTE_PREFIX[i]);	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX.length:   ");    	non-compiled	[CE]  	66	None	replace
58	[BUG]  [BUGGY]  throwOnEof(i,  0,  limit,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  0,  limit,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  0,  limit,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	89	None	replace
59	[BUG]  [BUGGY]  throwOnEof(i,  pos,  0,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  0,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  0,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	89	None	replace
60	[BUG]  [BUGGY]  throwOnEof(i,  0,  limit  -  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  0,  limit  -  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  0,  limit  -  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	89	None	replace
61	[BUG]  [BUGGY]  throwOnEof(buffer,  0,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  0,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  0,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	89	None	replace
62	[BUG]  [BUGGY]  dumpBuffer(i,  0,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(i,  0,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(i,  0,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	89	None	replace
63	[BUG]  [BUGGY]  bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i];	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    return;    }    	non-compiled	[CE]  	79	None	replace
64	[BUG]  [BUGGY]  bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return;  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return;	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    return;    }    	non-compiled	[CE]  	79	None	replace
65	[BUG]  [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return;  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return;  }	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    return;    }    	non-compiled	[CE]  	79	None	replace
66	[BUG]  [BUGGY]  readOnEof(buffer,  pos  +  i],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  readOnEof(buffer,  pos  +  i],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	readOnEof(buffer,  pos  +  i],  NON_EXECUTE_PREFIX[i]);	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    return;    }    	non-compiled	[CE]  	79	None	replace
67	[BUG]  [BUGGY]  bucket[pos  +  i]  =  buffer[pos  +  NON_EXECUTE_PREFIX[i];  return;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  =  buffer[pos  +  NON_EXECUTE_PREFIX[i];  return;  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  =  buffer[pos  +  NON_EXECUTE_PREFIX[i];  return;	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    return;    }    	non-compiled	[CE]  	79	None	replace
68	[BUG]  [BUGGY]  readOnEof(buffer,  pos  +  i],  NON_EXECUTE_PREFIX[i]);  return;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  readOnEof(buffer,  pos  +  i],  NON_EXECUTE_PREFIX[i]);  return;  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	readOnEof(buffer,  pos  +  i],  NON_EXECUTE_PREFIX[i]);  return;	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    return;    }    	non-compiled	[CE]  	79	None	replace
69	[BUG]  [BUGGY]  bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  throwOnEof;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  throwOnEof;  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  throwOnEof;	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    return;    }    	non-compiled	[CE]  	79	None	replace
70	[BUG]  [BUGGY]  throwOnEof(i,  pos  +  1);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos  +  1);	  throwOnEof(i,    pos);    	non-compiled	[CE]  	35	None	replace
71	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  i);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX,  i);	  throwOnEof(i,    pos);    	non-compiled	[CE]  	35	None	replace
72	[BUG]  [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  NON_EXECUTE_PREFIX,  limit);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	12	None	replace
73	[BUG]  [BUGGY]  executePrefix(i,  pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  executePrefix(i,  pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	executePrefix(i,  pos,  NON_EXECUTE_PREFIX);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	12	None	replace
74	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  pos  +  NON_EXECUTE_PREFIX);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  pos  +  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  pos  +  NON_EXECUTE_PREFIX);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX    +    i);    	non-compiled	[CE]  	119	None	replace
75	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  pos  +  i);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  pos  +  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  pos  +  i);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX    +    i);    	non-compiled	[CE]  	119	None	replace
76	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX.length  +  1);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX.length  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX.length  +  1);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX    +    i);    	non-compiled	[CE]  	119	None	replace
77	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX.length  +  i);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX.length  +  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX.length  +  i);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX    +    i);    	non-compiled	[CE]  	119	None	replace
78	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  buffer[pos  +  i]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  buffer[pos  +  i]);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX    +    i);    	non-compiled	[CE]  	119	None	replace
79	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  pos  +  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  pos  +  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  pos  +  NON_EXECUTE_PREFIX.length);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX    +    i);    	non-compiled	[CE]  	119	None	replace
80	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX  +  1);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX  +  1);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX    +    i);    	non-compiled	[CE]  	119	None	replace
81	[BUG]  [BUGGY]  bucket[pos  +  i]  =  NULL_EXECUTE_PREFIX[i];  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  =  NULL_EXECUTE_PREFIX[i];  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  =  NULL_EXECUTE_PREFIX[i];	  if(lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	149	None	replace
82	[BUG]  [BUGGY]  bucket[pos  +  i]  =  NULL_NON_EXECUTE_PREFIX[i];  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  =  NULL_NON_EXECUTE_PREFIX[i];  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  =  NULL_NON_EXECUTE_PREFIX[i];	  if(lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	149	None	replace
83	[BUG]  [BUGGY]  allowNonExecute(false);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonExecute(false);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonExecute(false);	  if(lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	149	None	replace
84	[BUG]  [BUGGY]  bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i].length;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i].length;  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i].length;	  if(lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	149	None	replace
85	[BUG]  [BUGGY]  bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i]);	  if(lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	149	None	replace
86	[BUG]  [BUGGY]  [Delete]  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  [Delete]  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	[Delete]	  if(lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	149	None	replace
87	[BUG]  [BUGGY]  dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	10	None	replace
88	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);	  throwOnEof    Reader(buffer,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	11	None	replace
89	[BUG]  [BUGGY]  dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(buffer,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	11	None	replace
90	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX.length);	  throwOnEof    Reader(buffer,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	11	None	replace
91	[BUG]  [BUGGY]  throwOnEof(pos,  limit,  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  limit,  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  limit,  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    limit,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	68	None	replace
92	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos  +  i]],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos  +  i]],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos  +  i]],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    limit,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	68	None	replace
93	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    limit,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	68	None	replace
94	[BUG]  [BUGGY]  throwOnEof(i,  0,  limit);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  0,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  0,  limit);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	16	None	replace
95	[BUG]  [BUGGY]  throwOnEof(i,  pos,  0,  NON_EXECUTE_PREFIX);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  0,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  0,  NON_EXECUTE_PREFIX);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	16	None	replace
96	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  0,  NON_EXECUTE_PREFIX);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  0,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  0,  NON_EXECUTE_PREFIX);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	16	None	replace
97	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  0,  NON_EXECUTE_PREFIX);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  0,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  0,  NON_EXECUTE_PREFIX);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	16	None	replace
98	[BUG]  [BUGGY]  dumpBuffer(i,  0,  NON_EXECUTE_PREFIX);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(i,  0,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(i,  0,  NON_EXECUTE_PREFIX);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	16	None	replace
99	[BUG]  [BUGGY]  throwOnEofReader(i,  pos  +  1);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofReader(i,  pos  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofReader(i,  pos  +  1);	  throwOnEof    Reader(i,    pos);    	non-compiled	[CE]  	103	None	replace
100	[BUG]  [BUGGY]  throwOnEof(buffer,  i);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i);	  throwOnEof    Reader(i,    pos);    	non-compiled	[CE]  	103	None	replace
101	[BUG]  [BUGGY]  dumpBuffer(i,  pos);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(i,  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(i,  pos);	  throwOnEof    Reader(i,    pos);    	non-compiled	[CE]  	103	None	replace
102	[BUG]  [BUGGY]  throwOnEofReader(i,  buffer,  pos);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofReader(i,  buffer,  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofReader(i,  buffer,  pos);	  throwOnEof    Reader(i,    pos);    	non-compiled	[CE]  	103	None	replace
103	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	138	None	replace
104	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));	  throwOnEof    Reader(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	138	None	replace
105	[BUG]  [BUGGY]  dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	138	None	replace
106	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit);	  throwOnEof    Reader(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	138	None	replace
107	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	138	None	replace
108	[BUG]  [BUGGY]  allowNonWhitespace(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));	  allowNonWhitespace(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	130	None	replace
109	[BUG]  [BUGGY]  allowNonWhitespace(JsonSyntaxException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(JsonSyntaxException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(JsonSyntaxException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));	  allowNonWhitespace(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	130	None	replace
110	[BUG]  [BUGGY]  allowNonWhitespace(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));	  allowNonWhitespace(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	130	None	replace
111	[BUG]  [BUGGY]  allowNonWhitespace(JsonSyntaxException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(JsonSyntaxException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(JsonSyntaxException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));	  allowNonWhitespace(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	130	None	replace
112	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  buffer[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  buffer[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  buffer[i]);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    buffer[i]);    	non-compiled	[CE]  	93	None	replace
113	[BUG]  [BUGGY]  throwOnEofString(buffer,  i,  NON_EXECUTE_PREFIX,  limit[i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofString(buffer,  i,  NON_EXECUTE_PREFIX,  limit[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofString(buffer,  i,  NON_EXECUTE_PREFIX,  limit[i]);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    buffer[i]);    	non-compiled	[CE]  	93	None	replace
114	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  limit,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  limit,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  limit,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    buffer[i]);    	non-compiled	[CE]  	93	None	replace
115	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX,  buffer[i]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX,  buffer[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX,  buffer[i]);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    buffer[i]);    	non-compiled	[CE]  	93	None	replace
116	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  buffer[i],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  buffer[i],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  buffer[i],  NON_EXECUTE_PREFIX[i]);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    buffer[i]);    	non-compiled	[CE]  	93	None	replace
117	[BUG]  [BUGGY]  throwOnEof  Reader(i,  NON_EXECUTE_PREFIX,  buffer,  i);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  NON_EXECUTE_PREFIX,  buffer,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  NON_EXECUTE_PREFIX,  buffer,  i);	  throwOnEof    Reader(i,    buffer,    i);    	non-compiled	[CE]  	111	None	replace
118	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX.length);	  throwOnEof    Reader(i,    buffer,    i);    	non-compiled	[CE]  	111	None	replace
119	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX.length,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	41	None	replace
120	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  limit,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  limit,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  limit,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX.length,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	41	None	replace
121	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length,  limit,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length,  limit,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length,  limit,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX.length,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	41	None	replace
122	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  limit,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  limit,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  limit,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX.length,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	41	None	replace
123	[BUG]  [BUGGY]  dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX.length,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	41	None	replace
124	[BUG]  [BUGGY]  throwOnEof(i,  buffer,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX.length,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	41	None	replace
125	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  0,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  0,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  0,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX.length,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	41	None	replace
126	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos[i],  NON_EXECUTE_PREFIX[i],  limit));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos[i],  NON_EXECUTE_PREFIX[i],  limit));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos[i],  NON_EXECUTE_PREFIX[i],  limit));	  throwOnEof    Reader(buffer,    pos[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	29	None	replace
127	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos[0],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos[0],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos[0],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    pos[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	29	None	replace
128	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos[pos  +  i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos[pos  +  i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos[pos  +  i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    pos[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	29	None	replace
129	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos[pos],  NON_EXECUTE_PREFIX[i],  limit));  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos[pos],  NON_EXECUTE_PREFIX[i],  limit));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos[pos],  NON_EXECUTE_PREFIX[i],  limit));	  throwOnEof    Reader(buffer,    pos[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	29	None	replace
130	[BUG]  [BUGGY]  dumpBuffer(buffer,  pos[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  pos[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  pos[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    pos[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	29	None	replace
131	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos[i],  NON_EXECUTE_PREFIX[i]  +  1));  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos[i],  NON_EXECUTE_PREFIX[i]  +  1));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos[i],  NON_EXECUTE_PREFIX[i]  +  1));	  throwOnEof    Reader(buffer,    pos[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	29	None	replace
132	[BUG]  [BUGGY]  throwOnEof(i,  limit  -  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  limit  -  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  limit  -  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    limit);    	non-compiled	[CE]  	85	None	replace
133	[BUG]  [BUGGY]  throwOnEof(i,  pos  -  limit);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos  -  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos  -  limit);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    limit);    	non-compiled	[CE]  	85	None	replace
134	[BUG]  [BUGGY]  throwOnEof(i,  pos  -  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos  -  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos  -  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    limit);    	non-compiled	[CE]  	85	None	replace
135	[BUG]  [BUGGY]  throwOnEof(i,  pos  -  NON_EXECUTE_PREFIX.length  -  limit);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos  -  NON_EXECUTE_PREFIX.length  -  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos  -  NON_EXECUTE_PREFIX.length  -  limit);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    limit);    	non-compiled	[CE]  	85	None	replace
136	[BUG]  [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX.length  -  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX.length  -  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  NON_EXECUTE_PREFIX.length  -  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    limit);    	non-compiled	[CE]  	85	None	replace
137	[BUG]  [BUGGY]  throwOnEof(i,  pos  +  NON_EXECUTE_PREFIX.length  -  limit);  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos  +  NON_EXECUTE_PREFIX.length  -  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos  +  NON_EXECUTE_PREFIX.length  -  limit);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    limit);    	non-compiled	[CE]  	85	None	replace
138	[BUG]  [BUGGY]  throwOnEof(buffer,  pos  -  NON_EXECUTE_PREFIX.length  -  limit);  [CE]  [FE]                                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos  -  NON_EXECUTE_PREFIX.length  -  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos  -  NON_EXECUTE_PREFIX.length  -  limit);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    limit);    	non-compiled	[CE]  	85	None	replace
139	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  i  +  1);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  i  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  i  +  1);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX,    limit    +    1);    	non-compiled	[CE]  	2	None	replace
140	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX.length,  limit  +  1);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX.length,  limit  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX.length,  limit  +  1);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX,    limit    +    1);    	non-compiled	[CE]  	2	None	replace
141	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  limit  +  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  limit  +  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  limit  +  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX,    limit    +    1);    	non-compiled	[CE]  	2	None	replace
142	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos  +  i],  limit,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos  +  i],  limit,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos  +  i],  limit,  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	30	None	replace
143	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]);	  throwOnEof    Reader(buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	30	None	replace
144	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i],  limit);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i],  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i],  limit);	  throwOnEof    Reader(buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	30	None	replace
145	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i],  limit));  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i],  limit));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i],  limit));	  throwOnEof    Reader(buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	30	None	replace
146	[BUG]  [BUGGY]  dumpBuffer(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	30	None	replace
147	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos  +  1],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos  +  1],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos  +  1],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	30	None	replace
148	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  limit);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	117	None	replace
149	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	117	None	replace
150	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  i);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  i);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	117	None	replace
151	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  i,  NON_EXECUTE_PREFIX);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	117	None	replace
152	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  value);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  value);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  value);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	117	None	replace
153	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  pos);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  pos);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	117	None	replace
154	[BUG]  [BUGGY]  throwOnEof(i,  BAD_ON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  BAD_ON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  BAD_ON_EXECUTE_PREFIX,  limit);	  throwOnEof(i,    BAD_ON_EXECUTE_PREFIX);    	non-compiled	[CE]  	162	None	replace
155	[BUG]  [BUGGY]  dumpBuffer(i,  BAD_ON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(i,  BAD_ON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(i,  BAD_ON_EXECUTE_PREFIX);	  throwOnEof(i,    BAD_ON_EXECUTE_PREFIX);    	non-compiled	[CE]  	162	None	replace
156	[BUG]  [BUGGY]  executePrefix(i,  BAD_ON_EXECUTE_PREFIX);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  executePrefix(i,  BAD_ON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	executePrefix(i,  BAD_ON_EXECUTE_PREFIX);	  throwOnEof(i,    BAD_ON_EXECUTE_PREFIX);    	non-compiled	[CE]  	162	None	replace
157	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos  +  i]  +  NON_EXECUTE_PREFIX.length  +  1);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos  +  i]  +  NON_EXECUTE_PREFIX.length  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos  +  i]  +  NON_EXECUTE_PREFIX.length  +  1);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    +    1);    	non-compiled	[CE]  	84	None	replace
158	[BUG]  [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX.length  +  1);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX.length  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  NON_EXECUTE_PREFIX.length  +  1);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    +    1);    	non-compiled	[CE]  	84	None	replace
159	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(i,  NON_EXECUTE_PREFIX.length  +  1);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(i,  NON_EXECUTE_PREFIX.length  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(i,  NON_EXECUTE_PREFIX.length  +  1);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    +    1);    	non-compiled	[CE]  	84	None	replace
160	[BUG]  [BUGGY]  throwOnEof(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    +    1);    	non-compiled	[CE]  	84	None	replace
161	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  buffer[pos],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  buffer[pos],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  buffer[pos],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	98	None	replace
162	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[pos],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[pos],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[pos],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	98	None	replace
163	[BUG]  [BUGGY]  throwOnEofRead(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofRead(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofRead(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	98	None	replace
164	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  limit[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  limit[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  limit[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	98	None	replace
165	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  limit[pos],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  limit[pos],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  limit[pos],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	98	None	replace
166	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(i,  NON_EXECUTE_PREFIX);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	163	None	replace
167	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(buffer,  pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(buffer,  pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(buffer,  pos,  NON_EXECUTE_PREFIX);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	163	None	replace
168	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(buffer,  i);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(buffer,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(buffer,  i);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	163	None	replace
169	[BUG]  [BUGGY]  implements  PEEKED_EXECUTE_PREFIX(pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  PEEKED_EXECUTE_PREFIX(pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  PEEKED_EXECUTE_PREFIX(pos,  NON_EXECUTE_PREFIX);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	163	None	replace
170	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(pos,  limit);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(pos,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(pos,  limit);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	163	None	replace
171	[BUG]  [BUGGY]  implements  PEEKED_BUFFER(pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  PEEKED_BUFFER(pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  PEEKED_BUFFER(pos,  NON_EXECUTE_PREFIX);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	163	None	replace
172	[BUG]  [BUGGY]  implements  Buffer(pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  Buffer(pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  Buffer(pos,  NON_EXECUTE_PREFIX);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	163	None	replace
173	[BUG]  [BUGGY]  throwOnEof(null,  pos,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(null,  pos,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(null,  pos,  NON_EXECUTE_PREFIX.length);	  throwOnEof(pos,    NON_EXECUTE_PREFIX,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	86	None	replace
174	[BUG]  [BUGGY]  dump(pos,  i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(pos,  i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(pos,  i,  NON_EXECUTE_PREFIX.length);	  throwOnEof(pos,    NON_EXECUTE_PREFIX,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	86	None	replace
175	[BUG]  [BUGGY]  throwOnEof  Reader(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]);	  throwOnEof    Reader(i,    buffer[pos    +    i]);    	non-compiled	[CE]  	46	None	replace
176	[BUG]  [BUGGY]  throwOnEof  Reader(i,  NON_EXECUTE_PREFIX[pos  +  i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  NON_EXECUTE_PREFIX[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  NON_EXECUTE_PREFIX[pos  +  i]);	  throwOnEof    Reader(i,    buffer[pos    +    i]);    	non-compiled	[CE]  	46	None	replace
177	[BUG]  [BUGGY]  throwOnEof  Reader(i,  buffer[pos  +  i]  &  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  buffer[pos  +  i]  &  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  buffer[pos  +  i]  &  NON_EXECUTE_PREFIX[i]);	  throwOnEof    Reader(i,    buffer[pos    +    i]);    	non-compiled	[CE]  	46	None	replace
178	[BUG]  [BUGGY]  throwOnEof  Reader(i,  buffer[pos  +  i],  limit);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  buffer[pos  +  i],  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  buffer[pos  +  i],  limit);	  throwOnEof    Reader(i,    buffer[pos    +    i]);    	non-compiled	[CE]  	46	None	replace
179	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos],  buffer[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos],  buffer[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos],  buffer[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(i,    buffer[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	27	None	replace
180	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[i],  pos,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[i],  pos,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[i],  pos,  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(i,    buffer[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	27	None	replace
181	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(i,    buffer[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	27	None	replace
182	[BUG]  [BUGGY]  throwOnEof  Reader(pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(i,    buffer[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	27	None	replace
183	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	135	None	replace
184	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  pos  +  1,  NON_EXECUTE_PREFIX);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  pos  +  1,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  pos  +  1,  NON_EXECUTE_PREFIX);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	135	None	replace
185	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX,  limit);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	135	None	replace
186	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  limit);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  i  +  1,  limit);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	135	None	replace
187	[BUG]  [BUGGY]  Throwables.throwOnEofReadException(buffer,  i  +  1,  NON_EXECUTE_PREFIX);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEofReadException(buffer,  i  +  1,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEofReadException(buffer,  i  +  1,  NON_EXECUTE_PREFIX);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	135	None	replace
188	[BUG]  [BUGGY]  Throwables.throwOnEofReadException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEofReadException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEofReadException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	135	None	replace
189	[BUG]  [BUGGY]  throwOnEof(i,  buffer[i]);  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	74	None	replace
190	[BUG]  [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	74	None	replace
191	[BUG]  [BUGGY]  executePrefix(i,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  executePrefix(i,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	executePrefix(i,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	74	None	replace
192	[BUG]  [BUGGY]  dumpBuffer(i,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(i,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(i,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	74	None	replace
193	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX[pos]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX[pos]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX[pos]);	  throwOnEof(i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	74	None	replace
194	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  Reader(i,  buffer);  }  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  Reader(i,  buffer);  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  Reader(i,  buffer);  }	  throwOnEof    Reader(i,    buffer);    	non-compiled	[CE]  	101	None	replace
195	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throwOnEof  Reader(i,  buffer);  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throwOnEof  Reader(i,  buffer);  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throwOnEof  Reader(i,  buffer);  }	  throwOnEof    Reader(i,    buffer);    	non-compiled	[CE]  	101	None	replace
196	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  Reader(i,  buffer);  }  else  {  return;  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  Reader(i,  buffer);  }  else  {  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  Reader(i,  buffer);  }  else  {  return;  }	  throwOnEof    Reader(i,    buffer);    	non-compiled	[CE]  	101	None	replace
197	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  null)  {  throwOnEof  Reader(i,  buffer);  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  null)  {  throwOnEof  Reader(i,  buffer);  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  null)  {  throwOnEof  Reader(i,  buffer);  }	  throwOnEof    Reader(i,    buffer);    	non-compiled	[CE]  	101	None	replace
198	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos    +    i]));    	non-compiled	[CE]  	125	None	replace
199	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  limit[pos  +  i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  limit[pos  +  i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  limit[pos  +  i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos    +    i]));    	non-compiled	[CE]  	125	None	replace
200	[BUG]  [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos    +    i]));    	non-compiled	[CE]  	125	None	replace
201	[BUG]  [BUGGY]  throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos    +    i]));    	non-compiled	[CE]  	125	None	replace
202	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i  +  1]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i  +  1]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i  +  1]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos    +    i]));    	non-compiled	[CE]  	125	None	replace
203	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  1]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  1]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  1]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos    +    i]));    	non-compiled	[CE]  	125	None	replace
204	[BUG]  [BUGGY]  bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i].toString();  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i].toString();  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i].toString();	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i].toString();    }    	non-compiled	[CE]  	77	None	replace
205	[BUG]  [BUGGY]  bucket[i]  =  NON_EXECUTE_PREFIX[i].toString();  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[i]  =  NON_EXECUTE_PREFIX[i].toString();  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[i]  =  NON_EXECUTE_PREFIX[i].toString();	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i].toString();    }    	non-compiled	[CE]  	77	None	replace
206	[BUG]  [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].toString();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].toString();  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].toString();  }	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i].toString();    }    	non-compiled	[CE]  	77	None	replace
207	[BUG]  [BUGGY]  allowNonWhitespace(false)  {  if(!lenient)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].toString();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(false)  {  if(!lenient)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].toString();  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(false)  {  if(!lenient)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].toString();  }	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i].toString();    }    	non-compiled	[CE]  	77	None	replace
208	[BUG]  [BUGGY]  bucket[pos  +  i]  =  buffer[pos  +  NON_EXECUTE_PREFIX[i].toString();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  =  buffer[pos  +  NON_EXECUTE_PREFIX[i].toString();  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  =  buffer[pos  +  NON_EXECUTE_PREFIX[i].toString();	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i].toString();    }    	non-compiled	[CE]  	77	None	replace
209	[BUG]  [BUGGY]  allowNonWhitespace(false);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(false);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(false);	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i].toString();    }    	non-compiled	[CE]  	77	None	replace
210	[BUG]  [BUGGY]  allowNonWhitespace(false)  {  if(!lenient)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0].toString();  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(false)  {  if(!lenient)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0].toString();  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(false)  {  if(!lenient)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0].toString();  }	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i].toString();    }    	non-compiled	[CE]  	77	None	replace
211	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  i,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  i,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  i,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	116	None	replace
212	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  buffer[i]);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  buffer[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  buffer[i]);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	116	None	replace
213	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer[i],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer[i],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer[i],  NON_EXECUTE_PREFIX[i]);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	116	None	replace
214	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX[i],  buffer[pos  +  i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX[i],  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX[i],  buffer[pos  +  i]);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	116	None	replace
215	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX[pos]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX[pos]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX[pos]);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	116	None	replace
216	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer[pos  +  i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer[pos  +  i]);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	116	None	replace
217	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX[i],  pos);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX[i],  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX[i],  pos);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	116	None	replace
218	[BUG]  [BUGGY]  throwOnEof(JSException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	23	None	replace
219	[BUG]  [BUGGY]  throwOnEof(JSException.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSException.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSException.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	23	None	replace
220	[BUG]  [BUGGY]  throwOnEof(JSException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));	  throwOnEof(JSException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	23	None	replace
221	[BUG]  [BUGGY]  throwOnEof(JSException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));	  throwOnEof(JSException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	23	None	replace
222	[BUG]  [BUGGY]  throwOnEof(JSException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));	  throwOnEof(JSException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	23	None	replace
223	[BUG]  [BUGGY]  throwOnEof(JSException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	23	None	replace
224	[BUG]  [BUGGY]  throwOnEof(JSException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	23	None	replace
225	[BUG]  [BUGGY]  throwOnEof  Reader(i,  buffer[pos],  NON_EXECUTE_PREFIX);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  buffer[pos],  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  buffer[pos],  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(i,    buffer[i],    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	102	None	replace
226	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(i,    buffer[i],    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	102	None	replace
227	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[i],  pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[i],  pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[i],  pos,  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(i,    buffer[i],    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	102	None	replace
228	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos[i],  NON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos[i],  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos[i],  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(i,    buffer[i],    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	102	None	replace
229	[BUG]  [BUGGY]  throwOnEof  Reader(pos,  buffer[i],  NON_EXECUTE_PREFIX);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(pos,  buffer[i],  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(pos,  buffer[i],  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(i,    buffer[i],    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	102	None	replace
230	[BUG]  [BUGGY]  dumpBuffer(i,  buffer[i],  NON_EXECUTE_PREFIX);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(i,  buffer[i],  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(i,  buffer[i],  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(i,    buffer[i],    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	102	None	replace
231	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  pos,  limit);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  pos,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  pos,  limit);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	1	None	replace
232	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  pos,  NON_EXECUTE_PREFIX);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	1	None	replace
233	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  limit,  NON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  limit,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  limit,  NON_EXECUTE_PREFIX);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	1	None	replace
234	[BUG]  [BUGGY]  dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX,  limit);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	1	None	replace
235	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  limit  +  1);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  limit  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  limit  +  1);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	1	None	replace
236	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	129	None	replace
237	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	129	None	replace
238	[BUG]  [BUGGY]  throwOnEof(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	129	None	replace
239	[BUG]  [BUGGY]  dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	129	None	replace
240	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  limit[i]]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  limit[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  limit[i]]);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	129	None	replace
241	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	129	None	replace
242	[BUG]  [BUGGY]  dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX.length);	  dumpBuffer(i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	83	None	replace
243	[BUG]  [BUGGY]  dumpString(buffer,  i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpString(buffer,  i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpString(buffer,  i,  NON_EXECUTE_PREFIX.length);	  dumpBuffer(i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	83	None	replace
244	[BUG]  [BUGGY]  dump(buffer,  i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer,  i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer,  i,  NON_EXECUTE_PREFIX.length);	  dumpBuffer(i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	83	None	replace
245	[BUG]  [BUGGY]  dumpBuffer(buffer,  i.length);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  i.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  i.length);	  dumpBuffer(i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	83	None	replace
246	[BUG]  [BUGGY]  dumpBuffer(pos,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(pos,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(pos,  NON_EXECUTE_PREFIX.length);	  dumpBuffer(i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	83	None	replace
247	[BUG]  [BUGGY]  dumpPath(i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpPath(i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpPath(i,  NON_EXECUTE_PREFIX.length);	  dumpBuffer(i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	83	None	replace
248	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  limit);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  limit);	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX.length:   "    +    i);    	non-compiled	[CE]  	64	None	replace
249	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  i,  NON_EXECUTE_PREFIX.length);	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX.length:   "    +    i);    	non-compiled	[CE]  	64	None	replace
250	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  buffer[i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  buffer[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  buffer[i]);	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX.length:   "    +    i);    	non-compiled	[CE]  	64	None	replace
251	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  pos);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  pos);	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX.length:   "    +    i);    	non-compiled	[CE]  	64	None	replace
252	[BUG]  [BUGGY]  Throwables.throwOnEofReadException( "Non-EXECUTE_PREFIX.length: "  +  i);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEofReadException( "Non-EXECUTE_PREFIX.length: "  +  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEofReadException( "Non-EXECUTE_PREFIX.length: "  +  i);	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX.length:   "    +    i);    	non-compiled	[CE]  	64	None	replace
253	[BUG]  [BUGGY]  allowNonWhitespace(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);	  allowNonWhitespace(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	137	None	replace
254	[BUG]  [BUGGY]  enableNonWhitespace(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  enableNonWhitespace(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	enableNonWhitespace(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);	  allowNonWhitespace(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	137	None	replace
255	[BUG]  [BUGGY]  allowNonWhitespace(buffer,  i,  NON_EXECUTE_PREFIX,  limit  +  1);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(buffer,  i,  NON_EXECUTE_PREFIX,  limit  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(buffer,  i,  NON_EXECUTE_PREFIX,  limit  +  1);	  allowNonWhitespace(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	137	None	replace
256	[BUG]  [BUGGY]  allowNonWhitespace(buffer,  i,  limit,  NON_EXECUTE_PREFIX);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(buffer,  i,  limit,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(buffer,  i,  limit,  NON_EXECUTE_PREFIX);	  allowNonWhitespace(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	137	None	replace
257	[BUG]  [BUGGY]  allowNonWhitespace(buffer,  i,  pos,  limit);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(buffer,  i,  pos,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(buffer,  i,  pos,  limit);	  allowNonWhitespace(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	137	None	replace
258	[BUG]  [BUGGY]  throwOnEof(i,  pos,  buffer[i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  buffer[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  buffer[i]);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	37	None	replace
259	[BUG]  [BUGGY]  executePrefix(i,  pos,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  executePrefix(i,  pos,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	executePrefix(i,  pos,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	37	None	replace
260	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    limit,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	19	None	replace
261	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos]),  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos]),  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos]),  NON_EXECUTE_PREFIX[i]);	  throwOnEof(JsonSyntaxException.make(buffer,    i,    limit,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	19	None	replace
262	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    limit,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	19	None	replace
263	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  pos,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  pos,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  pos,  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    limit,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	19	None	replace
264	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i],  value));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i],  value));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i],  value));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    limit,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	19	None	replace
265	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos  +  limit[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos  +  limit[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos  +  limit[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    pos    +    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	139	None	replace
266	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[i],  limit,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[i],  limit,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[i],  limit,  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    pos    +    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	139	None	replace
267	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]);	  throwOnEof    Reader(buffer,    pos    +    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	139	None	replace
268	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[1]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[1]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[1]));	  throwOnEof    Reader(buffer,    pos    +    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	139	None	replace
269	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    pos    +    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	139	None	replace
270	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[0]));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[0]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[0]));	  throwOnEof    Reader(buffer,    pos    +    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	139	None	replace
271	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	134	None	replace
272	[BUG]  [BUGGY]  Throwables.throwOnEofReadException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEofReadException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEofReadException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	134	None	replace
273	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  limit,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  limit,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  i  +  1,  limit,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	134	None	replace
274	[BUG]  [BUGGY]  dumpBuffer(buffer,  i  +  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  i  +  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  i  +  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	134	None	replace
275	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  pos  +  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  pos  +  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  pos  +  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	134	None	replace
276	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX[pos]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX[pos]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX[pos]);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	134	None	replace
277	[BUG]  [BUGGY]  throwOnEof(buffer,  pos  +  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos  +  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos  +  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    pos    +    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	90	None	replace
278	[BUG]  [BUGGY]  throwOnEof(i,  pos  +  limit,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos  +  limit,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos  +  limit,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    pos    +    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	90	None	replace
279	[BUG]  [BUGGY]  throwOnEof(i,  pos  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos  +  1,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    pos    +    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	90	None	replace
280	[BUG]  [BUGGY]  throwOnEof(i,  limit  +  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  limit  +  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  limit  +  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    pos    +    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	90	None	replace
281	[BUG]  [BUGGY]  throwOnEof(i,  pos  +  NON_EXECUTE_PREFIX.length  +  1);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos  +  NON_EXECUTE_PREFIX.length  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos  +  NON_EXECUTE_PREFIX.length  +  1);	  throwOnEof(i,    pos    +    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	90	None	replace
282	[BUG]  [BUGGY]  throwOnEof(i,  pos  +  NON_EXECUTE_PREFIX.length  -  1);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos  +  NON_EXECUTE_PREFIX.length  -  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos  +  NON_EXECUTE_PREFIX.length  -  1);	  throwOnEof(i,    pos    +    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	90	None	replace
283	[BUG]  [BUGGY]  throwOnEof(pos,  limit,  NON_EXECUTE_PREFIX);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  limit,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  limit,  NON_EXECUTE_PREFIX);	  throwOnEof(i,    limit,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	13	None	replace
284	[BUG]  [BUGGY]  throwOnEof(i,  limit,  NON_EXECUTE_PREFIX,  pos);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  limit,  NON_EXECUTE_PREFIX,  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  limit,  NON_EXECUTE_PREFIX,  pos);	  throwOnEof(i,    limit,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	13	None	replace
285	[BUG]  [BUGGY]  dumpBuffer(i,  limit,  NON_EXECUTE_PREFIX);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(i,  limit,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(i,  limit,  NON_EXECUTE_PREFIX);	  throwOnEof(i,    limit,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	13	None	replace
286	[BUG]  [BUGGY]  Throwable  m  =  JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwable  m  =  JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwable  m  =  JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));	  Throwable    m    =    JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	131	None	replace
287	[BUG]  [BUGGY]  Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));	  Throwable    m    =    JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	131	None	replace
288	[BUG]  [BUGGY]  Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));	  Throwable    m    =    JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	131	None	replace
289	[BUG]  [BUGGY]  Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));	  Throwable    m    =    JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	131	None	replace
290	[BUG]  [BUGGY]  Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));	  Throwable    m    =    JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	131	None	replace
291	[BUG]  [BUGGY]  Throwable  m  =  JsonSyntaxException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwable  m  =  JsonSyntaxException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwable  m  =  JsonSyntaxException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));	  Throwable    m    =    JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	131	None	replace
292	[BUG]  [BUGGY]  Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit);	  Throwable    m    =    JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	131	None	replace
293	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos  +  i],  limit,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos  +  i],  limit,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos  +  i],  limit,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	42	None	replace
294	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[0]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[0]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[0]);	  throwOnEof(i,    buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	42	None	replace
295	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos  +  1],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos  +  1],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos  +  1],  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	42	None	replace
296	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos  +  i],  limit[i]);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos  +  i],  limit[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos  +  i],  limit[i]);	  throwOnEof(i,    buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	42	None	replace
297	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i],  limit);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i],  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i],  limit);	  throwOnEof(i,    buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	42	None	replace
298	[BUG]  [BUGGY]  throwOnEof(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	42	None	replace
299	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	43	None	replace
300	[BUG]  [BUGGY]  dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	43	None	replace
301	[BUG]  [BUGGY]  throwOnEof(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	43	None	replace
302	[BUG]  [BUGGY]  dump(buffer,  pos,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer,  pos,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer,  pos,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	43	None	replace
303	[BUG]  [BUGGY]  throwOnEof(buffer,  0,  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  0,  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  0,  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	72	None	replace
304	[BUG]  [BUGGY]  throwOnEof(pos,  0,  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  0,  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  0,  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	72	None	replace
305	[BUG]  [BUGGY]  throwOnEof(i,  0,  buffer[pos  +  i]]);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  0,  buffer[pos  +  i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  0,  buffer[pos  +  i]]);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	72	None	replace
306	[BUG]  [BUGGY]  throwOnEof(i,  0,  buffer[pos  +  i]],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  0,  buffer[pos  +  i]],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  0,  buffer[pos  +  i]],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	72	None	replace
307	[BUG]  [BUGGY]  throwOnEof(i,  0,  buffer[pos  +  i]);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  0,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  0,  buffer[pos  +  i]);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	72	None	replace
308	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	54	None	replace
309	[BUG]  [BUGGY]  while(pos  <  limit  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  while(pos  <  limit  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	while(pos  <  limit  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	54	None	replace
310	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	54	None	replace
311	[BUG]  [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	54	None	replace
312	[BUG]  [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	54	None	replace
313	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	54	None	replace
314	[BUG]  [BUGGY]  throwOnEofString(buffer,  i,  NON_EXECUTE_PREFIX,  value);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofString(buffer,  i,  NON_EXECUTE_PREFIX,  value);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofString(buffer,  i,  NON_EXECUTE_PREFIX,  value);	  throwOnEofString(buffer,    pos,    NON_EXECUTE_PREFIX,    value);    	non-compiled	[CE]  	3	None	replace
315	[BUG]  [BUGGY]  throwOnEofString(buffer,  pos,  value,  NON_EXECUTE_PREFIX);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofString(buffer,  pos,  value,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofString(buffer,  pos,  value,  NON_EXECUTE_PREFIX);	  throwOnEofString(buffer,    pos,    NON_EXECUTE_PREFIX,    value);    	non-compiled	[CE]  	3	None	replace
316	[BUG]  [BUGGY]  throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  value,  limit);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  value,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  value,  limit);	  throwOnEofString(buffer,    pos,    NON_EXECUTE_PREFIX,    value);    	non-compiled	[CE]  	3	None	replace
317	[BUG]  [BUGGY]  throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX.length,  value);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX.length,  value);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX.length,  value);	  throwOnEofString(buffer,    pos,    NON_EXECUTE_PREFIX,    value);    	non-compiled	[CE]  	3	None	replace
318	[BUG]  [BUGGY]  dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX,  value);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX,  value);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX,  value);	  throwOnEofString(buffer,    pos,    NON_EXECUTE_PREFIX,    value);    	non-compiled	[CE]  	3	None	replace
319	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos],  i,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos],  i,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos],  i,  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer[pos],    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	26	None	replace
320	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer[pos],    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	26	None	replace
321	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i],  limit,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i],  limit,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i],  limit,  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer[pos],    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	26	None	replace
322	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos],  limit[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos],  limit[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos],  limit[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer[pos],    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	26	None	replace
323	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[1]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[1]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[1]));	  throwOnEof    Reader(buffer[pos],    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	26	None	replace
324	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[0]));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[0]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[0]));	  throwOnEof    Reader(buffer[pos],    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	26	None	replace
325	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i],  limit));  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i],  limit));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i],  limit));	  throwOnEof    Reader(buffer[pos],    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	26	None	replace
326	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length,    buffer[pos]);    	non-compiled	[CE]  	146	None	replace
327	[BUG]  [BUGGY]  throwOnEof(buffer[pos],  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer[pos],  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer[pos],  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length,    buffer[pos]);    	non-compiled	[CE]  	146	None	replace
328	[BUG]  [BUGGY]  throwOnEof(i,  pos,  buffer[pos]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  buffer[pos]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  buffer[pos]);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length,    buffer[pos]);    	non-compiled	[CE]  	146	None	replace
329	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[pos]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[pos]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[pos]);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length,    buffer[pos]);    	non-compiled	[CE]  	146	None	replace
330	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos]);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length,    buffer[pos]);    	non-compiled	[CE]  	146	None	replace
331	[BUG]  [BUGGY]  throwOnEofString(buffer,  pos,  i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofString(buffer,  pos,  i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofString(buffer,  pos,  i,  NON_EXECUTE_PREFIX.length);	  throwOnEof    String(buffer,    pos,    i,    limit);    	non-compiled	[CE]  	114	None	replace
332	[BUG]  [BUGGY]  throwOnEofString(buffer,  pos,  i,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofString(buffer,  pos,  i,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofString(buffer,  pos,  i,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    String(buffer,    pos,    i,    limit);    	non-compiled	[CE]  	114	None	replace
333	[BUG]  [BUGGY]  throwOnEof(i,  buffer,  pos,  limit);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer,  pos,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer,  pos,  limit);	  throwOnEof(i,    buffer,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	104	None	replace
334	[BUG]  [BUGGY]  throwOnEof(i,  buffer,  pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer,  pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer,  pos,  NON_EXECUTE_PREFIX);	  throwOnEof(i,    buffer,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	104	None	replace
335	[BUG]  [BUGGY]  throwOnEof(pos,  buffer,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  buffer,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  buffer,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX);	  throwOnEof(i,    buffer,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	104	None	replace
336	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  continue;  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  continue;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  continue;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    continue;    }    	non-compiled	[CE]  	159	None	replace
337	[BUG]  [BUGGY]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  continue;  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  continue;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  continue;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    continue;    }    	non-compiled	[CE]  	159	None	replace
338	[BUG]  [BUGGY]  while(pos  <  limit  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  while(pos  <  limit  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	while(pos  <  limit  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    continue;    }    	non-compiled	[CE]  	159	None	replace
339	[BUG]  [BUGGY]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  continue;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  continue;  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  continue;	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    continue;    }    	non-compiled	[CE]  	159	None	replace
340	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i]    	non-compiled	[CE]  	108	None	replace
341	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFI  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFI  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFI	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i]    	non-compiled	[CE]  	108	None	replace
342	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i]    	non-compiled	[CE]  	108	None	replace
343	[BUG]  [BUGGY]  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	&&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i]    	non-compiled	[CE]  	108	None	replace
344	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i]    	non-compiled	[CE]  	108	None	replace
345	[BUG]  [BUGGY]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i]    	non-compiled	[CE]  	108	None	replace
346	[BUG]  [BUGGY]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	56	None	replace
347	[BUG]  [BUGGY]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	56	None	replace
348	[BUG]  [BUGGY]  allowNonWhitespace(buffer[pos  +  i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(buffer[pos  +  i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(buffer[pos  +  i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	56	None	replace
349	[BUG]  [BUGGY]  readBuffer(buffer[pos  +  i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  readBuffer(buffer[pos  +  i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	readBuffer(buffer[pos  +  i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	56	None	replace
350	[BUG]  [BUGGY]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	56	None	replace
351	[BUG]  [BUGGY]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]  [CE]  [FE]                                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	56	None	replace
352	[BUG]  [BUGGY]  throwOnEofRead(buffer,  i,  limit);  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofRead(buffer,  i,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofRead(buffer,  i,  limit);	  throwOnEofRead(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	143	None	replace
353	[BUG]  [BUGGY]  throwOnEofRead(i,  buffer,  NON_EXECUTE_PREFIX);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofRead(i,  buffer,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofRead(i,  buffer,  NON_EXECUTE_PREFIX);	  throwOnEofRead(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	143	None	replace
354	[BUG]  [BUGGY]  throwOnEofRead(buffer,  i,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofRead(buffer,  i,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofRead(buffer,  i,  NON_EXECUTE_PREFIX,  limit);	  throwOnEofRead(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	143	None	replace
355	[BUG]  [BUGGY]  executePrefix(buffer,  i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  executePrefix(buffer,  i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	executePrefix(buffer,  i,  NON_EXECUTE_PREFIX);	  throwOnEofRead(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	143	None	replace
356	[BUG]  [BUGGY]  try  {  throwOnEofRead(buffer,  pos,  NON_EXECUTE_PREFIX);  }  catch(Throwable  t)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  try  {  throwOnEofRead(buffer,  pos,  NON_EXECUTE_PREFIX);  }  catch(Throwable  t)  {  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	try  {  throwOnEofRead(buffer,  pos,  NON_EXECUTE_PREFIX);  }  catch(Throwable  t)  {	  throwOnEofRead(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	143	None	replace
357	[BUG]  [BUGGY]  dump(pos,  i,  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(pos,  i,  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(pos,  i,  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(pos,    i,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	147	None	replace
358	[BUG]  [BUGGY]  dumpBuffer(pos,  i,  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(pos,  i,  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(pos,  i,  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(pos,    i,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	147	None	replace
359	[BUG]  [BUGGY]  throwOnEof(pos,  i,  buffer[pos  +  i]],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  i,  buffer[pos  +  i]],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  i,  buffer[pos  +  i]],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(pos,    i,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	147	None	replace
360	[BUG]  [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i]);    }    	non-compiled	[CE]  	78	None	replace
361	[BUG]  [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]);  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]);  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]);  }	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i]);    }    	non-compiled	[CE]  	78	None	replace
362	[BUG]  [BUGGY]  bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  =  NON_EXECUTE_PREFIX[i])  {	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i]);    }    	non-compiled	[CE]  	78	None	replace
363	[BUG]  [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i]);    }    	non-compiled	[CE]  	78	None	replace
364	[BUG]  [BUGGY]  bucket[pos  +  i]  =  buffer[pos  +  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  =  buffer[pos  +  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  =  buffer[pos  +  NON_EXECUTE_PREFIX[i]);	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i]);    }    	non-compiled	[CE]  	78	None	replace
365	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	53	None	replace
366	[BUG]  [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	53	None	replace
367	[BUG]  [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	53	None	replace
368	[BUG]  [BUGGY]  readBuffer(buffer[pos  +  i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  readBuffer(buffer[pos  +  i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	readBuffer(buffer[pos  +  i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	53	None	replace
369	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	122	None	replace
370	[BUG]  [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	122	None	replace
371	[BUG]  [BUGGY]  throwOnEof(i,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	122	None	replace
372	[BUG]  [BUGGY]  throwOnEof(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	122	None	replace
373	[BUG]  [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  NON_EXECUTE_PREFIX[i]));	  throwOnEof(i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	122	None	replace
374	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[i]));	  throwOnEof(i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	122	None	replace
375	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i]));	  throwOnEof(i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	122	None	replace
376	[BUG]  [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	75	None	replace
377	[BUG]  [BUGGY]  allowNonWhitespace(false)  {  if(!lenient)  {  throwOnEof;  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(false)  {  if(!lenient)  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(false)  {  if(!lenient)  {  throwOnEof;  }	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	75	None	replace
378	[BUG]  [BUGGY]  throwOnEof(i,  pos  -  1);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos  -  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos  -  1);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    1);    	non-compiled	[CE]  	82	None	replace
379	[BUG]  [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX.length  -  1);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX.length  -  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  NON_EXECUTE_PREFIX.length  -  1);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    1);    	non-compiled	[CE]  	82	None	replace
380	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos  -  1]  -  NON_EXECUTE_PREFIX.length  -  1);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos  -  1]  -  NON_EXECUTE_PREFIX.length  -  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos  -  1]  -  NON_EXECUTE_PREFIX.length  -  1);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    1);    	non-compiled	[CE]  	82	None	replace
381	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length  -  1,  limit);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length  -  1,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX.length  -  1,  limit);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    1);    	non-compiled	[CE]  	82	None	replace
382	[BUG]  [BUGGY]  While(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  throwOnEof;  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  While(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	While(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  throwOnEof;  }	  if(!lenient)    {    throwOnEof;    }    	non-compiled	[CE]  	76	None	replace
383	[BUG]  [BUGGY]  While(!lenient  &&!fillBuffer(nON_EXECUTE_PREFIX[i]))  {  throwOnEof;  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  While(!lenient  &&!fillBuffer(nON_EXECUTE_PREFIX[i]))  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	While(!lenient  &&!fillBuffer(nON_EXECUTE_PREFIX[i]))  {  throwOnEof;  }	  if(!lenient)    {    throwOnEof;    }    	non-compiled	[CE]  	76	None	replace
384	[BUG]  [BUGGY]  While(!lenient  &&!fillBuffer(non_EXECUTE_PREFIX[i]))  {  throwOnEof;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  While(!lenient  &&!fillBuffer(non_EXECUTE_PREFIX[i]))  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	While(!lenient  &&!fillBuffer(non_EXECUTE_PREFIX[i]))  {  throwOnEof;  }	  if(!lenient)    {    throwOnEof;    }    	non-compiled	[CE]  	76	None	replace
385	[BUG]  [BUGGY]  While(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX.length  -  1))  {  throwOnEof;  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  While(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX.length  -  1))  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	While(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX.length  -  1))  {  throwOnEof;  }	  if(!lenient)    {    throwOnEof;    }    	non-compiled	[CE]  	76	None	replace
386	[BUG]  [BUGGY]  While(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX[i].length()  >  limit))  {  throwOnEof;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  While(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX[i].length()  >  limit))  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	While(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX[i].length()  >  limit))  {  throwOnEof;  }	  if(!lenient)    {    throwOnEof;    }    	non-compiled	[CE]  	76	None	replace
387	[BUG]  [BUGGY]  While(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  throwOnEof;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  While(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  throwOnEof;  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	While(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  throwOnEof;	  if(!lenient)    {    throwOnEof;    }    	non-compiled	[CE]  	76	None	replace
388	[BUG]  [BUGGY]  throwOnEof(buffer,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(pos,    NON_EXECUTE_PREFIX,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	69	None	replace
389	[BUG]  [BUGGY]  throwOnEof(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(pos,    NON_EXECUTE_PREFIX,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	69	None	replace
390	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  i,  limit);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  i,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  i,  limit);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	61	None	replace
391	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	61	None	replace
392	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX,  limit  +  1);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX,  limit  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX,  limit  +  1);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	61	None	replace
393	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX,  i);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX,  i);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	61	None	replace
394	[BUG]  [BUGGY]  dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	61	None	replace
395	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	61	None	replace
396	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]))    {    return;    }    	non-compiled	[CE]  	55	None	replace
397	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  For(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	For(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]))    {    return;    }    	non-compiled	[CE]  	55	None	replace
398	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]))    {    return;    }    	non-compiled	[CE]  	55	None	replace
399	[BUG]  [BUGGY]  while(pos  <  limit  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  while(pos  <  limit  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	while(pos  <  limit  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]))    {    return;    }    	non-compiled	[CE]  	55	None	replace
400	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX.length,    limit);    	non-compiled	[CE]  	95	None	replace
401	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  pos,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  pos,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  pos,  NON_EXECUTE_PREFIX.length);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX.length,    limit);    	non-compiled	[CE]  	95	None	replace
402	[BUG]  [BUGGY]  dumpBuffer(buffer,  i,  limit);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  i,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  i,  limit);	  dumpBuffer(i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	49	None	replace
403	[BUG]  [BUGGY]  dumpBuffer(buffer,  pos,  limit);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  pos,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  pos,  limit);	  dumpBuffer(i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	49	None	replace
404	[BUG]  [BUGGY]  dumpBuffer(buffer[pos  +  i],  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer[pos  +  i],  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer[pos  +  i],  NON_EXECUTE_PREFIX,  limit);	  dumpBuffer(i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	49	None	replace
405	[BUG]  [BUGGY]  executePrefix(i,  pos);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  executePrefix(i,  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	executePrefix(i,  pos);	  executePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	34	None	replace
406	[BUG]  [BUGGY]  executePrefix(pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  executePrefix(pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	executePrefix(pos,  NON_EXECUTE_PREFIX);	  executePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	34	None	replace
407	[BUG]  [BUGGY]  executePrefix(i,  limit);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  executePrefix(i,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	executePrefix(i,  limit);	  executePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	34	None	replace
408	[BUG]  [BUGGY]  executeInternal(i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  executeInternal(i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	executeInternal(i,  NON_EXECUTE_PREFIX);	  executePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	34	None	replace
409	[BUG]  [BUGGY]  executePrefix(buffer,  i);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  executePrefix(buffer,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	executePrefix(buffer,  i);	  executePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	34	None	replace
410	[BUG]  [BUGGY]  executePrefix(i,  buffer[pos  +  i]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  executePrefix(i,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	executePrefix(i,  buffer[pos  +  i]);	  executePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	34	None	replace
411	[BUG]  [BUGGY]  executePrefix(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  executePrefix(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	executePrefix(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX);	  executePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	34	None	replace
412	[BUG]  [BUGGY]  throwOnEof(i,  buffer,  pos);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer,  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer,  pos);	  throwOnEof(i,    buffer,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	17	None	replace
413	[BUG]  [BUGGY]  throwOnEof(pos,  buffer,  NON_EXECUTE_PREFIX);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  buffer,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  buffer,  NON_EXECUTE_PREFIX);	  throwOnEof(i,    buffer,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	17	None	replace
414	[BUG]  [BUGGY]  throwOnEof(i,  pos,  buffer[pos  +  i]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  buffer[pos  +  i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	105	None	replace
415	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  }	  throwOnEof(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	105	None	replace
416	[BUG]  [BUGGY]  throwOnEof(i,  limit,  buffer[pos  +  i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  limit,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  limit,  buffer[pos  +  i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	105	None	replace
417	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  }  else  {  return;  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  }  else  {  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  }  else  {  return;  }	  throwOnEof(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	105	None	replace
418	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  limit[pos  +  i]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  limit[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX,  limit[pos  +  i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	105	None	replace
419	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  }  else  {  throwOnEof(i,  NON_EXECUTE  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  }  else  {  throwOnEof(i,  NON_EXECUTE  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  }  else  {  throwOnEof(i,  NON_EXECUTE	  throwOnEof(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	105	None	replace
420	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  pos  +  1);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  pos  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  pos  +  1);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    limit    +    1);    	non-compiled	[CE]  	92	None	replace
421	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  pos,  NON_EXECUTE_PREFIX  +  1);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  pos,  NON_EXECUTE_PREFIX  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  pos,  NON_EXECUTE_PREFIX  +  1);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    limit    +    1);    	non-compiled	[CE]  	92	None	replace
422	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos  +  1,  NON_EXECUTE_PREFIX,  limit  +  1);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos  +  1,  NON_EXECUTE_PREFIX,  limit  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos  +  1,  NON_EXECUTE_PREFIX,  limit  +  1);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    limit    +    1);    	non-compiled	[CE]  	92	None	replace
423	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  pos  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  pos  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  pos  +  1,  NON_EXECUTE_PREFIX.length);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	136	None	replace
424	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  limit  +  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  limit  +  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  limit  +  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	136	None	replace
425	[BUG]  [BUGGY]  throwOnEof(buffer[pos],  i,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer[pos],  i,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer[pos],  i,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	96	None	replace
426	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i],  limit);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i],  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i],  limit);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	96	None	replace
427	[BUG]  [BUGGY]  throwOnEof(buffer[pos],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer[pos],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer[pos],  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	96	None	replace
428	[BUG]  [BUGGY]  dumpChars(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpChars(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpChars(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	96	None	replace
429	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]  -  1);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]  -  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]  -  1);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	96	None	replace
430	[BUG]  [BUGGY]  throwOnEof  Reader(i,  pos,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  pos,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  pos,  NON_EXECUTE_PREFIX.length);	  throwOnEof    Reader(i,    pos,    limit);    	non-compiled	[CE]  	5	None	replace
431	[BUG]  [BUGGY]  throwOnEof  Reader(i,  pos,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  pos,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  pos,  NON_EXECUTE_PREFIX,  limit);	  throwOnEof    Reader(i,    pos,    limit);    	non-compiled	[CE]  	5	None	replace
432	[BUG]  [BUGGY]  throwOnEof  Reader(i,  pos,  buffer[i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  pos,  buffer[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  pos,  buffer[i]);	  throwOnEof    Reader(i,    pos,    limit);    	non-compiled	[CE]  	5	None	replace
433	[BUG]  [BUGGY]  dump(buffer,  pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer,  pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer,  pos,  NON_EXECUTE_PREFIX);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	50	None	replace
434	[BUG]  [BUGGY]  throwOnEof  Reader(i,  pos,  buffer[pos  +  i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  pos,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  pos,  buffer[pos  +  i]);	  throwOnEof    Reader(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	47	None	replace
435	[BUG]  [BUGGY]  throwOnEof  Reader(i,  limit,  buffer[pos  +  i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  limit,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  limit,  buffer[pos  +  i]);	  throwOnEof    Reader(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	47	None	replace
436	[BUG]  [BUGGY]  throwOnEof  Reader(i,  NON_EXECUTE_PREFIX,  limit[pos  +  i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  NON_EXECUTE_PREFIX,  limit[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  NON_EXECUTE_PREFIX,  limit[pos  +  i]);	  throwOnEof    Reader(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	47	None	replace
437	[BUG]  [BUGGY]  dumpBuffer(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);	  throwOnEof    Reader(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	47	None	replace
438	[BUG]  [BUGGY]  throwOnEof  Reader(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  -  1);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  -  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  -  1);	  throwOnEof    Reader(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	47	None	replace
439	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  buffer[i]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  buffer[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  buffer[i]);	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX    value:   "    +    i);    	non-compiled	[CE]  	65	None	replace
440	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  limit);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  limit);	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX    value:   "    +    i);    	non-compiled	[CE]  	65	None	replace
441	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  i,  NON_EXECUTE_PREFIX.length);	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX    value:   "    +    i);    	non-compiled	[CE]  	65	None	replace
442	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  NON_EXECUTE_PREFIX.length);	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX    value:   "    +    i);    	non-compiled	[CE]  	65	None	replace
443	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  i,  NON_EXECUTE_PREFIX);	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX    value:   "    +    i);    	non-compiled	[CE]  	65	None	replace
444	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  buffer,  i);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  buffer,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  buffer,  i);	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX    value:   "    +    i);    	non-compiled	[CE]  	65	None	replace
445	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(i,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(i,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(i,  NON_EXECUTE_PREFIX,  limit);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	141	None	replace
446	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(pos,  i,  limit);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(pos,  i,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(pos,  i,  limit);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	141	None	replace
447	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(buffer,  pos,  limit);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(buffer,  pos,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(buffer,  pos,  limit);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	141	None	replace
448	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(pos,  limit,  NON_EXECUTE_PREFIX);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(pos,  limit,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(pos,  limit,  NON_EXECUTE_PREFIX);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	141	None	replace
449	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(buffer,  i,  limit);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(buffer,  i,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(buffer,  i,  limit);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	141	None	replace
450	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(pos,  limit,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(pos,  limit,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(pos,  limit,  NON_EXECUTE_PREFIX.length);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	141	None	replace
451	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(i,  pos,  limit);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(i,  pos,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(i,  pos,  limit);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	141	None	replace
452	[BUG]  [BUGGY]  throwOnEof(buffer[i],  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer[i],  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer[i],  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    buffer[i]]);    	non-compiled	[CE]  	73	None	replace
453	[BUG]  [BUGGY]  throwOnEof(i,  buffer[i],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[i],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[i],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    buffer[i]]);    	non-compiled	[CE]  	73	None	replace
454	[BUG]  [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX,  buffer[i]]);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX,  buffer[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  NON_EXECUTE_PREFIX,  buffer[i]]);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    buffer[i]]);    	non-compiled	[CE]  	73	None	replace
455	[BUG]  [BUGGY]  throwOnEof(i,  pos,  buffer[i]]);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  buffer[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  buffer[i]]);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    buffer[i]]);    	non-compiled	[CE]  	73	None	replace
456	[BUG]  [BUGGY]  throwOnEof(buffer[i],  NON_EXECUTE_PREFIX,  buffer[i]]);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer[i],  NON_EXECUTE_PREFIX,  buffer[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer[i],  NON_EXECUTE_PREFIX,  buffer[i]]);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    buffer[i]]);    	non-compiled	[CE]  	73	None	replace
457	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos]],  NON_EXECUTE_PREFIX);  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos]],  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos]],  NON_EXECUTE_PREFIX);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    buffer[i]]);    	non-compiled	[CE]  	73	None	replace
458	[BUG]  [BUGGY]  dump(JsonSyntaxException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(JsonSyntaxException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(JsonSyntaxException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));	  dump(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	132	None	replace
459	[BUG]  [BUGGY]  dump(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));	  dump(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	132	None	replace
460	[BUG]  [BUGGY]  dump(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));	  dump(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	132	None	replace
461	[BUG]  [BUGGY]  dump(JsonSyntaxException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(JsonSyntaxException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(JsonSyntaxException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));	  dump(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	132	None	replace
462	[BUG]  [BUGGY]  dump(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));	  dump(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	132	None	replace
463	[BUG]  [BUGGY]  dump(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));	  dump(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	132	None	replace
464	[BUG]  [BUGGY]  dump(JsonSyntaxException.make(buffer,  pos,  limit  +  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(JsonSyntaxException.make(buffer,  pos,  limit  +  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(JsonSyntaxException.make(buffer,  pos,  limit  +  NON_EXECUTE_PREFIX[i]));	  dump(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	132	None	replace
465	[BUG]  [BUGGY]  throwOnEof  Reader(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	25	None	replace
466	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos[pos],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos[pos],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos[pos],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	25	None	replace
467	[BUG]  [BUGGY]  throwOnEof  Reader(i,  buffer[pos],  NON_EXECUTE_PREFIX[i],  limit));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  buffer[pos],  NON_EXECUTE_PREFIX[i],  limit));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  buffer[pos],  NON_EXECUTE_PREFIX[i],  limit));	  throwOnEof    Reader(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	25	None	replace
468	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i]);	  throwOnEof    Reader(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	25	None	replace
469	[BUG]  [BUGGY]  throwOnEof  Reader(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]);	  throwOnEof    Reader(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	25	None	replace
470	[BUG]  [BUGGY]  dump(pos,  i,  NON_EXECUTE_PREFIX);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(pos,  i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(pos,  i,  NON_EXECUTE_PREFIX);	  dump(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	140	None	replace
471	[BUG]  [BUGGY]  dumpPath(buffer,  i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpPath(buffer,  i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpPath(buffer,  i,  NON_EXECUTE_PREFIX);	  dump(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	140	None	replace
472	[BUG]  [BUGGY]  dump(null,  i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(null,  i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(null,  i,  NON_EXECUTE_PREFIX);	  dump(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	140	None	replace
473	[BUG]  [BUGGY]  dump(i,  buffer,  NON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(i,  buffer,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(i,  buffer,  NON_EXECUTE_PREFIX);	  dump(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	140	None	replace
474	[BUG]  [BUGGY]  dump(buffer,  i,  limit);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer,  i,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer,  i,  limit);	  dump(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	140	None	replace
475	[BUG]  [BUGGY]  dump(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);	  dump(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	140	None	replace
476	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].length;  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].length;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].length;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i].length;    }    	non-compiled	[CE]  	107	None	replace
477	[BUG]  [BUGGY]  readBuffer(buffer[pos  +  i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].length;  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  readBuffer(buffer[pos  +  i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].length;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	readBuffer(buffer[pos  +  i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].length;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i].length;    }    	non-compiled	[CE]  	107	None	replace
478	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].length  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].length  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].length	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i].length;    }    	non-compiled	[CE]  	107	None	replace
479	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  limit);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  limit);	  throwOnEof(buffer,    pos,    limit);    	non-compiled	[CE]  	142	None	replace
480	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  i);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  i);	  throwOnEof(buffer,    pos,    limit);    	non-compiled	[CE]  	142	None	replace
481	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  0);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  0);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  0);	  throwOnEof(buffer,    pos,    limit);    	non-compiled	[CE]  	142	None	replace
482	[BUG]  [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	57	None	replace
483	[BUG]  [BUGGY]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	57	None	replace
484	[BUG]  [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	57	None	replace
485	[BUG]  [BUGGY]  allowNonWhitespace(buffer[pos  +  i])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(buffer[pos  +  i])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(buffer[pos  +  i])  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	57	None	replace
486	[BUG]  [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]);	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	57	None	replace
487	[BUG]  [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	57	None	replace
488	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  limit[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  limit[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  limit[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    pos,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	99	None	replace
489	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    pos,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	99	None	replace
490	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  buffer[pos],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  buffer[pos],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  buffer[pos],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    pos,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	99	None	replace
491	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[1]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[1]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[1]));	  throwOnEof    Reader(buffer,    pos,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	99	None	replace
492	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    pos,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	99	None	replace
493	[BUG]  [BUGGY]  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	58	None	replace
494	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	58	None	replace
495	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	58	None	replace
496	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [CE]  [FE]                                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	58	None	replace
497	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [CE]  [FE]                                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	58	None	replace
498	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX);	  throwOnEof    String(buffer,    i,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	59	None	replace
499	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  pos,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  pos,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  pos,  NON_EXECUTE_PREFIX,  limit);	  throwOnEof    String(buffer,    i,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	59	None	replace
500	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  pos,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  pos,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  pos,  NON_EXECUTE_PREFIX.length);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	118	None	replace
501	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  i,  NON_EXECUTE_PREFIX.length);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	118	None	replace
502	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  limit,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  limit,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  limit,  NON_EXECUTE_PREFIX.length);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	118	None	replace
503	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX.length  -  1);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX.length  -  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX.length  -  1);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	118	None	replace
504	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX.length  -  limit);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX.length  -  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX.length  -  limit);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	118	None	replace
505	[BUG]  [BUGGY]  bucket[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
506	[BUG]  [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
507	[BUG]  [BUGGY]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  return;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  return;  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  return;	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
508	[BUG]  [BUGGY]  throwOnEof  Reader(i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  NON_EXECUTE_PREFIX.length);	  throwOnEof    Reader(i,    limit);    	non-compiled	[CE]  	45	None	replace
509	[BUG]  [BUGGY]  throwOnEof  Reader(i,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    Reader(i,    limit);    	non-compiled	[CE]  	45	None	replace
510	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  pos);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  pos);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    pos);    	non-compiled	[CE]  	91	None	replace
511	[BUG]  [BUGGY]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	158	None	replace
512	[BUG]  [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	158	None	replace
513	[BUG]  [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	158	None	replace
514	[BUG]  [BUGGY]  bucket[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	158	None	replace
515	[BUG]  [BUGGY]  allowNonWhitespace(buffer[pos  +  i])  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(buffer[pos  +  i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(buffer[pos  +  i])  {  throw  new  IllegalStateException( " ");  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	158	None	replace
516	[BUG]  [BUGGY]  allowNonWhitespace(buffer[pos  +  i]),  limit,  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(buffer[pos  +  i]),  limit,  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(buffer[pos  +  i]),  limit,  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	158	None	replace
517	[BUG]  [BUGGY]  allowNonWhitespace(buffer[pos  +  i]);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(buffer[pos  +  i]);	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	158	None	replace
518	[BUG]  [BUGGY]  throwOnEof(buffer,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(null,    NON_EXECUTE_PREFIX.length,    buffer[pos]);    	non-compiled	[CE]  	145	None	replace
519	[BUG]  [BUGGY]  throwOnEof(buffer,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[pos]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[pos]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[pos]);	  throwOnEof(null,    NON_EXECUTE_PREFIX.length,    buffer[pos]);    	non-compiled	[CE]  	145	None	replace
520	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length,  buffer[pos]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length,  buffer[pos]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length,  buffer[pos]);	  throwOnEof(null,    NON_EXECUTE_PREFIX.length,    buffer[pos]);    	non-compiled	[CE]  	145	None	replace
521	[BUG]  [BUGGY]  consumeNonExecutePrefix(i,  limit);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumeNonExecutePrefix(i,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumeNonExecutePrefix(i,  limit);	  consumeNonExecutePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	121	None	replace
522	[BUG]  [BUGGY]  consumeNonExecutePrefix(pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumeNonExecutePrefix(pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumeNonExecutePrefix(pos,  NON_EXECUTE_PREFIX);	  consumeNonExecutePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	121	None	replace
523	[BUG]  [BUGGY]  joinNonWhitespace(i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  joinNonWhitespace(i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	joinNonWhitespace(i,  NON_EXECUTE_PREFIX);	  consumeNonExecutePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	121	None	replace
524	[BUG]  [BUGGY]  pos  +=  NON_EXECUTE_PREFIX[i];  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  pos  +=  NON_EXECUTE_PREFIX[i];  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	pos  +=  NON_EXECUTE_PREFIX[i];	  consumeNonExecutePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	121	None	replace
525	[BUG]  [BUGGY]  pos  +=  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  pos  +=  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	pos  +=  NON_EXECUTE_PREFIX[i]);	  consumeNonExecutePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	121	None	replace
526	[BUG]  [BUGGY]  pos  +=  NON_EXECUTE_PREFIX.length;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  pos  +=  NON_EXECUTE_PREFIX.length;  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	pos  +=  NON_EXECUTE_PREFIX.length;	  consumeNonExecutePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	121	None	replace
527	[BUG]  [BUGGY]  consumePrefix(i,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumePrefix(i,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumePrefix(i,  NON_EXECUTE_PREFIX,  limit);	  consumeNonExecutePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	121	None	replace
528	[BUG]  [BUGGY]  throwOnEof  =  pos  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  pos  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  pos  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);	  throwOnEof    =    i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	150	None	replace
529	[BUG]  [BUGGY]  throwOnEof  =  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[pos]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[pos]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[pos]);	  throwOnEof    =    i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	150	None	replace
530	[BUG]  [BUGGY]  throwOnEof  =  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);	  throwOnEof    =    i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	150	None	replace
531	[BUG]  [BUGGY]  throwOnEof  =  i  <  limit  ||!fillBuffer(NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  i  <  limit  ||!fillBuffer(NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  i  <  limit  ||!fillBuffer(NON_EXECUTE_PREFIX[i]);	  throwOnEof    =    i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	150	None	replace
532	[BUG]  [BUGGY]  throwOnEof  =  i  >=  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  i  >=  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  i  >=  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);	  throwOnEof    =    i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	150	None	replace
533	[BUG]  [BUGGY]  throwOnEof  =  i  ==  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  i  ==  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  i  ==  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);	  throwOnEof    =    i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	150	None	replace
534	[BUG]  [BUGGY]  throwOnEof(i,  pos,  buffer[pos  +  i]],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  buffer[pos  +  i]],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  buffer[pos  +  i]],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	67	None	replace
535	[BUG]  [BUGGY]  While(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  throwOnEof  ReaderException( " ");  }  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  While(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  throwOnEof  ReaderException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	While(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  throwOnEof  ReaderException( " ");  }	  if(!lenient)    {    throwOnEof    ReaderException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
536	[BUG]  [BUGGY]  While(!lenient  &&  isEnabled(Feature.QUOTE_FIELD_NAMES[i]))  {  throwOnEof  ReaderException( " ");  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  While(!lenient  &&  isEnabled(Feature.QUOTE_FIELD_NAMES[i]))  {  throwOnEof  ReaderException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	While(!lenient  &&  isEnabled(Feature.QUOTE_FIELD_NAMES[i]))  {  throwOnEof  ReaderException( " ");  }	  if(!lenient)    {    throwOnEof    ReaderException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
537	[BUG]  [BUGGY]  While(!lenient  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throwOnEof  ReaderException( " ");  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  While(!lenient  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throwOnEof  ReaderException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	While(!lenient  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throwOnEof  ReaderException( " ");  }	  if(!lenient)    {    throwOnEof    ReaderException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
538	[BUG]  [BUGGY]  While(!lenient  &&  throwOnEof  ReaderException( " "))  {  throwOnEof  ReaderException( " ");  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  While(!lenient  &&  throwOnEof  ReaderException( " "))  {  throwOnEof  ReaderException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	While(!lenient  &&  throwOnEof  ReaderException( " "))  {  throwOnEof  ReaderException( " ");  }	  if(!lenient)    {    throwOnEof    ReaderException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
539	[BUG]  [BUGGY]  While(!lenient)  {  throwOnEof  ReaderException( " ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  While(!lenient)  {  throwOnEof  ReaderException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	While(!lenient)  {  throwOnEof  ReaderException( " ");  }	  if(!lenient)    {    throwOnEof    ReaderException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
540	[BUG]  [BUGGY]  While(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX[i].length()  >  limit))  {  throwOnEof  ReaderException( " ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  While(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX[i].length()  >  limit))  {  throwOnEof  ReaderException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	While(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX[i].length()  >  limit))  {  throwOnEof  ReaderException( " ");  }	  if(!lenient)    {    throwOnEof    ReaderException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
541	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  limit,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  limit,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  limit,  NON_EXECUTE_PREFIX.length);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	157	None	replace
542	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length  +  1);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length  +  1);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	157	None	replace
543	[BUG]  [BUGGY]  dump(buffer,  pos,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer,  pos,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer,  pos,  NON_EXECUTE_PREFIX.length);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	157	None	replace
544	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  buffer.length);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  buffer.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  buffer.length);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    buffer.length);    	non-compiled	[CE]  	94	None	replace
545	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  limit,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  limit,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  limit,  NON_EXECUTE_PREFIX.length);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    buffer.length);    	non-compiled	[CE]  	94	None	replace
546	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  0,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  0,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  0,  NON_EXECUTE_PREFIX.length);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    buffer.length);    	non-compiled	[CE]  	94	None	replace
547	[BUG]  [BUGGY]  dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	70	None	replace
548	[BUG]  [BUGGY]  dump(buffer,  i,  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer,  i,  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer,  i,  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	70	None	replace
549	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[pos]]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[pos]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[pos]]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	70	None	replace
550	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[i],  limit);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[i],  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[i],  limit);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	70	None	replace
551	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  limit[i]]);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  limit[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  limit[i]]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	70	None	replace
552	[BUG]  [BUGGY]  throwOnEof(i,  buffer,  pos  +  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer,  pos  +  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer,  pos  +  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    buffer,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	88	None	replace
553	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length,  buffer[pos  +  i]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX.length,  buffer[pos  +  i]);	  throwOnEof(i,    buffer,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	88	None	replace
554	[BUG]  [BUGGY]  throwOnEof  Reader(pos,  buffer,  NON_EXECUTE_PREFIX);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(pos,  buffer,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(pos,  buffer,  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(i,    buffer,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	112	None	replace
555	[BUG]  [BUGGY]  dumpBuffer(i,  buffer,  NON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(i,  buffer,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(i,  buffer,  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(i,    buffer,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	112	None	replace
556	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  i);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  i);	  throwOnEof    Reader(buffer,    pos,    limit);    	non-compiled	[CE]  	152	None	replace
557	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    Reader(buffer,    pos,    limit);    	non-compiled	[CE]  	152	None	replace
558	[BUG]  [BUGGY]  throwOnEof(i,  pos,  limit,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  limit,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  limit,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	51	None	replace
559	[BUG]  [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX.length  +  1);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX.length  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  NON_EXECUTE_PREFIX.length  +  1);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	51	None	replace
560	[BUG]  [BUGGY]  throwOnEof(pos,  i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  i,  NON_EXECUTE_PREFIX);	  throwOnEof(pos,    NON_EXECUTE_PREFIX,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	14	None	replace
561	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PLAIN);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PLAIN);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PLAIN);	  throwOnEof(pos,    NON_EXECUTE_PREFIX,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	14	None	replace
562	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_SIGN);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_SIGN);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_SIGN);	  throwOnEof(pos,    NON_EXECUTE_PREFIX,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	14	None	replace
563	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  limit,  NON_EXECUTE_PREFIX,  i);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  limit,  NON_EXECUTE_PREFIX,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  limit,  NON_EXECUTE_PREFIX,  i);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX,    i);    	non-compiled	[CE]  	113	None	replace
564	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX,    i);    	non-compiled	[CE]  	113	None	replace
565	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX,    i);    	non-compiled	[CE]  	113	None	replace
566	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX,    i);    	non-compiled	[CE]  	113	None	replace
567	[BUG]  [BUGGY]  throwOnEofRead(buffer,  pos,  limit);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofRead(buffer,  pos,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofRead(buffer,  pos,  limit);	  throwOnEofRead(buffer,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	144	None	replace
568	[BUG]  [BUGGY]  throwOnEofRead(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofRead(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofRead(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);	  throwOnEofRead(buffer,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	144	None	replace
569	[BUG]  [BUGGY]  throwOnEofRead(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofRead(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofRead(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);	  throwOnEofRead(buffer,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	144	None	replace
570	[BUG]  [BUGGY]  executePrefix(buffer,  pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  executePrefix(buffer,  pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	executePrefix(buffer,  pos,  NON_EXECUTE_PREFIX);	  throwOnEofRead(buffer,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	144	None	replace
571	[BUG]  [BUGGY]  throwOnEofRead(buffer,  pos,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofRead(buffer,  pos,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofRead(buffer,  pos,  NON_EXECUTE_PREFIX.length);	  throwOnEofRead(buffer,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	144	None	replace
572	[BUG]  [BUGGY]  throwOnEofString(buffer,  i,  NON_EXECUTE_PREFIX,  0,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofString(buffer,  i,  NON_EXECUTE_PREFIX,  0,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofString(buffer,  i,  NON_EXECUTE_PREFIX,  0,  NON_EXECUTE_PREFIX.length);	  throwOnEofString(buffer,    pos,    NON_EXECUTE_PREFIX,    0,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	4	None	replace
573	[BUG]  [BUGGY]  throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  limit,  0,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  limit,  0,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  limit,  0,  NON_EXECUTE_PREFIX.length);	  throwOnEofString(buffer,    pos,    NON_EXECUTE_PREFIX,    0,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	4	None	replace
574	[BUG]  [BUGGY]  throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  0,  NON_EXECUTE_PREFIX.length  +  1);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  0,  NON_EXECUTE_PREFIX.length  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  0,  NON_EXECUTE_PREFIX.length  +  1);	  throwOnEofString(buffer,    pos,    NON_EXECUTE_PREFIX,    0,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	4	None	replace
575	[BUG]  [BUGGY]  throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  limit,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  limit,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  limit,  NON_EXECUTE_PREFIX.length);	  throwOnEofString(buffer,    pos,    NON_EXECUTE_PREFIX,    0,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	4	None	replace
576	[BUG]  [BUGGY]  throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  0,  NON_EXECUTE_PREFIX.length  -  1);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  0,  NON_EXECUTE_PREFIX.length  -  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  0,  NON_EXECUTE_PREFIX.length  -  1);	  throwOnEofString(buffer,    pos,    NON_EXECUTE_PREFIX,    0,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	4	None	replace
577	[BUG]  [BUGGY]  throwOnEofString(buffer,  pos,  limit,  0,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofString(buffer,  pos,  limit,  0,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofString(buffer,  pos,  limit,  0,  NON_EXECUTE_PREFIX.length);	  throwOnEofString(buffer,    pos,    NON_EXECUTE_PREFIX,    0,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	4	None	replace
578	[BUG]  [BUGGY]  throwOnEof(pos,  i,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  i,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  i,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(pos,    NON_EXECUTE_PREFIX.length,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	39	None	replace
579	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length,  buffer[i]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length,  buffer[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX.length,  buffer[i]);	  throwOnEof(pos,    NON_EXECUTE_PREFIX.length,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	39	None	replace
580	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    buffer[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	126	None	replace
581	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  buffer[pos],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  buffer[pos],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  buffer[pos],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    buffer[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	126	None	replace
582	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  limit[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  limit[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  limit[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    buffer[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	126	None	replace
583	[BUG]  [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    buffer[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	126	None	replace
584	[BUG]  [BUGGY]  throwOnEof(JSError.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSError.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSError.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    buffer[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	126	None	replace
585	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX.length);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	133	None	replace
586	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  pos  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  pos  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  pos  +  1,  NON_EXECUTE_PREFIX.length);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	133	None	replace
587	[BUG]  [BUGGY]  Throwables.throwOnEofReadException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEofReadException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEofReadException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	133	None	replace
588	[BUG]  [BUGGY]  Throwables.throwOnEofReadException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEofReadException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEofReadException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX.length);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	133	None	replace
589	[BUG]  [BUGGY]  dumpBuffer(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	133	None	replace
590	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length,  limit);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length,  limit);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	133	None	replace
591	[BUG]  [BUGGY]  throwOnEof(i,  pos,  limit[i]]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  limit[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  limit[i]]);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    limit[i]]);    	non-compiled	[CE]  	148	None	replace
592	[BUG]  [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX,  limit[i]]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX,  limit[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  NON_EXECUTE_PREFIX,  limit[i]]);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    limit[i]]);    	non-compiled	[CE]  	148	None	replace
593	[BUG]  [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	156	None	replace
594	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	156	None	replace
595	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  limit,  NON_EXECUTE_PREFIX.length  -  1);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  limit,  NON_EXECUTE_PREFIX.length  -  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX,  limit,  NON_EXECUTE_PREFIX.length  -  1);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	156	None	replace
596	[BUG]  [BUGGY]  throwOnEof(buffer[pos],  i,  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer[pos],  i,  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer[pos],  i,  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	71	None	replace
597	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]  +  1]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]  +  1]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]  +  1]);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	71	None	replace
598	[BUG]  [BUGGY]  throwOnEof(buffer[pos],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer[pos],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer[pos],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	71	None	replace
599	[BUG]  [BUGGY]  throwOnEof(JSError.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSError.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSError.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSError.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	21	None	replace
600	[BUG]  [BUGGY]  throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));	  throwOnEof(JSError.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	21	None	replace
601	[BUG]  [BUGGY]  throwOnEof(JSError.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSError.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSError.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSError.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	21	None	replace
602	[BUG]  [BUGGY]  throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));	  throwOnEof(JSError.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	21	None	replace
603	[BUG]  [BUGGY]  throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));	  throwOnEof(JSError.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	21	None	replace
604	[BUG]  [BUGGY]  throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  negative));  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  negative));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  negative));	  throwOnEof(JSError.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	21	None	replace
605	[BUG]  [BUGGY]  throwOnEof(JSError.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSError.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSError.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSError.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	21	None	replace
606	[BUG]  [BUGGY]  dumpBuffer(buffer,  i);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  i);	  dumpBuffer(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	32	None	replace
607	[BUG]  [BUGGY]  dumpBuffer(pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(pos,  NON_EXECUTE_PREFIX);	  dumpBuffer(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	32	None	replace
608	[BUG]  [BUGGY]  dumpBuffer(i,  limit);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(i,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(i,  limit);	  dumpBuffer(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	32	None	replace
609	[BUG]  [BUGGY]  dumpBuffer(i,  buffer[pos  +  i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(i,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(i,  buffer[pos  +  i]);	  dumpBuffer(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	32	None	replace
610	[BUG]  [BUGGY]  dumpBuffer(buffer,  pos);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  pos);	  dumpBuffer(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	32	None	replace
611	[BUG]  [BUGGY]  dumpString(buffer,  i);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpString(buffer,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpString(buffer,  i);	  dumpBuffer(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	32	None	replace
612	[BUG]  [BUGGY]  throwOnEof(buffer[pos],  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer[pos],  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer[pos],  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	124	None	replace
613	[BUG]  [BUGGY]  throwOnEof(buffer[i],  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer[i],  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer[i],  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	124	None	replace
614	[BUG]  [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	124	None	replace
615	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	124	None	replace
616	[BUG]  [BUGGY]  bucket[pos  +  i]  =  buffer[pos  +  NON_EXECUTE_PREFIX[i];  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  =  buffer[pos  +  NON_EXECUTE_PREFIX[i];  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  =  buffer[pos  +  NON_EXECUTE_PREFIX[i];	  if(lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    return;    }    	non-compiled	[CE]  	151	None	replace
617	[BUG]  [BUGGY]  throwOnEof  Reader(pos,  limit,  NON_EXECUTE_PREFIX);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(pos,  limit,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(pos,  limit,  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(i,    limit,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	9	None	replace
618	[BUG]  [BUGGY]  throwOnEofRead(buffer,  pos,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofRead(buffer,  pos,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofRead(buffer,  pos,  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	100	None	replace
619	[BUG]  [BUGGY]  dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	40	None	replace
620	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[pos]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[pos]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[pos]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	40	None	replace
621	[BUG]  [BUGGY]  throwOnEof(i,  buffer[i],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[i],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[i],  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	40	None	replace
622	[BUG]  [BUGGY]  dump(buffer,  i,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer,  i,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer,  i,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	40	None	replace
623	[BUG]  [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  limit,  NON_EXECUTE_PREFIX[i]));	  Throwables.throwOnEof(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	22	None	replace
624	[BUG]  [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));	  Throwables.throwOnEof(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	22	None	replace
625	[BUG]  [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));	  Throwables.throwOnEof(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	22	None	replace
626	[BUG]  [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));	  Throwables.throwOnEof(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	22	None	replace
627	[BUG]  [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));	  Throwables.throwOnEof(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	22	None	replace
628	[BUG]  [BUGGY]  Throwables.throwOnEof(JSError.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JSError.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JSError.make(buffer,  i,  NON_EXECUTE_PREFIX[i]));	  Throwables.throwOnEof(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	22	None	replace
629	[BUG]  [BUGGY]  throwOnEof  =  JsonNull.createParser(i,  NON_EXECUTE_PREFIX);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  JsonNull.createParser(i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  JsonNull.createParser(i,  NON_EXECUTE_PREFIX);	  throwOnEof    =    JsonNull.createJsonNull();    	non-compiled	[CE]  	123	None	replace
630	[BUG]  [BUGGY]  throwOnEof  =  JsonNull.createParser(i);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  JsonNull.createParser(i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  JsonNull.createParser(i);	  throwOnEof    =    JsonNull.createJsonNull();    	non-compiled	[CE]  	123	None	replace
631	[BUG]  [BUGGY]  throwOnEof  =  JsonNull.createNonExecutePrefix();  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  JsonNull.createNonExecutePrefix();  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  JsonNull.createNonExecutePrefix();	  throwOnEof    =    JsonNull.createJsonNull();    	non-compiled	[CE]  	123	None	replace
632	[BUG]  [BUGGY]  throwOnEof  =  JsonNull.createJSSpace();  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  JsonNull.createJSSpace();  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  JsonNull.createJSSpace();	  throwOnEof    =    JsonNull.createJsonNull();    	non-compiled	[CE]  	123	None	replace
633	[BUG]  [BUGGY]  throwOnEof  =  JsonNull.createParser(i,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  JsonNull.createParser(i,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  JsonNull.createParser(i,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    =    JsonNull.createJsonNull();    	non-compiled	[CE]  	123	None	replace
634	[BUG]  [BUGGY]  throwOnEof  =  JsonNull.createNonWhitespace(i);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  JsonNull.createNonWhitespace(i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  JsonNull.createNonWhitespace(i);	  throwOnEof    =    JsonNull.createJsonNull();    	non-compiled	[CE]  	123	None	replace
635	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  ']');  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  ']');  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  ']');	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX,   "   ");    	non-compiled	[CE]  	120	None	replace
636	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  pos,   "   ");  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  pos,   "   ");  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  pos,   "   ");	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX,   "   ");    	non-compiled	[CE]  	120	None	replace
637	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  '/');  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  '/');  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  '/');	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX,   "   ");    	non-compiled	[CE]  	120	None	replace
638	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  'n');  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  'n');  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  'n');	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX,   "   ");    	non-compiled	[CE]  	120	None	replace
639	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  0);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  0);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  0);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX,   "   ");    	non-compiled	[CE]  	120	None	replace
640	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  -1);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  -1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  -1);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX,   "   ");    	non-compiled	[CE]  	120	None	replace
641	[BUG]  [BUGGY]  throwOnEofString(buffer,  i,  pos,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofString(buffer,  i,  pos,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofString(buffer,  i,  pos,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    String(buffer,    i,    pos,    limit);    	non-compiled	[CE]  	60	None	replace
642	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  pos,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  pos,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  pos,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    String(buffer,    i,    pos,    limit);    	non-compiled	[CE]  	60	None	replace
643	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  pos,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  pos,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  pos,  NON_EXECUTE_PREFIX.length);	  throwOnEof    String(buffer,    i,    pos,    limit);    	non-compiled	[CE]  	60	None	replace
644	[BUG]  [BUGGY]  throwOnEof(null,  i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(null,  i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(null,  i,  NON_EXECUTE_PREFIX);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	15	None	replace
645	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  i,  limit,  NON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  i,  limit,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  i,  limit,  NON_EXECUTE_PREFIX);	  throwOnEof    String(buffer,    pos,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	155	None	replace
646	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  i,  NON_EXECUTE_PREFIX,  limit  +  1);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  i,  NON_EXECUTE_PREFIX,  limit  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  i,  NON_EXECUTE_PREFIX,  limit  +  1);	  throwOnEof    String(buffer,    pos,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	155	None	replace
647	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  i,  NON_EXECUTE_PREFIX,  limit  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  i,  NON_EXECUTE_PREFIX,  limit  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  i,  NON_EXECUTE_PREFIX,  limit  +  1,  NON_EXECUTE_PREFIX.length);	  throwOnEof    String(buffer,    pos,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	155	None	replace
648	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  i,  NON_EXECUTE_PREFIX,  value);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  i,  NON_EXECUTE_PREFIX,  value);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  i,  NON_EXECUTE_PREFIX,  value);	  throwOnEof    String(buffer,    pos,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	155	None	replace
649	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX.length,    limit);    	non-compiled	[CE]  	115	None	replace
650	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  limit,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  limit,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  limit,  NON_EXECUTE_PREFIX.length);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX.length,    limit);    	non-compiled	[CE]  	115	None	replace
651	[BUG]  [BUGGY]  throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX.length,  i);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX.length,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX.length,  i);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX.length,    limit);    	non-compiled	[CE]  	115	None	replace
652	[BUG]  [BUGGY]  throwOnEof  Reader(i,  buffer,  pos,  limit);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  buffer,  pos,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  buffer,  pos,  limit);	  throwOnEof    Reader(i,    buffer,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	7	None	replace
653	[BUG]  [BUGGY]  throwOnEof  Reader(i,  buffer,  pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  buffer,  pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  buffer,  pos,  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(i,    buffer,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	7	None	replace
654	[BUG]  [BUGGY]  throwOnEof  Reader(pos,  buffer,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(pos,  buffer,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(pos,  buffer,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(i,    buffer,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	7	None	replace
655	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  i  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  i  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  i  +  1,  NON_EXECUTE_PREFIX.length);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX,    limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	154	None	replace
656	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  pos  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  pos  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  pos  +  1,  NON_EXECUTE_PREFIX.length);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX,    limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	154	None	replace
657	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  limit,  NON_EXECUTE_PREFIX);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  limit,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  limit,  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	6	None	replace
658	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  pos,  limit);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  pos,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  pos,  limit);	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	6	None	replace
659	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  pos,  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	6	None	replace
660	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX,  limit  +  1);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX,  limit  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX,  limit  +  1);	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	6	None	replace
661	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    Reader(buffer,    i,    limit);    	non-compiled	[CE]  	110	None	replace
662	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  limit,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  limit,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  limit,  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	28	None	replace
663	[BUG]  [BUGGY]  dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  i,  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	28	None	replace
664	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[pos]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[pos]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[pos]));	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	28	None	replace
665	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[i],  limit));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[i],  limit));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[i],  limit));	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	28	None	replace
666	[BUG]  [BUGGY]  throwOnEof(i,  pos,  buffer,  limit);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  buffer,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  buffer,  limit);	  throwOnEof(i,    pos,    limit);    	non-compiled	[CE]  	48	None	replace
667	[BUG]  [BUGGY]  if(!lenient)  {  throwOnEof(i,  limit);  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(!lenient)  {  throwOnEof(i,  limit);  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(!lenient)  {  throwOnEof(i,  limit);  }	  throwOnEof(i,    limit);    	non-compiled	[CE]  	33	None	replace
668	[BUG]  [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  i,  limit,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  i,  limit,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JsonSyntaxException.make(buffer,  i,  limit,  NON_EXECUTE_PREFIX[i]));	  Throwables.throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	24	None	replace
669	[BUG]  [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos]));  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos]));	  Throwables.throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	24	None	replace
670	[BUG]  [BUGGY]  Throwables.throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[i]));	  Throwables.throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	24	None	replace
671	[BUG]  [BUGGY]  Throwables.throwOnEof(JSException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JSException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JSException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i]));	  Throwables.throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	24	None	replace
672	[BUG]  [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i],  limit));  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i],  limit));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i],  limit));	  Throwables.throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	24	None	replace
673	[BUG]  [BUGGY]  allowNonWhitespace(i,  limit);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(i,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(i,  limit);	  allowNonWhitespace(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	160	None	replace
674	[BUG]  [BUGGY]  allowNonWhitespace(pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(pos,  NON_EXECUTE_PREFIX);	  allowNonWhitespace(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	160	None	replace
675	[BUG]  [BUGGY]  allowNonWhitespace(i,  buffer[pos  +  i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(i,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(i,  buffer[pos  +  i]);	  allowNonWhitespace(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	160	None	replace
676	[BUG]  [BUGGY]  enableNonWhitespace(i,  limit);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  enableNonWhitespace(i,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	enableNonWhitespace(i,  limit);	  allowNonWhitespace(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	160	None	replace
677	[BUG]  [BUGGY]  allowNonWhitespace(i,  pos);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(i,  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(i,  pos);	  allowNonWhitespace(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	160	None	replace
678	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));	  throwOnEof(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	18	None	replace
679	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  limit));	  throwOnEof(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	18	None	replace
680	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	18	None	replace
681	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    i[pos],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	31	None	replace
682	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos[pos],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos[pos],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos[pos],  NON_EXECUTE_PREFIX[i]);	  throwOnEof    Reader(buffer,    i[pos],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	31	None	replace
683	[BUG]  [BUGGY]  consumePrefix(pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumePrefix(pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumePrefix(pos,  NON_EXECUTE_PREFIX);	  consumePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	161	None	replace
684	[BUG]  [BUGGY]  consumePrefix(i,  limit);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumePrefix(i,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumePrefix(i,  limit);	  consumePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	161	None	replace
685	[BUG]  [BUGGY]  append(buffer,  i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  append(buffer,  i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	append(buffer,  i,  NON_EXECUTE_PREFIX);	  consumePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	161	None	replace
686	[BUG]  [BUGGY]  consumePrefix(i,  pos);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumePrefix(i,  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumePrefix(i,  pos);	  consumePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	161	None	replace
687	[BUG]  [BUGGY]  consumePrefix(i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumePrefix(i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumePrefix(i,  NON_EXECUTE_PREFIX.length);	  consumePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	161	None	replace
688	[BUG]  [BUGGY]  consumePrefix(i,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumePrefix(i,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumePrefix(i,  NON_EXECUTE_PREFIX[i]);	  consumePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	161	None	replace
689	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i  +  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i  +  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i  +  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    Reader(buffer,    i);    	non-compiled	[CE]  	44	None	replace
690	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length);	  throwOnEof    Reader(buffer,    i);    	non-compiled	[CE]  	44	None	replace
691	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i  +  1);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i  +  1);	  throwOnEof    Reader(buffer,    i);    	non-compiled	[CE]  	44	None	replace
692	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  buffer,  NON_EXECUTE_PREFIX);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  buffer,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  buffer,  NON_EXECUTE_PREFIX);	  throwOnEof    String(buffer,    i,    limit,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	62	None	replace
693	[BUG]  [BUGGY]  consumeNonExecutePrefix(i,  buffer);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumeNonExecutePrefix(i,  buffer);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumeNonExecutePrefix(i,  buffer);	  consumeNonExecutePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	121	None	replace
694	[BUG]  [BUGGY]  consumeNonExecutePrefix(i,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumeNonExecutePrefix(i,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumeNonExecutePrefix(i,  NON_EXECUTE_PREFIX,  limit);	  consumeNonExecutePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	121	None	replace
695	[BUG]  [BUGGY]  consumeNonExecutePrefix(i,  pos);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumeNonExecutePrefix(i,  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumeNonExecutePrefix(i,  pos);	  consumeNonExecutePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	121	None	replace
696	[BUG]  [BUGGY]  consumeNonExecute(i,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumeNonExecute(i,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumeNonExecute(i,  NON_EXECUTE_PREFIX,  limit);	  consumeNonExecutePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	121	None	replace
697	[BUG]  [BUGGY]  consumePath(i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumePath(i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumePath(i,  NON_EXECUTE_PREFIX);	  consumeNonExecutePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	121	None	replace
698	[BUG]  [BUGGY]  consumeNonExecutePrefix(i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumeNonExecutePrefix(i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumeNonExecutePrefix(i,  NON_EXECUTE_PREFIX.length);	  consumeNonExecutePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	121	None	replace
699	[BUG]  [BUGGY]  consumeNonExecutePrefix(i,  buffer[pos  +  i]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumeNonExecutePrefix(i,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumeNonExecutePrefix(i,  buffer[pos  +  i]);	  consumeNonExecutePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	121	None	replace
700	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i],  limit));  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i],  limit));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i],  limit));	  throwOnEof    Reader(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	25	None	replace
701	[BUG]  [BUGGY]  throwOnEof  Reader(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]  -  1));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]  -  1));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]  -  1));	  throwOnEof    Reader(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	25	None	replace
702	[BUG]  [BUGGY]  dumpPath(buffer,  i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpPath(buffer,  i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpPath(buffer,  i,  NON_EXECUTE_PREFIX.length);	  dumpBuffer(i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	83	None	replace
703	[BUG]  [BUGGY]  dumpChars(i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpChars(i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpChars(i,  NON_EXECUTE_PREFIX.length);	  dumpBuffer(i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	83	None	replace
704	[BUG]  [BUGGY]  dumpField(i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpField(i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpField(i,  NON_EXECUTE_PREFIX.length);	  dumpBuffer(i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	83	None	replace
705	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos]));    	non-compiled	[CE]  	20	None	replace
706	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  buffer[pos]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  buffer[pos]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  buffer[pos]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos]));    	non-compiled	[CE]  	20	None	replace
707	[BUG]  [BUGGY]  Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));	  Throwable    m    =    JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	131	None	replace
708	[BUG]  [BUGGY]  Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));	  Throwable    m    =    JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	131	None	replace
709	[BUG]  [BUGGY]  throwOnEof  Reader(i,  NON_EXECUTE_PREFIX,  buffer);  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  NON_EXECUTE_PREFIX,  buffer);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  NON_EXECUTE_PREFIX,  buffer);	  throwOnEof    Reader(i,    buffer);    	non-compiled	[CE]  	101	None	replace
710	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  limit  +  2);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  limit  +  2);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  limit  +  2);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX,    limit    +    1);    	non-compiled	[CE]  	2	None	replace
711	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  0,  limit  +  1);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  0,  limit  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  0,  limit  +  1);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX,    limit    +    1);    	non-compiled	[CE]  	2	None	replace
712	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]  -  1));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]  -  1));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]  -  1));	  throwOnEof    Reader(buffer[pos],    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	26	None	replace
713	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i  +  1]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i  +  1]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i  +  1]));	  throwOnEof    Reader(buffer[pos],    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	26	None	replace
714	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	122	None	replace
715	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	122	None	replace
716	[BUG]  [BUGGY]  throwOnEof(buffer,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	122	None	replace
717	[BUG]  [BUGGY]  throwOnEof(i,  pos[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	122	None	replace
718	[BUG]  [BUGGY]  dump(i,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(i,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(i,  NON_EXECUTE_PREFIX,  limit);	  dump(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	36	None	replace
719	[BUG]  [BUGGY]  dump(i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(i,  NON_EXECUTE_PREFIX.length);	  dump(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	36	None	replace
720	[BUG]  [BUGGY]  dump(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);	  dump(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	36	None	replace
721	[BUG]  [BUGGY]  dump(i,  NON_EXECUTE_PREFIX[pos  +  i]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(i,  NON_EXECUTE_PREFIX[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(i,  NON_EXECUTE_PREFIX[pos  +  i]);	  dump(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	36	None	replace
722	[BUG]  [BUGGY]  dump(i,  NON_EXECUTE_PREFIX  +  1);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(i,  NON_EXECUTE_PREFIX  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(i,  NON_EXECUTE_PREFIX  +  1);	  dump(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	36	None	replace
723	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length,  limit);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX.length,  limit);	  throwOnEof(i,    limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	80	None	replace
724	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX.length);	  throwOnEof    String(buffer,    i,    pos,    limit);    	non-compiled	[CE]  	60	None	replace
725	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  i,  NON_EXECUTE_PREFIX.length);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	157	None	replace
726	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length  -  1);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length  -  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length  -  1);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	157	None	replace
727	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	98	None	replace
728	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  0,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  0,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  0,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	98	None	replace
729	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i]    	non-compiled	[CE]  	108	None	replace
730	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i]    	non-compiled	[CE]  	108	None	replace
731	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i]    	non-compiled	[CE]  	108	None	replace
732	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos  -  1],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos  -  1],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos  -  1],  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	97	None	replace
733	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos  -  1]  -  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos  -  1]  -  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos  -  1]  -  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	97	None	replace
734	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length  -  1,  buffer[pos]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length  -  1,  buffer[pos]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX.length  -  1,  buffer[pos]);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	97	None	replace
735	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  limit[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  limit[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX,  limit[i]);	  throwOnEof(i,    limit,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	38	None	replace
736	[BUG]  [BUGGY]  throwOnEof  Reader(i,  pos,  buffer,  NON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  pos,  buffer,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  pos,  buffer,  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(i,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	8	None	replace
737	[BUG]  [BUGGY]  throwOnEof  Reader(i,  pos,  buffer);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  pos,  buffer);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  pos,  buffer);	  throwOnEof    Reader(i,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	8	None	replace
738	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  ' "  +  i);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  ' "  +  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  ' "  +  i);	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX.length:   "    +    i);    	non-compiled	[CE]  	64	None	replace
739	[BUG]  [BUGGY]  throwOnEof(null,  i,  buffer[pos]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(null,  i,  buffer[pos]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(null,  i,  buffer[pos]);	  throwOnEof(null,    NON_EXECUTE_PREFIX.length,    buffer[pos]);    	non-compiled	[CE]  	145	None	replace
740	[BUG]  [BUGGY]  throwOnEof(buffer,  NON_EXECUTE_PREFIX.length,  buffer[pos]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  NON_EXECUTE_PREFIX.length,  buffer[pos]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  NON_EXECUTE_PREFIX.length,  buffer[pos]);	  throwOnEof(null,    NON_EXECUTE_PREFIX.length,    buffer[pos]);    	non-compiled	[CE]  	145	None	replace
741	[BUG]  [BUGGY]  throwOnEof(null,  buffer[pos],  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(null,  buffer[pos],  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(null,  buffer[pos],  NON_EXECUTE_PREFIX.length);	  throwOnEof(null,    NON_EXECUTE_PREFIX.length,    buffer[pos]);    	non-compiled	[CE]  	145	None	replace
742	[BUG]  [BUGGY]  throwOnEof(false,  NON_EXECUTE_PREFIX.length,  buffer[pos]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(false,  NON_EXECUTE_PREFIX.length,  buffer[pos]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(false,  NON_EXECUTE_PREFIX.length,  buffer[pos]);	  throwOnEof(null,    NON_EXECUTE_PREFIX.length,    buffer[pos]);    	non-compiled	[CE]  	145	None	replace
743	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	54	None	replace
744	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	54	None	replace
745	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	54	None	replace
746	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  i,  buffer,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  i,  buffer,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  i,  buffer,  NON_EXECUTE_PREFIX,  limit);	  throwOnEof    String(buffer,    pos,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	155	None	replace
747	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  0,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  0,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  0,  NON_EXECUTE_PREFIX,  limit);	  throwOnEof    String(buffer,    pos,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	155	None	replace
748	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer);	  throwOnEof(i,    buffer,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	17	None	replace
749	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]  -  1));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]  -  1));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]  -  1));	  throwOnEof    Reader(buffer,    pos    +    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	139	None	replace
750	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]),  lenient);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]),  lenient);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos  +  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]),  lenient);	  throwOnEof    Reader(buffer,    pos    +    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	139	None	replace
751	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos  +  PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos  +  PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos  +  PREFIX[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    pos    +    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	139	None	replace
752	[BUG]  [BUGGY]  safeNonWhitespace(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  safeNonWhitespace(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	safeNonWhitespace(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	57	None	replace
753	[BUG]  [BUGGY]  safeNonWhitespace(buffer[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  safeNonWhitespace(buffer[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	safeNonWhitespace(buffer[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	57	None	replace
754	[BUG]  [BUGGY]  allowNonWhitespace(buffer[pos  +  i]),  allowNonWhitespace(NON_EXECUTE_PREFIX[i]))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(buffer[pos  +  i]),  allowNonWhitespace(NON_EXECUTE_PREFIX[i]))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(buffer[pos  +  i]),  allowNonWhitespace(NON_EXECUTE_PREFIX[i]))  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	57	None	replace
755	[BUG]  [BUGGY]  bucket(buffer[pos  +  i]  >>  NON_EXECUTE_PREFIX[i]))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket(buffer[pos  +  i]  >>  NON_EXECUTE_PREFIX[i]))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket(buffer[pos  +  i]  >>  NON_EXECUTE_PREFIX[i]))  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	57	None	replace
756	[BUG]  [BUGGY]  bucket(buffer[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket(buffer[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket(buffer[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	57	None	replace
757	[BUG]  [BUGGY]  throwOnEof(i,  BAD_ON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  BAD_ON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  BAD_ON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    BAD_ON_EXECUTE_PREFIX);    	non-compiled	[CE]  	162	None	replace
758	[BUG]  [BUGGY]  throwOnEof(i,  BAD_ON_EXECUTE_PREFIX.length);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  BAD_ON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  BAD_ON_EXECUTE_PREFIX.length);	  throwOnEof(i,    BAD_ON_EXECUTE_PREFIX);    	non-compiled	[CE]  	162	None	replace
759	[BUG]  [BUGGY]  throwOnEof(i,  BAD_ON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  BAD_ON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  BAD_ON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX);	  throwOnEof(i,    BAD_ON_EXECUTE_PREFIX);    	non-compiled	[CE]  	162	None	replace
760	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i]]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i]]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	70	None	replace
761	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[0]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[0]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[0]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	70	None	replace
762	[BUG]  [BUGGY]  consumePrefix(buffer,  i,  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumePrefix(buffer,  i,  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumePrefix(buffer,  i,  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	70	None	replace
763	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	53	None	replace
764	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	18	None	replace
765	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos]),  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos]),  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos]),  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    limit,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	19	None	replace
766	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i],  limit));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i],  limit));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i],  limit));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    limit,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	19	None	replace
767	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i],  negative));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i],  negative));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[i],  negative));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    limit,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	19	None	replace
768	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  limit,  NON_EXECUTE_PREFIX,  buffer.length);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  limit,  NON_EXECUTE_PREFIX,  buffer.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  limit,  NON_EXECUTE_PREFIX,  buffer.length);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    buffer.length);    	non-compiled	[CE]  	94	None	replace
769	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  buffer,  pos);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  buffer,  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  buffer,  pos);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    buffer.length);    	non-compiled	[CE]  	94	None	replace
770	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  buffer.length,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  buffer.length,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  buffer.length,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX.length,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	41	None	replace
771	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[pos],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[pos],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[pos],  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX.length,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	41	None	replace
772	[BUG]  [BUGGY]  throwOnEof  Reader(i,  pos,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  pos,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  pos,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    Reader(i,    pos,    limit);    	non-compiled	[CE]  	5	None	replace
773	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos[pos  +  i]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos[pos  +  i]);	  throwOnEof    Reader(i,    buffer[pos    +    i]);    	non-compiled	[CE]  	46	None	replace
774	[BUG]  [BUGGY]  throwOnEof  Reader(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(i,    buffer[pos    +    i]);    	non-compiled	[CE]  	46	None	replace
775	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i]));	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	28	None	replace
776	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  buffer[i]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  buffer[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  buffer[i]));	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	28	None	replace
777	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  0,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  0,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  0,  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	28	None	replace
778	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  limit,  NON_EXECUTE_PREFIX,  buffer[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  limit,  NON_EXECUTE_PREFIX,  buffer[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  limit,  NON_EXECUTE_PREFIX,  buffer[i]);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    buffer[i]);    	non-compiled	[CE]  	93	None	replace
779	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  buffer[pos]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  buffer[pos]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  buffer[pos]);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    buffer[i]);    	non-compiled	[CE]  	93	None	replace
780	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  buffer[i],  NON_EXECUTE_PREFIX);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  buffer[i],  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  buffer[i],  NON_EXECUTE_PREFIX);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    buffer[i]);    	non-compiled	[CE]  	93	None	replace
781	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer.length);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer.length);	  throwOnEof(i,    buffer,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	88	None	replace
782	[BUG]  [BUGGY]  throwOnEof(i,  buffer,  pos.length);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer,  pos.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer,  pos.length);	  throwOnEof(i,    buffer,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	88	None	replace
783	[BUG]  [BUGGY]  throwOnEof(i,  pos,  buffer,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  buffer,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  buffer,  NON_EXECUTE_PREFIX,  limit);	  throwOnEof(i,    buffer,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	104	None	replace
784	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer,  i);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer,  i);	  throwOnEof(i,    buffer,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	104	None	replace
785	[BUG]  [BUGGY]  throwOnEof(i,  pos,  buffer,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  buffer,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  buffer,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	51	None	replace
786	[BUG]  [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX.length  -  1);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX.length  -  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  NON_EXECUTE_PREFIX.length  -  1);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	51	None	replace
787	[BUG]  [BUGGY]  throwOnEof(i,  pos,  buffer.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  buffer.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  buffer.length);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	51	None	replace
788	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  continue;  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  continue;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  continue;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    continue;    }    	non-compiled	[CE]  	159	None	replace
789	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {  continue;  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {  continue;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {  continue;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    continue;    }    	non-compiled	[CE]  	159	None	replace
790	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  limit  ==  NON_EXECUTE_PREFIX[i])  {  continue;  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  limit  ==  NON_EXECUTE_PREFIX[i])  {  continue;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  limit  ==  NON_EXECUTE_PREFIX[i])  {  continue;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    continue;    }    	non-compiled	[CE]  	159	None	replace
791	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  limit  >  NON_EXECUTE_PREFIX[i])  {  continue;  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  limit  >  NON_EXECUTE_PREFIX[i])  {  continue;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  limit  >  NON_EXECUTE_PREFIX[i])  {  continue;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    continue;    }    	non-compiled	[CE]  	159	None	replace
792	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos]],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos]],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos]],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(pos,    i,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	147	None	replace
793	[BUG]  [BUGGY]  throwOnEof  =  JsonNull.createJsonNull(i);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  JsonNull.createJsonNull(i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  JsonNull.createJsonNull(i);	  throwOnEof    =    JsonNull.createJsonNull();    	non-compiled	[CE]  	123	None	replace
794	[BUG]  [BUGGY]  throwOnEof  =  JsonNull.createJsonNull(buffer,  i);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  JsonNull.createJsonNull(buffer,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  JsonNull.createJsonNull(buffer,  i);	  throwOnEof    =    JsonNull.createJsonNull();    	non-compiled	[CE]  	123	None	replace
795	[BUG]  [BUGGY]  throwOnEof  =  JsonNull.createJSObject();  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  JsonNull.createJSObject();  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  JsonNull.createJSObject();	  throwOnEof    =    JsonNull.createJsonNull();    	non-compiled	[CE]  	123	None	replace
796	[BUG]  [BUGGY]  throwOnEof  =  JsonNull.createJsonLong();  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  JsonNull.createJsonLong();  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  JsonNull.createJsonLong();	  throwOnEof    =    JsonNull.createJsonNull();    	non-compiled	[CE]  	123	None	replace
797	[BUG]  [BUGGY]  throwOnEof  =  JsonNull.createJsonNull(0);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  JsonNull.createJsonNull(0);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  JsonNull.createJsonNull(0);	  throwOnEof    =    JsonNull.createJsonNull();    	non-compiled	[CE]  	123	None	replace
798	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX[0]);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX[0]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX[0]);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	134	None	replace
799	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	134	None	replace
800	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX[pos],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX[pos],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX[pos],  NON_EXECUTE_PREFIX[i]);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	134	None	replace
801	[BUG]  [BUGGY]  consumeOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumeOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumeOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	134	None	replace
802	[BUG]  [BUGGY]  dump(buffer,  pos,  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer,  pos,  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer,  pos,  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	67	None	replace
803	[BUG]  [BUGGY]  throwOnEof(i,  pos,  buffer[pos]]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  buffer[pos]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  buffer[pos]]);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	67	None	replace
804	[BUG]  [BUGGY]  throwOnEof(i,  pos,  buffer[pos  +  i]]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  buffer[pos  +  i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  buffer[pos  +  i]]);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	67	None	replace
805	[BUG]  [BUGGY]  throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSError.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSError.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	21	None	replace
806	[BUG]  [BUGGY]  throwOnEof(JSError.make(buffer,  0,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSError.make(buffer,  0,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSError.make(buffer,  0,  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSError.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	21	None	replace
807	[BUG]  [BUGGY]  dump(JsonSyntaxException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(JsonSyntaxException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(JsonSyntaxException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));	  dump(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	132	None	replace
808	[BUG]  [BUGGY]  dump(JsonSyntaxException.make(buffer,  0,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(JsonSyntaxException.make(buffer,  0,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(JsonSyntaxException.make(buffer,  0,  NON_EXECUTE_PREFIX[i]));	  dump(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	132	None	replace
809	[BUG]  [BUGGY]  throwOnEof(JSException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	23	None	replace
810	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    pos,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	87	None	replace
811	[BUG]  [BUGGY]  throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  value.length);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  value.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  value.length);	  throwOnEofString(buffer,    pos,    NON_EXECUTE_PREFIX,    value);    	non-compiled	[CE]  	3	None	replace
812	[BUG]  [BUGGY]  throwOnEofString(buffer,  pos,  i,  value);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofString(buffer,  pos,  i,  value);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofString(buffer,  pos,  i,  value);	  throwOnEofString(buffer,    pos,    NON_EXECUTE_PREFIX,    value);    	non-compiled	[CE]  	3	None	replace
813	[BUG]  [BUGGY]  throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  value[i]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  value[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofString(buffer,  pos,  NON_EXECUTE_PREFIX,  value[i]);	  throwOnEofString(buffer,    pos,    NON_EXECUTE_PREFIX,    value);    	non-compiled	[CE]  	3	None	replace
814	[BUG]  [BUGGY]  dumpBuffer(buffer[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(i,    buffer[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	27	None	replace
815	[BUG]  [BUGGY]  throwOnEofRead(buffer[pos],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofRead(buffer[pos],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofRead(buffer[pos],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(i,    buffer[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	27	None	replace
816	[BUG]  [BUGGY]  foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }	  if(lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	149	None	replace
817	[BUG]  [BUGGY]  found(buffer,  pos  +  i],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  found(buffer,  pos  +  i],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	found(buffer,  pos  +  i],  NON_EXECUTE_PREFIX[i]);	  if(lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	149	None	replace
818	[BUG]  [BUGGY]  allowNonExecute(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonExecute(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonExecute(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }	  if(lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	149	None	replace
819	[BUG]  [BUGGY]  foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  }	  if(lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	149	None	replace
820	[BUG]  [BUGGY]  foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];	  if(lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	149	None	replace
821	[BUG]  [BUGGY]  dump(buffer,  i,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer,  i,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer,  i,  NON_EXECUTE_PREFIX,  limit);	  dump(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	140	None	replace
822	[BUG]  [BUGGY]  dump(buffer,  0,  NON_EXECUTE_PREFIX);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer,  0,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer,  0,  NON_EXECUTE_PREFIX);	  dump(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	140	None	replace
823	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos  +  i],  NON_EXECUTE_PREFIX[0]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos  +  i],  NON_EXECUTE_PREFIX[0]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos  +  i],  NON_EXECUTE_PREFIX[0]));	  throwOnEof    Reader(buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	30	None	replace
824	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]),  lenient);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]),  lenient);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]),  lenient);	  throwOnEof    Reader(buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	30	None	replace
825	[BUG]  [BUGGY]  throwOnEof(i,  0,  NON_EXECUTE_PREFIX.length  -  1);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  0,  NON_EXECUTE_PREFIX.length  -  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  0,  NON_EXECUTE_PREFIX.length  -  1);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	89	None	replace
826	[BUG]  [BUGGY]  throwOnEof(i,  0,  buffer.length);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  0,  buffer.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  0,  buffer.length);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	89	None	replace
827	[BUG]  [BUGGY]  throwOnEof(i,  0,  NON_EXECUTE_PREFIX.length  +  1);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  0,  NON_EXECUTE_PREFIX.length  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  0,  NON_EXECUTE_PREFIX.length  +  1);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	89	None	replace
828	[BUG]  [BUGGY]  throwOnEof(i,  0,  limit  +  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  0,  limit  +  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  0,  limit  +  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	89	None	replace
829	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX  +  1);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX  +  1);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	15	None	replace
830	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos);	  throwOnEof    Reader(i,    pos);    	non-compiled	[CE]  	103	None	replace
831	[BUG]  [BUGGY]  throwOnEofRead(buffer,  i);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofRead(buffer,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofRead(buffer,  i);	  throwOnEof    Reader(i,    pos);    	non-compiled	[CE]  	103	None	replace
832	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	116	None	replace
833	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  pos,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  pos,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  pos,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	116	None	replace
834	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX[0]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX[0]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX[0]);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	116	None	replace
835	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX.length,  limit  +  1);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX.length,  limit  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX.length,  limit  +  1);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX.length,    limit);    	non-compiled	[CE]  	95	None	replace
836	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX.length,  limit  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX.length,  limit  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX.length,  limit  +  1,  NON_EXECUTE_PREFIX.length);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX.length,    limit);    	non-compiled	[CE]  	95	None	replace
837	[BUG]  [BUGGY]  throwOnEof  Reader(i,  NON_EXECUTE_PREFIX,  buffer,  pos);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  NON_EXECUTE_PREFIX,  buffer,  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  NON_EXECUTE_PREFIX,  buffer,  pos);	  throwOnEof    Reader(i,    buffer,    i);    	non-compiled	[CE]  	111	None	replace
838	[BUG]  [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i]));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i]));	  Throwables.throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	24	None	replace
839	[BUG]  [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  i,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  i,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JsonSyntaxException.make(buffer,  i,  buffer[i],  NON_EXECUTE_PREFIX[i]));	  Throwables.throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	24	None	replace
840	[BUG]  [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  0,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  0,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JsonSyntaxException.make(buffer,  0,  NON_EXECUTE_PREFIX[i]));	  Throwables.throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	24	None	replace
841	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  0,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  0,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  0,  buffer[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    buffer[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	126	None	replace
842	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[1]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[1]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[1]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    buffer[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	126	None	replace
843	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  0,  buffer[pos],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  0,  buffer[pos],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  0,  buffer[pos],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    buffer[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	126	None	replace
844	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  buffer[i]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  buffer[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  buffer[i]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	1	None	replace
845	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  buffer.length);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  buffer.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  buffer.length);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	1	None	replace
846	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length,  limit);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length,  limit);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	1	None	replace
847	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX,  value);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX,  value);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX,  value);	  throwOnEof    Reader(buffer,    pos,    limit);    	non-compiled	[CE]  	152	None	replace
848	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX,  null);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX,  null);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX,  null);	  throwOnEof    Reader(buffer,    pos,    limit);    	non-compiled	[CE]  	152	None	replace
849	[BUG]  [BUGGY]  executePrefix(i,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  executePrefix(i,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	executePrefix(i,  NON_EXECUTE_PREFIX,  limit);	  executePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	34	None	replace
850	[BUG]  [BUGGY]  executePrefix(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  executePrefix(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	executePrefix(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);	  executePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	34	None	replace
851	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	124	None	replace
852	[BUG]  [BUGGY]  throwOnEof(i,  pos[i],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos[i],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos[i],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	124	None	replace
853	[BUG]  [BUGGY]  throwOnEof(buffer,  pos[i],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos[i],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos[i],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	124	None	replace
854	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  buffer[pos  +  i]));  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  buffer[pos  +  i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  buffer[pos  +  i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos    +    i]));    	non-compiled	[CE]  	125	None	replace
855	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos    +    i]));    	non-compiled	[CE]  	125	None	replace
856	[BUG]  [BUGGY]  throwOnEof(JSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos    +    i]));    	non-compiled	[CE]  	125	None	replace
857	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i]),  value);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i]),  value);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i]),  value);	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos    +    i]));    	non-compiled	[CE]  	125	None	replace
858	[BUG]  [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSYntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos    +    i]));    	non-compiled	[CE]  	125	None	replace
859	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  return;  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  return;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    return;    }    	non-compiled	[CE]  	106	None	replace
860	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {  return;  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {  return;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    return;    }    	non-compiled	[CE]  	106	None	replace
861	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  limit  ==  NON_EXECUTE_PREFIX[i])  {  return;  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  limit  ==  NON_EXECUTE_PREFIX[i])  {  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  limit  ==  NON_EXECUTE_PREFIX[i])  {  return;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    return;    }    	non-compiled	[CE]  	106	None	replace
862	[BUG]  [BUGGY]  throwOnEofRead(buffer,  i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofRead(buffer,  i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofRead(buffer,  i,  NON_EXECUTE_PREFIX.length);	  throwOnEofRead(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	143	None	replace
863	[BUG]  [BUGGY]  throwOnEofRead(buffer,  i,  0,  NON_EXECUTE_PREFIX);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofRead(buffer,  i,  0,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofRead(buffer,  i,  0,  NON_EXECUTE_PREFIX);	  throwOnEofRead(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	143	None	replace
864	[BUG]  [BUGGY]  throwOnEofRead(buffer,  i,  NON_EXECUTE_PREFIX  +  1);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofRead(buffer,  i,  NON_EXECUTE_PREFIX  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofRead(buffer,  i,  NON_EXECUTE_PREFIX  +  1);	  throwOnEofRead(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	143	None	replace
865	[BUG]  [BUGGY]  dumpBuffer(pos,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(pos,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(pos,  NON_EXECUTE_PREFIX,  limit);	  dumpBuffer(i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	49	None	replace
866	[BUG]  [BUGGY]  dumpBuffer(i,  pos,  limit);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(i,  pos,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(i,  pos,  limit);	  dumpBuffer(i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	49	None	replace
867	[BUG]  [BUGGY]  throwOnEofString(buffer,  0,  NON_EXECUTE_PREFIX,  0,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofString(buffer,  0,  NON_EXECUTE_PREFIX,  0,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofString(buffer,  0,  NON_EXECUTE_PREFIX,  0,  NON_EXECUTE_PREFIX.length);	  throwOnEofString(buffer,    pos,    NON_EXECUTE_PREFIX,    0,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	4	None	replace
868	[BUG]  [BUGGY]  allowNonWhitespace(i,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(i,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(i,  NON_EXECUTE_PREFIX,  limit);	  allowNonWhitespace(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	160	None	replace
869	[BUG]  [BUGGY]  allowNonWhitespace(i,  buffer);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(i,  buffer);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(i,  buffer);	  allowNonWhitespace(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	160	None	replace
870	[BUG]  [BUGGY]  allowNonWhitespace(i,  NON_EXECUTE_PREFIX  +  1);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(i,  NON_EXECUTE_PREFIX  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(i,  NON_EXECUTE_PREFIX  +  1);	  allowNonWhitespace(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	160	None	replace
871	[BUG]  [BUGGY]  allowNonWhitespace(i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(i,  NON_EXECUTE_PREFIX.length);	  allowNonWhitespace(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	160	None	replace
872	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length  -  limit  +  1);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length  -  limit  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX.length  -  limit  +  1);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    limit);    	non-compiled	[CE]  	85	None	replace
873	[BUG]  [BUGGY]  throwOnEof(buffer,  i  -  limit);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i  -  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i  -  limit);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    limit);    	non-compiled	[CE]  	85	None	replace
874	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  n "  +  NON_EXECUTE_PREFIX.length  + "n ");  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  n "  +  NON_EXECUTE_PREFIX.length  + "n ");  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  n "  +  NON_EXECUTE_PREFIX.length  + "n ");	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX.length:   ");    	non-compiled	[CE]  	66	None	replace
875	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  0 ");  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  0 ");  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  0 ");	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX.length:   ");    	non-compiled	[CE]  	66	None	replace
876	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  NON_EXECUTE_PREFIX. ");  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  NON_EXECUTE_PREFIX. ");  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  NON_EXECUTE_PREFIX. ");	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX.length:   ");    	non-compiled	[CE]  	66	None	replace
877	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  NON_EXECUTE_PREFIX.length ");  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  NON_EXECUTE_PREFIX.length ");  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  NON_EXECUTE_PREFIX.length ");	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX.length:   ");    	non-compiled	[CE]  	66	None	replace
878	[BUG]  [BUGGY]  safeNonWhitespace(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  safeNonWhitespace(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	safeNonWhitespace(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	158	None	replace
879	[BUG]  [BUGGY]  safeNonWhitespace(buffer[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  safeNonWhitespace(buffer[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	safeNonWhitespace(buffer[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	158	None	replace
880	[BUG]  [BUGGY]  safeNonWhitespace(buffer[pos  +  i]  }  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  safeNonWhitespace(buffer[pos  +  i]  }  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	safeNonWhitespace(buffer[pos  +  i]  }  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	158	None	replace
881	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	40	None	replace
882	[BUG]  [BUGGY]  throwOnEof(buffer,  0,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  0,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  0,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	40	None	replace
883	[BUG]  [BUGGY]  foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return;  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return;  }	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    return;    }    	non-compiled	[CE]  	79	None	replace
884	[BUG]  [BUGGY]  allowNonWhitespace(true)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(true)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(true)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return;  }	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    return;    }    	non-compiled	[CE]  	79	None	replace
885	[BUG]  [BUGGY]  foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  return;  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  return;  }	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    return;    }    	non-compiled	[CE]  	79	None	replace
886	[BUG]  [BUGGY]  implements  PEEKED_PREFIX(i,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  PEEKED_PREFIX(i,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  PEEKED_PREFIX(i,  NON_EXECUTE_PREFIX,  limit);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	141	None	replace
887	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(buffer,  0,  limit);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(buffer,  0,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(buffer,  0,  limit);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	141	None	replace
888	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX,  0,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX,  0,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX,  0,  NON_EXECUTE_PREFIX.length);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	61	None	replace
889	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length,  limit);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length,  limit);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	61	None	replace
890	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_NAME);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_NAME);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_NAME);	  throwOnEof(pos,    NON_EXECUTE_PREFIX,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	14	None	replace
891	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PARAM);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PARAM);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PARAM);	  throwOnEof(pos,    NON_EXECUTE_PREFIX,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	14	None	replace
892	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos],  0);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos],  0);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos],  0);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	96	None	replace
893	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[0]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[0]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[0]);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	96	None	replace
894	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i  +  1]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i  +  1]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i  +  1]);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	96	None	replace
895	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  buffer,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  buffer,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  buffer,  NON_EXECUTE_PREFIX,  limit);	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	6	None	replace
896	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX,  buffer.length);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX,  buffer.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX,  buffer.length);	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	6	None	replace
897	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX,  buffer[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX,  buffer[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX,  buffer[i]);	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	6	None	replace
898	[BUG]  [BUGGY]  throwOnEof(i,  limit[i],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  limit[i],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  limit[i],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    limit[i]]);    	non-compiled	[CE]  	148	None	replace
899	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  limit[i]]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  limit[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  limit[i]]);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    limit[i]]);    	non-compiled	[CE]  	148	None	replace
900	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[0]),  pos);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[0]),  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  NON_EXECUTE_PREFIX[0]),  pos);	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[0]));    	non-compiled	[CE]  	127	None	replace
901	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	133	None	replace
902	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	133	None	replace
903	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length  -  1);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length  -  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length  -  1);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	133	None	replace
904	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	133	None	replace
905	[BUG]  [BUGGY]  ack[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  ack[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	ack[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throwOnEof;    }    	non-compiled	[CE]  	109	None	replace
906	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  throwOnEof;  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  throwOnEof;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throwOnEof;    }    	non-compiled	[CE]  	109	None	replace
907	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {  throwOnEof;  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {  throwOnEof;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throwOnEof;    }    	non-compiled	[CE]  	109	None	replace
908	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[0]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[0]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[0]);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	43	None	replace
909	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i  +  1]);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i  +  1]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i  +  1]);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	43	None	replace
910	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i]  +  1);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i]  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i]  +  1);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	43	None	replace
911	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]  -  1);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]  -  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]  -  1);	  throwOnEof(i,    buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	42	None	replace
912	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[limit]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[limit]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[limit]);	  throwOnEof(i,    buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	42	None	replace
913	[BUG]  [BUGGY]  throwOnEof(null,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(null,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(null,  buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	42	None	replace
914	[BUG]  [BUGGY]  throwOnEof(buffer,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	74	None	replace
915	[BUG]  [BUGGY]  consumeNonExecutePrefix(i,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumeNonExecutePrefix(i,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumeNonExecutePrefix(i,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	74	None	replace
916	[BUG]  [BUGGY]  throwOnEof(i,  pos,  buffer,  NON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  buffer,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  buffer,  NON_EXECUTE_PREFIX);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	12	None	replace
917	[BUG]  [BUGGY]  throwOnEof(i,  pos,  buffer[i],  NON_EXECUTE_PREFIX);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  buffer[i],  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  buffer[i],  NON_EXECUTE_PREFIX);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	12	None	replace
918	[BUG]  [BUGGY]  foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].toString();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].toString();  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].toString();  }	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i].toString();    }    	non-compiled	[CE]  	77	None	replace
919	[BUG]  [BUGGY]  foundNonWhitespace(negative)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].toString();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  foundNonWhitespace(negative)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].toString();  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	foundNonWhitespace(negative)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].toString();  }	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i].toString();    }    	non-compiled	[CE]  	77	None	replace
920	[BUG]  [BUGGY]  found(buffer,  pos  +  i],  NON_EXECUTE_PREFIX[i].toString());  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  found(buffer,  pos  +  i],  NON_EXECUTE_PREFIX[i].toString());  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	found(buffer,  pos  +  i],  NON_EXECUTE_PREFIX[i].toString());	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i].toString();    }    	non-compiled	[CE]  	77	None	replace
921	[BUG]  [BUGGY]  found(buffer,  i  +  1,  NON_EXECUTE_PREFIX[i].toString());  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  found(buffer,  i  +  1,  NON_EXECUTE_PREFIX[i].toString());  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	found(buffer,  i  +  1,  NON_EXECUTE_PREFIX[i].toString());	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i].toString();    }    	non-compiled	[CE]  	77	None	replace
922	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length  -  1);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length  -  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length  -  1);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	81	None	replace
923	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length  -  limit);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length  -  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX.length  -  limit);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	81	None	replace
924	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].length;  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].length;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].length;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i].length;    }    	non-compiled	[CE]  	107	None	replace
925	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].length;  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].length;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i].length;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i].length;    }    	non-compiled	[CE]  	107	None	replace
926	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  limit,  NON_EXECUTE_PREFIX  +  1);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  limit,  NON_EXECUTE_PREFIX  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  limit,  NON_EXECUTE_PREFIX  +  1);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    limit    +    1);    	non-compiled	[CE]  	92	None	replace
927	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  limit  +  2);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  limit  +  2);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  limit  +  2);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    limit    +    1);    	non-compiled	[CE]  	92	None	replace
928	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  0,  limit  +  1);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  0,  limit  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  0,  limit  +  1);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    limit    +    1);    	non-compiled	[CE]  	92	None	replace
929	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[0]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[0]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[0],  NON_EXECUTE_PREFIX[0]));	  throwOnEof    Reader(buffer,    pos,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	99	None	replace
930	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length  -  2);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length  -  2);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX.length  -  2);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    1);    	non-compiled	[CE]  	82	None	replace
931	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length  -  1  +  i);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length  -  1  +  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX.length  -  1  +  i);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    1);    	non-compiled	[CE]  	82	None	replace
932	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length  -  4);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length  -  4);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX.length  -  4);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    1);    	non-compiled	[CE]  	82	None	replace
933	[BUG]  [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX,  i);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  NON_EXECUTE_PREFIX,  i);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    pos);    	non-compiled	[CE]  	91	None	replace
934	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX,  value);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX,  value);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX,  value);	  throwOnEof(buffer,    pos,    limit);    	non-compiled	[CE]  	142	None	replace
935	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i]  +  1]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i]  +  1]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i]  +  1]);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	129	None	replace
936	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i  +  1]]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i  +  1]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[i  +  1]]);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	129	None	replace
937	[BUG]  [BUGGY]  throwOnEof(i,  1,  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  1,  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  1,  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	72	None	replace
938	[BUG]  [BUGGY]  throwOnEof(i,  0,  buffer[i]]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  0,  buffer[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  0,  buffer[i]]);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	72	None	replace
939	[BUG]  [BUGGY]  throwOnEof(i,  0,  buffer[pos]]);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  0,  buffer[pos]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  0,  buffer[pos]]);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	72	None	replace
940	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  limit  +  1,  NON_EXECUTE_PREFIX.length  -  1);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  limit  +  1,  NON_EXECUTE_PREFIX.length  -  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  limit  +  1,  NON_EXECUTE_PREFIX.length  -  1);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	136	None	replace
941	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  0,  limit  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  0,  limit  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  0,  limit  +  1,  NON_EXECUTE_PREFIX.length);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	136	None	replace
942	[BUG]  [BUGGY]  found(buffer,  pos  +  i],  NON_EXECUTE_PREFIX[i]);  return;  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  found(buffer,  pos  +  i],  NON_EXECUTE_PREFIX[i]);  return;  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	found(buffer,  pos  +  i],  NON_EXECUTE_PREFIX[i]);  return;	  if(lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    return;    }    	non-compiled	[CE]  	151	None	replace
943	[BUG]  [BUGGY]  found(buffer,  pos  +  i],  limit,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  found(buffer,  pos  +  i],  limit,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	found(buffer,  pos  +  i],  limit,  NON_EXECUTE_PREFIX[i]);	  if(lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    return;    }    	non-compiled	[CE]  	151	None	replace
944	[BUG]  [BUGGY]  allowNonWhitespace(false)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(false)  {  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(false)  {	  if(lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    return;    }    	non-compiled	[CE]  	151	None	replace
945	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  limit  +  1,  NON_EXECUTE_PREFIX.length  -  1);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  limit  +  1,  NON_EXECUTE_PREFIX.length  -  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  limit  +  1,  NON_EXECUTE_PREFIX.length  -  1);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX,    limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	154	None	replace
946	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,'');  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,'');  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,'');	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX,   "   ");    	non-compiled	[CE]  	120	None	replace
947	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  charsLoaded);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  charsLoaded);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  charsLoaded);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX,   "   ");    	non-compiled	[CE]  	120	None	replace
948	[BUG]  [BUGGY]  implements  PEEKED_PREFIX(i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  PEEKED_PREFIX(i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  PEEKED_PREFIX(i,  NON_EXECUTE_PREFIX);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	163	None	replace
949	[BUG]  [BUGGY]  implements  PEEKED_EXECUTE_PREFIX(i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  PEEKED_EXECUTE_PREFIX(i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  PEEKED_EXECUTE_PREFIX(i,  NON_EXECUTE_PREFIX);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	163	None	replace
950	[BUG]  [BUGGY]  implements  PEEKED_BEFORE_PREFIX(i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  PEEKED_BEFORE_PREFIX(i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  PEEKED_BEFORE_PREFIX(i,  NON_EXECUTE_PREFIX);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	163	None	replace
951	[BUG]  [BUGGY]  implements  PEEKED_BUFFER(i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  PEEKED_BUFFER(i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  PEEKED_BUFFER(i,  NON_EXECUTE_PREFIX);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	163	None	replace
952	[BUG]  [BUGGY]  While(!lenient  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  ReaderException( " ");  }  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  While(!lenient  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  ReaderException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	While(!lenient  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  ReaderException( " ");  }	  if(!lenient)    {    throwOnEof    ReaderException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
953	[BUG]  [BUGGY]  While(!lenient  &&  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  ReaderException( " ");  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  While(!lenient  &&  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  ReaderException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	While(!lenient  &&  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  ReaderException( " ");  }	  if(!lenient)    {    throwOnEof    ReaderException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
954	[BUG]  [BUGGY]  While(!lenient  &&  buffer[i  +  1]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  ReaderException( " ");  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  While(!lenient  &&  buffer[i  +  1]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  ReaderException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	While(!lenient  &&  buffer[i  +  1]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  ReaderException( " ");  }	  if(!lenient)    {    throwOnEof    ReaderException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
955	[BUG]  [BUGGY]  While(!lenient  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length)  {  throwOnEof  ReaderException( " ");  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  While(!lenient  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length)  {  throwOnEof  ReaderException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	While(!lenient  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length)  {  throwOnEof  ReaderException( " ");  }	  if(!lenient)    {    throwOnEof    ReaderException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
956	[BUG]  [BUGGY]  While(!lenient  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i].length)  {  throwOnEof  ReaderException( " ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  While(!lenient  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i].length)  {  throwOnEof  ReaderException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	While(!lenient  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i].length)  {  throwOnEof  ReaderException( " ");  }	  if(!lenient)    {    throwOnEof    ReaderException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
957	[BUG]  [BUGGY]  safeTree(buffer[pos  +  i]  }  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  safeTree(buffer[pos  +  i]  }  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	safeTree(buffer[pos  +  i]  }  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
958	[BUG]  [BUGGY]  safeTree(buffer[pos  +  i])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  safeTree(buffer[pos  +  i])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	safeTree(buffer[pos  +  i])  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
959	[BUG]  [BUGGY]  safeString(buffer[pos  +  i])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  safeString(buffer[pos  +  i])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	safeString(buffer[pos  +  i])  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
960	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  buffer[pos  +  i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  buffer[pos  +  i]);	  throwOnEof    Reader(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	47	None	replace
961	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i]);	  throwOnEof    Reader(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	47	None	replace
962	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	135	None	replace
963	[BUG]  [BUGGY]  consumeOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumeOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumeOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	135	None	replace
964	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]))    {    return;    }    	non-compiled	[CE]  	55	None	replace
965	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]))    {    return;    }    	non-compiled	[CE]  	55	None	replace
966	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]))    {    return;    }    	non-compiled	[CE]  	55	None	replace
967	[BUG]  [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX,  limit,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX,  limit,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  NON_EXECUTE_PREFIX,  limit,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	156	None	replace
968	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  limit,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  limit,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  NON_EXECUTE_PREFIX,  limit,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	156	None	replace
969	[BUG]  [BUGGY]  if(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  throwOnEof;  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(!lenient  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  throwOnEof;  }	  if(!lenient)    {    throwOnEof;    }    	non-compiled	[CE]  	76	None	replace
970	[BUG]  [BUGGY]  if(!lenient  &&  throwOnEof!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(!lenient  &&  throwOnEof!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(!lenient  &&  throwOnEof!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }	  if(!lenient)    {    throwOnEof;    }    	non-compiled	[CE]  	76	None	replace
971	[BUG]  [BUGGY]  if(!lenient  &&  throwOnEof.length  >  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  throwOnEof;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(!lenient  &&  throwOnEof.length  >  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(!lenient  &&  throwOnEof.length  >  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  throwOnEof;  }	  if(!lenient)    {    throwOnEof;    }    	non-compiled	[CE]  	76	None	replace
972	[BUG]  [BUGGY]  if(!lenient  &&  throwOnEof!=  NON_EXECUTE_PREFIX.length)  {  throwOnEof;  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(!lenient  &&  throwOnEof!=  NON_EXECUTE_PREFIX.length)  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(!lenient  &&  throwOnEof!=  NON_EXECUTE_PREFIX.length)  {  throwOnEof;  }	  if(!lenient)    {    throwOnEof;    }    	non-compiled	[CE]  	76	None	replace
973	[BUG]  [BUGGY]  if(!lenient  &&  throwOnEof!=  NON_EXECUTE_PREFIX[i  +  1])  {  throwOnEof;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(!lenient  &&  throwOnEof!=  NON_EXECUTE_PREFIX[i  +  1])  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(!lenient  &&  throwOnEof!=  NON_EXECUTE_PREFIX[i  +  1])  {  throwOnEof;  }	  if(!lenient)    {    throwOnEof;    }    	non-compiled	[CE]  	76	None	replace
974	[BUG]  [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(false)  {  throwOnEof;  }	  if(!lenient)    {    throwOnEof;    }    	non-compiled	[CE]  	76	None	replace
975	[BUG]  [BUGGY]  if(!lenient  &&  throwOnEof!=  NON_EXECUTE_PREFIX[i].length)  {  throwOnEof;  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(!lenient  &&  throwOnEof!=  NON_EXECUTE_PREFIX[i].length)  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(!lenient  &&  throwOnEof!=  NON_EXECUTE_PREFIX[i].length)  {  throwOnEof;  }	  if(!lenient)    {    throwOnEof;    }    	non-compiled	[CE]  	76	None	replace
976	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  pos  +  i);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  pos  +  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  pos  +  i);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX    +    i);    	non-compiled	[CE]  	119	None	replace
977	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  limit,  i);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  limit,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  limit,  i);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX,    i);    	non-compiled	[CE]  	113	None	replace
978	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[i].length);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[i].length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[i].length);	  throwOnEof    Reader(buffer,    i,    limit);    	non-compiled	[CE]  	110	None	replace
979	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  0,  NON_EXECUTE_PREFIX);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  0,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  0,  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	10	None	replace
980	[BUG]  [BUGGY]  throwOnEof(null,  pos,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(null,  pos,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(null,  pos,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	37	None	replace
981	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]  -  1]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]  -  1]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i]  -  1]);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	71	None	replace
982	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i  +  1]]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i  +  1]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[i  +  1]]);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	71	None	replace
983	[BUG]  [BUGGY]  throwOnEof(buffer[pos],  NON_EXECUTE_PREFIX[i]  +  1]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer[pos],  NON_EXECUTE_PREFIX[i]  +  1]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer[pos],  NON_EXECUTE_PREFIX[i]  +  1]);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	71	None	replace
984	[BUG]  [BUGGY]  allowNonWhitespace(JsonSyntaxException.make(buffer,  pos,  buffer[i]));  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(JsonSyntaxException.make(buffer,  pos,  buffer[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(JsonSyntaxException.make(buffer,  pos,  buffer[i]));	  allowNonWhitespace(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	130	None	replace
985	[BUG]  [BUGGY]  consumePrefix(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumePrefix(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumePrefix(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);	  consumePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	161	None	replace
986	[BUG]  [BUGGY]  consumePrefix(i,  NON_EXECUTE_PREFIX,  buffer);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumePrefix(i,  NON_EXECUTE_PREFIX,  buffer);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumePrefix(i,  NON_EXECUTE_PREFIX,  buffer);	  consumePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	161	None	replace
987	[BUG]  [BUGGY]  throwOnEofRead(buffer,  pos[i],  NON_EXECUTE_PREFIX);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofRead(buffer,  pos[i],  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofRead(buffer,  pos[i],  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(i,    buffer[i],    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	102	None	replace
988	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[i],  pos);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[i],  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[i],  pos);	  throwOnEof    Reader(i,    buffer[i],    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	102	None	replace
989	[BUG]  [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));	  Throwables.throwOnEof(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	22	None	replace
990	[BUG]  [BUGGY]  throwOnEof  Reader(i,  NON_EXECUTE_PREFIX.length,  limit);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  NON_EXECUTE_PREFIX.length,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  NON_EXECUTE_PREFIX.length,  limit);	  throwOnEof    Reader(i,    limit,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	9	None	replace
991	[BUG]  [BUGGY]  dumpPath(buffer,  i);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpPath(buffer,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpPath(buffer,  i);	  dumpBuffer(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	32	None	replace
992	[BUG]  [BUGGY]  dumpBuffer(buffer,  0);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  0);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  0);	  dumpBuffer(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	32	None	replace
993	[BUG]  [BUGGY]  throwOnEof(i,  pos  +  0,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos  +  0,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos  +  0,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    pos    +    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	90	None	replace
994	[BUG]  [BUGGY]  throwOnEof(i,  pos  +  i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos  +  i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos  +  i,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    pos    +    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	90	None	replace
995	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	58	None	replace
996	[BUG]  [BUGGY]  Buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	58	None	replace
997	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  }  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	58	None	replace
998	[BUG]  [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	56	None	replace
999	[BUG]  [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	56	None	replace
1000	[BUG]  [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	56	None	replace
1001	[BUG]  [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	56	None	replace
1002	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX)  {  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX)  {  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX)  {  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  }	  throwOnEof(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	105	None	replace
1003	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  -  1);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  -  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  -  1);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	105	None	replace
1004	[BUG]  [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX[i].length);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX[i].length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  NON_EXECUTE_PREFIX[i].length);	  throwOnEof(i,    pos,    limit);    	non-compiled	[CE]  	48	None	replace
1005	[BUG]  [BUGGY]  foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]);  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]);  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	foundNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]);  }	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i]);    }    	non-compiled	[CE]  	78	None	replace
1006	[BUG]  [BUGGY]  throwOnEof  Reader(i,  buffer,  pos,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(i,  buffer,  pos,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(i,  buffer,  pos,  NON_EXECUTE_PREFIX,  limit);	  throwOnEof    Reader(i,    buffer,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	7	None	replace
1007	[BUG]  [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSYntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSYntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	128	None	replace
1008	[BUG]  [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSYntaxException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSYntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	128	None	replace
1009	[BUG]  [BUGGY]  throwOnEof(i,  buffer,  NON_EXECUTE_PREFIX.length  +  1);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer,  NON_EXECUTE_PREFIX.length  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer,  NON_EXECUTE_PREFIX.length  +  1);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    +    1);    	non-compiled	[CE]  	84	None	replace
1010	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length  +  2);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length  +  2);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX.length  +  2);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    +    1);    	non-compiled	[CE]  	84	None	replace
1011	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  buffer[i]));  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  buffer[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  buffer[i]));	  throwOnEof    Reader(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	138	None	replace
1012	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[i],  value));	  throwOnEof    Reader(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	138	None	replace
1013	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos[0],  NON_EXECUTE_PREFIX[0]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos[0],  NON_EXECUTE_PREFIX[0]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos[0],  NON_EXECUTE_PREFIX[0]));	  throwOnEof    Reader(buffer,    pos[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	29	None	replace
1014	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos[i],  NON_EXECUTE_PREFIX[i  +  1]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos[i],  NON_EXECUTE_PREFIX[i  +  1]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos[i],  NON_EXECUTE_PREFIX[i  +  1]));	  throwOnEof    Reader(buffer,    pos[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	29	None	replace
1015	[BUG]  [BUGGY]  throwOnEofRead(buffer,  pos,  i);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofRead(buffer,  pos,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofRead(buffer,  pos,  i);	  throwOnEofRead(buffer,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	144	None	replace
1016	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX[i],  limit);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX[i],  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX[i],  limit);	  throwOnEof(i,    limit,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	68	None	replace
1017	[BUG]  [BUGGY]  throwOnEof(i,  0,  pos);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  0,  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  0,  pos);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	16	None	replace
1018	[BUG]  [BUGGY]  throwOnEof(i,  0,  buffer,  NON_EXECUTE_PREFIX);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  0,  buffer,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  0,  buffer,  NON_EXECUTE_PREFIX);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	16	None	replace
1019	[BUG]  [BUGGY]  parent!=  null  &&!lenient)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  parent!=  null  &&!lenient)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	parent!=  null  &&!lenient)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	75	None	replace
1020	[BUG]  [BUGGY]  foundNonWhitespace(false)  {  throwOnEof;  }  else  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  foundNonWhitespace(false)  {  throwOnEof;  }  else  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	foundNonWhitespace(false)  {  throwOnEof;  }  else  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	75	None	replace
1021	[BUG]  [BUGGY]  try  {  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX);  }  catch(IOException  ioe)  {  return;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  try  {  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX);  }  catch(IOException  ioe)  {  return;  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	try  {  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX);  }  catch(IOException  ioe)  {  return;	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	10	None	replace
1022	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  0,  NON_EXECUTE_PREFIX);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  0,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  0,  NON_EXECUTE_PREFIX);	  throwOnEof    String(buffer,    pos,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	153	None	replace
1023	[BUG]  [BUGGY]  append(buffer,  pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  append(buffer,  pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	append(buffer,  pos,  NON_EXECUTE_PREFIX);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	15	None	replace
1024	[BUG]  [BUGGY]  bucket(buffer,  pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket(buffer,  pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket(buffer,  pos,  NON_EXECUTE_PREFIX);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	15	None	replace
1025	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i  +  1,  NON_EXECUTE_PREFIX);  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i  +  1,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i  +  1,  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(buffer,    i);    	non-compiled	[CE]  	44	None	replace
1026	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX,  null);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX,  null);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX,  null);	  throwOnEof(buffer,    pos,    limit);    	non-compiled	[CE]  	142	None	replace
1027	[BUG]  [BUGGY]  throwOnEof(buffer,  pos[pos],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos[pos],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos[pos],  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	96	None	replace
1028	[BUG]  [BUGGY]  throwOnEof(buffer,  pos[i],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos[i],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos[i],  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	96	None	replace
1029	[BUG]  [BUGGY]  throwOnEof(buffer[pos],  pos,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer[pos],  pos,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer[pos],  pos,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	96	None	replace
1030	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[pos  +  i]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[pos  +  i]);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	96	None	replace
1031	[BUG]  [BUGGY]  throwOnEofString(buffer,  pos,  limit,  value);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofString(buffer,  pos,  limit,  value);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofString(buffer,  pos,  limit,  value);	  throwOnEofString(buffer,    pos,    NON_EXECUTE_PREFIX,    value);    	non-compiled	[CE]  	3	None	replace
1032	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[0]]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[0]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[0]]);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	129	None	replace
1033	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  limit[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  limit[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  limit[i]);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	129	None	replace
1034	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(buffer,  i,  limit,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(buffer,  i,  limit,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(buffer,  i,  limit,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    buffer[i]);    	non-compiled	[CE]  	93	None	replace
1035	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  limit,  buffer[i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  limit,  buffer[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  limit,  buffer[i]);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    buffer[i]);    	non-compiled	[CE]  	93	None	replace
1036	[BUG]  [BUGGY]  throwOnEof(n,  pos,  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(n,  pos,  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(n,  pos,  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    limit,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	68	None	replace
1037	[BUG]  [BUGGY]  throwOnEof(i,  1,  NON_EXECUTE_PREFIX);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  1,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  1,  NON_EXECUTE_PREFIX);	  throwOnEof(i,    0,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	16	None	replace
1038	[BUG]  [BUGGY]  throwOnEofRead(buffer,  pos);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofRead(buffer,  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofRead(buffer,  pos);	  throwOnEof    Reader(i,    pos);    	non-compiled	[CE]  	103	None	replace
1039	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  limit[i]));  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  limit[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  limit[i]));	  throwOnEof    Reader(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	138	None	replace
1040	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  limit  +  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  limit  +  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  limit  +  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	138	None	replace
1041	[BUG]  [BUGGY]  throwOnEof(buffer,  pos[pos],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos[pos],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos[pos],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	71	None	replace
1042	[BUG]  [BUGGY]  throwOnEof(buffer[pos],  pos,  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer[pos],  pos,  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer[pos],  pos,  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	71	None	replace
1043	[BUG]  [BUGGY]  dump(buffer[pos],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer[pos],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer[pos],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	71	None	replace
1044	[BUG]  [BUGGY]  throwOnEof(buffer[pos],  buffer[pos],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer[pos],  buffer[pos],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer[pos],  buffer[pos],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	71	None	replace
1045	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[pos  +  i]]);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[pos  +  i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos],  NON_EXECUTE_PREFIX[pos  +  i]]);	  throwOnEof(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	71	None	replace
1046	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos  +  1  +  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos  +  1  +  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos  +  1  +  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    pos    +    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	139	None	replace
1047	[BUG]  [BUGGY]  throwOnEof(i,  limit,  buffer,  NON_EXECUTE_PREFIX);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  limit,  buffer,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  limit,  buffer,  NON_EXECUTE_PREFIX);	  throwOnEof(i,    buffer,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	104	None	replace
1048	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(n,  i,  limit);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(n,  i,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(n,  i,  limit);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	141	None	replace
1049	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(i,  limit);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(i,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(i,  limit);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	141	None	replace
1050	[BUG]  [BUGGY]  allowWhitespace(buffer[pos  +  i])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowWhitespace(buffer[pos  +  i])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowWhitespace(buffer[pos  +  i])  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
1051	[BUG]  [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i]);	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
1052	[BUG]  [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
1053	[BUG]  [BUGGY]  implements  JsonReader(buffer,  i,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  JsonReader(buffer,  i,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  JsonReader(buffer,  i,  NON_EXECUTE_PREFIX,  limit);	  throwOnEof    Reader(i,    buffer,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	7	None	replace
1054	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  0,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  0,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  0,  NON_EXECUTE_PREFIX,  limit);	  throwOnEof    Reader(i,    buffer,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	7	None	replace
1055	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  NON_EXECUTE_PREFIX);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX  value: "  +  NON_EXECUTE_PREFIX);	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX    value:   "    +    i);    	non-compiled	[CE]  	65	None	replace
1056	[BUG]  [BUGGY]  îndreptBounds(0,  pos  +  1)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]);  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  îndreptBounds(0,  pos  +  1)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]);  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	îndreptBounds(0,  pos  +  1)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]);  }	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i]);    }    	non-compiled	[CE]  	78	None	replace
1057	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  i,  0,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  i,  0,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  i,  0,  NON_EXECUTE_PREFIX.length);	  throwOnEof    String(buffer,    pos,    i,    limit);    	non-compiled	[CE]  	114	None	replace
1058	[BUG]  [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX.length  -  limit);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX.length  -  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  NON_EXECUTE_PREFIX.length  -  limit);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    limit);    	non-compiled	[CE]  	85	None	replace
1059	[BUG]  [BUGGY]  readOnEof(buffer,  pos,  limit);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  readOnEof(buffer,  pos,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	readOnEof(buffer,  pos,  limit);	  throwOnEof(i,    limit);    	non-compiled	[CE]  	33	None	replace
1060	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos  +  i],  limit[i]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos  +  i],  limit[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos  +  i],  limit[i]));	  throwOnEof    Reader(buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	30	None	replace
1061	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos  +  i],  limit  ||  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos  +  i],  limit  ||  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos  +  i],  limit  ||  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	30	None	replace
1062	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]),  limit);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]),  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos  +  i],  NON_EXECUTE_PREFIX[i]),  limit);	  throwOnEof    Reader(buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	30	None	replace
1063	[BUG]  [BUGGY]  consumePrefix(buffer,  pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumePrefix(buffer,  pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumePrefix(buffer,  pos,  NON_EXECUTE_PREFIX);	  throwOnEofRead(buffer,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	144	None	replace
1064	[BUG]  [BUGGY]  scan(buffer,  pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  scan(buffer,  pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	scan(buffer,  pos,  NON_EXECUTE_PREFIX);	  throwOnEofRead(buffer,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	144	None	replace
1065	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  limit[0]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  limit[0]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  limit[0]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[0]));    	non-compiled	[CE]  	127	None	replace
1066	[BUG]  [BUGGY]  allowNonWhitespace(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[0]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[0]));    	non-compiled	[CE]  	127	None	replace
1067	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos],  pos,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos],  pos,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos],  pos,  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	25	None	replace
1068	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos],  buffer[pos],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos],  buffer[pos],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos],  buffer[pos],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	25	None	replace
1069	[BUG]  [BUGGY]  throwOnEofRead(buffer,  pos[pos],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofRead(buffer,  pos[pos],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofRead(buffer,  pos[pos],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(i,    buffer[pos],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	25	None	replace
1070	[BUG]  [BUGGY]  implements  JsonReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  JsonReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  JsonReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	135	None	replace
1071	[BUG]  [BUGGY]  readOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  readOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	readOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	135	None	replace
1072	[BUG]  [BUGGY]  implements  JsonReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  JsonReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  JsonReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	135	None	replace
1073	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  0,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  0,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  pos,  0,  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    limit,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	19	None	replace
1074	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i]),  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i]),  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i]),  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    limit,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	19	None	replace
1075	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  for(int  i  =  0;  i  <  limit;  i++)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	53	None	replace
1076	[BUG]  [BUGGY]  while(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  while(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	while(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    i++)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	53	None	replace
1077	[BUG]  [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    pos,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	87	None	replace
1078	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(pos,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(pos,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(pos,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	105	None	replace
1079	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(null,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(null,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(null,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	105	None	replace
1080	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(i,  buffer[pos  +  i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(i,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(i,  buffer[pos  +  i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	105	None	replace
1081	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  ' "  +  NON_EXECUTE_PREFIX.length  + "' ");  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  ' "  +  NON_EXECUTE_PREFIX.length  + "' ");  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  ' "  +  NON_EXECUTE_PREFIX.length  + "' ");	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX.length:   ");    	non-compiled	[CE]  	66	None	replace
1082	[BUG]  [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  i,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  i,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  i,  NON_EXECUTE_PREFIX[i]));	  Throwables.throwOnEof(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	22	None	replace
1083	[BUG]  [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX,  limit[i]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX,  limit[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX,  limit[i]));	  Throwables.throwOnEof(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	22	None	replace
1084	[BUG]  [BUGGY]  throwOnEof(n,  pos,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(n,  pos,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(n,  pos,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    limit,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	38	None	replace
1085	[BUG]  [BUGGY]  throwOnEof(i,  buffer,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    limit,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	38	None	replace
1086	[BUG]  [BUGGY]  dumpBuffer(buffer,  i.intValue(),  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  i.intValue(),  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  i.intValue(),  NON_EXECUTE_PREFIX.length);	  dumpBuffer(i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	83	None	replace
1087	[BUG]  [BUGGY]  foundNonWhitespace(negative)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  foundNonWhitespace(negative)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	foundNonWhitespace(negative)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }	  if(lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	149	None	replace
1088	[BUG]  [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(false)  {  throwOnEof;  }  else  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE	  if(lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	149	None	replace
1089	[BUG]  [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_E  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_E  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(false)  {  throwOnEof;  }  else  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_E	  if(lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	149	None	replace
1090	[BUG]  [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EX  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EX  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(false)  {  throwOnEof;  }  else  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EX	  if(lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	149	None	replace
1091	[BUG]  [BUGGY]  while(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  while(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	while(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]))    {    return;    }    	non-compiled	[CE]  	55	None	replace
1092	[BUG]  [BUGGY]  while(pos  <  limit  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  while(pos  <  limit  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	while(pos  <  limit  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  return	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]))    {    return;    }    	non-compiled	[CE]  	55	None	replace
1093	[BUG]  [BUGGY]  if(lenient)  {  throwOnEof;  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(lenient)  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(lenient)  {  throwOnEof;  }	  if(!lenient)    {    throwOnEof;    }    	non-compiled	[CE]  	76	None	replace
1094	[BUG]  [BUGGY]  if(lenient)  {  throwOnEof  +=  NON_EXECUTE_PREFIX.length;  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(lenient)  {  throwOnEof  +=  NON_EXECUTE_PREFIX.length;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(lenient)  {  throwOnEof  +=  NON_EXECUTE_PREFIX.length;  }	  if(!lenient)    {    throwOnEof;    }    	non-compiled	[CE]  	76	None	replace
1095	[BUG]  [BUGGY]  if(!lenient  &&  throwOnEof  <  limit)  {  throwOnEof;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(!lenient  &&  throwOnEof  <  limit)  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(!lenient  &&  throwOnEof  <  limit)  {  throwOnEof;  }	  if(!lenient)    {    throwOnEof;    }    	non-compiled	[CE]  	76	None	replace
1096	[BUG]  [BUGGY]  if(!lenient  &&  throwOnEof  >  limit)  {  throwOnEof;  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(!lenient  &&  throwOnEof  >  limit)  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(!lenient  &&  throwOnEof  >  limit)  {  throwOnEof;  }	  if(!lenient)    {    throwOnEof;    }    	non-compiled	[CE]  	76	None	replace
1097	[BUG]  [BUGGY]  if(!lenient  &&  throwOnEof)  {  throwOnEof;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(!lenient  &&  throwOnEof)  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(!lenient  &&  throwOnEof)  {  throwOnEof;  }	  if(!lenient)    {    throwOnEof;    }    	non-compiled	[CE]  	76	None	replace
1098	[BUG]  [BUGGY]  if(!lenient  &&  throwOnEof.length  >  limit)  {  throwOnEof;  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(!lenient  &&  throwOnEof.length  >  limit)  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(!lenient  &&  throwOnEof.length  >  limit)  {  throwOnEof;  }	  if(!lenient)    {    throwOnEof;    }    	non-compiled	[CE]  	76	None	replace
1099	[BUG]  [BUGGY]  throwOnEof(pos,  i,  buffer[pos]]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  i,  buffer[pos]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  i,  buffer[pos]]);	  throwOnEof(pos,    i,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	147	None	replace
1100	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos  +  i]]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos  +  i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos  +  i]]);	  throwOnEof(pos,    i,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	147	None	replace
1101	[BUG]  [BUGGY]  throwOnEof(i,  limit,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  limit,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  limit,  NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	156	None	replace
1102	[BUG]  [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX.length,  limit);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX.length,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  NON_EXECUTE_PREFIX.length,  limit);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	156	None	replace
1103	[BUG]  [BUGGY]  parent  ==  null  ||!lenient)  {  throwOnEof  ReaderException( " ");  }  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  parent  ==  null  ||!lenient)  {  throwOnEof  ReaderException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	parent  ==  null  ||!lenient)  {  throwOnEof  ReaderException( " ");  }	  if(!lenient)    {    throwOnEof    ReaderException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
1104	[BUG]  [BUGGY]  readOnEof  ReaderException( " ");  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  readOnEof  ReaderException( " ");  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	readOnEof  ReaderException( " ");	  if(!lenient)    {    throwOnEof    ReaderException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
1105	[BUG]  [BUGGY]  parent  ==  null)  {  throwOnEof  ReaderException( " ");  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  parent  ==  null)  {  throwOnEof  ReaderException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	parent  ==  null)  {  throwOnEof  ReaderException( " ");  }	  if(!lenient)    {    throwOnEof    ReaderException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
1106	[BUG]  [BUGGY]  aughtOnEof  ReaderException( " ");  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  aughtOnEof  ReaderException( " ");  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	aughtOnEof  ReaderException( " ");	  if(!lenient)    {    throwOnEof    ReaderException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
1107	[BUG]  [BUGGY]  parent  ==  null  ||!lenient)  {  throw  onEof  ReaderException( " ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  parent  ==  null  ||!lenient)  {  throw  onEof  ReaderException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	parent  ==  null  ||!lenient)  {  throw  onEof  ReaderException( " ");  }	  if(!lenient)    {    throwOnEof    ReaderException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
1108	[BUG]  [BUGGY]  try  {  throwOnEof  Reader(buffer,  pos,  limit);  }  catch(IOException  ioe)  {  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  try  {  throwOnEof  Reader(buffer,  pos,  limit);  }  catch(IOException  ioe)  {  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	try  {  throwOnEof  Reader(buffer,  pos,  limit);  }  catch(IOException  ioe)  {  }	  throwOnEof    Reader(i,    pos,    limit);    	non-compiled	[CE]  	5	None	replace
1109	[BUG]  [BUGGY]  implements  JsonReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  JsonReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  JsonReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	133	None	replace
1110	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length  -  limit);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length  -  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX.length  -  limit);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	133	None	replace
1111	[BUG]  [BUGGY]  implements  JsonReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  JsonReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  JsonReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX.length);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	133	None	replace
1112	[BUG]  [BUGGY]  scan(buffer,  pos  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  scan(buffer,  pos  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	scan(buffer,  pos  +  1,  NON_EXECUTE_PREFIX.length);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	133	None	replace
1113	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  pos,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  pos,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  pos,  NON_EXECUTE_PREFIX.length);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	118	None	replace
1114	[BUG]  [BUGGY]  dump(JsonSyntaxException.make(buffer,  pos,  limit[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(JsonSyntaxException.make(buffer,  pos,  limit[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(JsonSyntaxException.make(buffer,  pos,  limit[i],  NON_EXECUTE_PREFIX[i]));	  dump(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	132	None	replace
1115	[BUG]  [BUGGY]  append(buffer,  pos,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  append(buffer,  pos,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	append(buffer,  pos,  NON_EXECUTE_PREFIX.length);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	81	None	replace
1116	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  pos,  NON_EXECUTE_PREFIX);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	117	None	replace
1117	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos]));    	non-compiled	[CE]  	20	None	replace
1118	[BUG]  [BUGGY]  pokeOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  pokeOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	pokeOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos]));    	non-compiled	[CE]  	20	None	replace
1119	[BUG]  [BUGGY]  consumePrefix(pos,  i);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumePrefix(pos,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumePrefix(pos,  i);	  consumePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	161	None	replace
1120	[BUG]  [BUGGY]  consumeNull(i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumeNull(i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumeNull(i,  NON_EXECUTE_PREFIX);	  consumePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	161	None	replace
1121	[BUG]  [BUGGY]  parent!=  null  &&  parent!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return;  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  parent!=  null  &&  parent!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	parent!=  null  &&  parent!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return;  }	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    return;    }    	non-compiled	[CE]  	79	None	replace
1122	[BUG]  [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  return;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  return;  }	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    return;    }    	non-compiled	[CE]  	79	None	replace
1123	[BUG]  [BUGGY]  parent!=  null  &&  parent!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  parent!=  null  &&  parent!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	parent!=  null  &&  parent!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    return;    }    	non-compiled	[CE]  	79	None	replace
1124	[BUG]  [BUGGY]  parent!=  null  &&  parent!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  parent!=  null  &&  parent!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	parent!=  null  &&  parent!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i]	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    return;    }    	non-compiled	[CE]  	79	None	replace
1125	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  pos,  limit  +  1);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  pos,  limit  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  pos,  limit  +  1);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    limit    +    1);    	non-compiled	[CE]  	92	None	replace
1126	[BUG]  [BUGGY]  append(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  append(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	append(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	1	None	replace
1127	[BUG]  [BUGGY]  dump(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	1	None	replace
1128	[BUG]  [BUGGY]  allowNonWhitespace(buffer[pos  +  i]  {  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(buffer[pos  +  i]  {  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(buffer[pos  +  i]  {  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	57	None	replace
1129	[BUG]  [BUGGY]  allowNonWhitespace(buffer[pos  +  i]  {  NON_EXECUTE_PREFIX[i]))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(buffer[pos  +  i]  {  NON_EXECUTE_PREFIX[i]))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(buffer[pos  +  i]  {  NON_EXECUTE_PREFIX[i]))  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	57	None	replace
1130	[BUG]  [BUGGY]  consumePrefix(buffer,  i,  NON_EXECUTE_PREFIX);  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumePrefix(buffer,  i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumePrefix(buffer,  i,  NON_EXECUTE_PREFIX);	  throwOnEofRead(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	143	None	replace
1131	[BUG]  [BUGGY]  implements  JsonReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  JsonReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  JsonReaderException(buffer,  i  +  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	134	None	replace
1132	[BUG]  [BUGGY]  readOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  readOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	readOnEof  ReaderException(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	134	None	replace
1133	[BUG]  [BUGGY]  scan(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  scan(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	scan(buffer,  pos  +  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof    ReaderException(buffer,    i    +    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	134	None	replace
1134	[BUG]  [BUGGY]  throwOnEof(i,  pos  +  1,  NON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos  +  1,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos  +  1,  NON_EXECUTE_PREFIX);	  throwOnEof(i,    pos);    	non-compiled	[CE]  	35	None	replace
1135	[BUG]  [BUGGY]  readOnEof(buffer,  pos);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  readOnEof(buffer,  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	readOnEof(buffer,  pos);	  throwOnEof(i,    pos);    	non-compiled	[CE]  	35	None	replace
1136	[BUG]  [BUGGY]  pokeOnEof(i,  pos);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  pokeOnEof(i,  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	pokeOnEof(i,  pos);	  throwOnEof(i,    pos);    	non-compiled	[CE]  	35	None	replace
1137	[BUG]  [BUGGY]  throwOnEof(i,  pos  +  1,  buffer,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos  +  1,  buffer,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos  +  1,  buffer,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    pos);    	non-compiled	[CE]  	35	None	replace
1138	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(pos,  i);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(pos,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(pos,  i);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	163	None	replace
1139	[BUG]  [BUGGY]  implements  JsonStringBuffer(buffer,  pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  JsonStringBuffer(buffer,  pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  JsonStringBuffer(buffer,  pos,  NON_EXECUTE_PREFIX);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	163	None	replace
1140	[BUG]  [BUGGY]  implements  PEEKED_BOOLEAN(pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  PEEKED_BOOLEAN(pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  PEEKED_BOOLEAN(pos,  NON_EXECUTE_PREFIX);	  implements    NON_EXECUTE_PREFIX(pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	163	None	replace
1141	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos  +  1,  limit);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos  +  1,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos  +  1,  limit);	  throwOnEof    Reader(buffer,    pos,    limit);    	non-compiled	[CE]  	152	None	replace
1142	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  Reader(i,  buffer[pos  +  i]);  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  Reader(i,  buffer[pos  +  i]);  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  Reader(i,  buffer[pos  +  i]);  }	  throwOnEof    Reader(i,    buffer[pos    +    i]);    	non-compiled	[CE]  	46	None	replace
1143	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX)  {  throwOnEof  Reader(i,  buffer[pos  +  i]);  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX)  {  throwOnEof  Reader(i,  buffer[pos  +  i]);  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX)  {  throwOnEof  Reader(i,  buffer[pos  +  i]);  }	  throwOnEof    Reader(i,    buffer[pos    +    i]);    	non-compiled	[CE]  	46	None	replace
1144	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length)  {  throwOnEof  Reader(i,  buffer[pos  +  i]);  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length)  {  throwOnEof  Reader(i,  buffer[pos  +  i]);  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length)  {  throwOnEof  Reader(i,  buffer[pos  +  i]);  }	  throwOnEof    Reader(i,    buffer[pos    +    i]);    	non-compiled	[CE]  	46	None	replace
1145	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  Reader(i,  buffer[pos  +  i]);  }  else  {  return;  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  Reader(i,  buffer[pos  +  i]);  }  else  {  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof  Reader(i,  buffer[pos  +  i]);  }  else  {  return;  }	  throwOnEof    Reader(i,    buffer[pos    +    i]);    	non-compiled	[CE]  	46	None	replace
1146	[BUG]  [BUGGY]  foundNonWhitespace(negative)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return;  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  foundNonWhitespace(negative)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	foundNonWhitespace(negative)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  return;  }	  if(lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    return;    }    	non-compiled	[CE]  	151	None	replace
1147	[BUG]  [BUGGY]  throwOnEof  =  JsonNull.createJsonPath();  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  JsonNull.createJsonPath();  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  JsonNull.createJsonPath();	  throwOnEof    =    JsonNull.createJsonNull();    	non-compiled	[CE]  	123	None	replace
1148	[BUG]  [BUGGY]  throwOnEof  =  JsonNull.createJsonLong(0);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  JsonNull.createJsonLong(0);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  JsonNull.createJsonLong(0);	  throwOnEof    =    JsonNull.createJsonNull();    	non-compiled	[CE]  	123	None	replace
1149	[BUG]  [BUGGY]  throwOnEof  =  JsonNull.createNonWhitespace();  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  JsonNull.createNonWhitespace();  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  JsonNull.createNonWhitespace();	  throwOnEof    =    JsonNull.createJsonNull();    	non-compiled	[CE]  	123	None	replace
1150	[BUG]  [BUGGY]  throwOnEof  Reader(in,  pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(in,  pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(in,  pos,  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(i,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	8	None	replace
1151	[BUG]  [BUGGY]  try  {  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX);  }  catch(Throwable  t)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  try  {  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX);  }  catch(Throwable  t)  {  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	try  {  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX);  }  catch(Throwable  t)  {	  throwOnEof    Reader(i,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	8	None	replace
1152	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  buffer,  NON_EXECUTE_PREFIX);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  buffer,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  buffer,  NON_EXECUTE_PREFIX);	  throwOnEof    String(buffer,    i,    limit,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	62	None	replace
1153	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  buffer.length  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  buffer.length  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  buffer.length  +  1,  NON_EXECUTE_PREFIX.length);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX,    limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	136	None	replace
1154	[BUG]  [BUGGY]  throwOnEofRead(buffer,  pos[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEofRead(buffer,  pos[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEofRead(buffer,  pos[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(i,    buffer[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	27	None	replace
1155	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(i,  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    +    1);    	non-compiled	[CE]  	84	None	replace
1156	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  i,  NON_EXECUTE_PREFIX  +  1);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  i,  NON_EXECUTE_PREFIX  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  i,  NON_EXECUTE_PREFIX  +  1);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX,    limit    +    1);    	non-compiled	[CE]  	2	None	replace
1157	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  limit  *  NON_EXECUTE_PREFIX  +  1);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  limit  *  NON_EXECUTE_PREFIX  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX,  limit  *  NON_EXECUTE_PREFIX  +  1);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX,    limit    +    1);    	non-compiled	[CE]  	2	None	replace
1158	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  i,  limit  +  1);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  i,  limit  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  i,  limit  +  1);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX,    limit    +    1);    	non-compiled	[CE]  	2	None	replace
1159	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  limit,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  limit,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  limit,  NON_EXECUTE_PREFIX.length);	  throwOnEof    Reader(buffer,    i,    limit);    	non-compiled	[CE]  	110	None	replace
1160	[BUG]  [BUGGY]  pattern(null,  NON_EXECUTE_PREFIX.length,  buffer[pos]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  pattern(null,  NON_EXECUTE_PREFIX.length,  buffer[pos]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	pattern(null,  NON_EXECUTE_PREFIX.length,  buffer[pos]);	  throwOnEof(null,    NON_EXECUTE_PREFIX.length,    buffer[pos]);    	non-compiled	[CE]  	145	None	replace
1161	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[pos]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[pos]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX[pos]);	  throwOnEof(null,    NON_EXECUTE_PREFIX.length,    buffer[pos]);    	non-compiled	[CE]  	145	None	replace
1162	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length  -  limit);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length  -  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length  -  limit);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	157	None	replace
1163	[BUG]  [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX  +  1);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  NON_EXECUTE_PREFIX  +  1);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	12	None	replace
1164	[BUG]  [BUGGY]  row(buffer[pos  +  i]  }  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  row(buffer[pos  +  i]  }  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	row(buffer[pos  +  i]  }  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throwOnEof;    }    	non-compiled	[CE]  	109	None	replace
1165	[BUG]  [BUGGY]  ack[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  ack[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	ack[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throwOnEof;    }    	non-compiled	[CE]  	109	None	replace
1166	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOffset;  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOffset;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOffset;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throwOnEof;    }    	non-compiled	[CE]  	109	None	replace
1167	[BUG]  [BUGGY]  throwOnEof  ReaderException(buffer,  pos  +  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(buffer,  pos  +  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(buffer,  pos  +  NON_EXECUTE_PREFIX[i]);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	116	None	replace
1168	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  buffer[pos]);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  buffer[pos]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  buffer[pos]);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	116	None	replace
1169	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX[pos  +  i]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX[pos  +  i]);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	116	None	replace
1170	[BUG]  [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  p,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwables.throwOnEof(JsonSyntaxException.make(buffer,  p,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwables.throwOnEof(JsonSyntaxException.make(buffer,  p,  NON_EXECUTE_PREFIX[i]));	  Throwables.throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	24	None	replace
1171	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(pos,  NON_EXECUTE_PREFIX,  buffer[i]]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(pos,  NON_EXECUTE_PREFIX,  buffer[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(pos,  NON_EXECUTE_PREFIX,  buffer[i]]);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    buffer[i]]);    	non-compiled	[CE]  	73	None	replace
1172	[BUG]  [BUGGY]  throwOnEof(i,  limit,  buffer[i]]);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  limit,  buffer[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  limit,  buffer[i]]);	  throwOnEof(i,    NON_EXECUTE_PREFIX,    buffer[i]]);    	non-compiled	[CE]  	73	None	replace
1173	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(i,  buffer[pos]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(i,  buffer[pos]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(i,  buffer[pos]);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length,    buffer[pos]);    	non-compiled	[CE]  	146	None	replace
1174	[BUG]  [BUGGY]  dumpBuffer(pos,  i,  limit);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(pos,  i,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(pos,  i,  limit);	  dumpBuffer(i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	49	None	replace
1175	[BUG]  [BUGGY]  dumpBuffer(buffer,  0,  limit);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dumpBuffer(buffer,  0,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dumpBuffer(buffer,  0,  limit);	  dumpBuffer(i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	49	None	replace
1176	[BUG]  [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX.length  -  limit);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX.length  -  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  NON_EXECUTE_PREFIX.length  -  limit);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	51	None	replace
1177	[BUG]  [BUGGY]  throwOnEof(i,  pos,  limit  +  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  limit  +  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  limit  +  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	51	None	replace
1178	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  i,  NON_EXECUTE_PREFIX,  limit  -  1);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  i,  NON_EXECUTE_PREFIX,  limit  -  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  i,  NON_EXECUTE_PREFIX,  limit  -  1);	  throwOnEof    String(buffer,    pos,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	155	None	replace
1179	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  i,  NON_EXECUTE_PREFIX.length,  limit);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  i,  NON_EXECUTE_PREFIX.length,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  i,  NON_EXECUTE_PREFIX.length,  limit);	  throwOnEof    String(buffer,    pos,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	155	None	replace
1180	[BUG]  [BUGGY]  throwOnEof(buffer,  pos  -  1,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos  -  1,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos  -  1,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	97	None	replace
1181	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(i,  NON_EXECUTE_PREFIX.length  -  1,  buffer[pos]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(i,  NON_EXECUTE_PREFIX.length  -  1,  buffer[pos]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(i,  NON_EXECUTE_PREFIX.length  -  1,  buffer[pos]);	  throwOnEof(i,    NON_EXECUTE_PREFIX.length    -    1,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	97	None	replace
1182	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length,  limit[i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX.length,  limit[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX.length,  limit[i]);	  throwOnEof(pos,    NON_EXECUTE_PREFIX.length,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	39	None	replace
1183	[BUG]  [BUGGY]  throwOnEof(i,  buffer[pos],  buffer[i]));  [CE]  [FE]            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  buffer[pos],  buffer[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  buffer[pos],  buffer[i]));	  throwOnEof(i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	122	None	replace
1184	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	58	None	replace
1185	[BUG]  [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(pos,  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	124	None	replace
1186	[BUG]  [BUGGY]  Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Throwable  m  =  JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));	  Throwable    m    =    JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	131	None	replace
1187	[BUG]  [BUGGY]  throwOnEof(JSException.make(buffer,  pos,  limit[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSException.make(buffer,  pos,  limit[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSException.make(buffer,  pos,  limit[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	23	None	replace
1188	[BUG]  [BUGGY]  throwOnEof(JSException.make(buffer,  pos,  limit  +  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSException.make(buffer,  pos,  limit  +  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSException.make(buffer,  pos,  limit  +  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	23	None	replace
1189	[BUG]  [BUGGY]  try  {  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length);  }  catch(IOException  ioe)  {  throw  onEof(ioe,  ioe,  NON_EXECUTE_PREFIX.length);  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  try  {  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length);  }  catch(IOException  ioe)  {  throw  onEof(ioe,  ioe,  NON_EXECUTE_PREFIX.length);  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	try  {  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length);  }  catch(IOException  ioe)  {  throw  onEof(ioe,  ioe,  NON_EXECUTE_PREFIX.length);  }	  throwOnEof(pos,    NON_EXECUTE_PREFIX,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	86	None	replace
1190	[BUG]  [BUGGY]  try  {  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length);  }  catch(Exception  e)  {  throw  onEof(i,  e,  NON_EXECUTE_PREFIX.length);  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  try  {  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length);  }  catch(Exception  e)  {  throw  onEof(i,  e,  NON_EXECUTE_PREFIX.length);  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	try  {  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length);  }  catch(Exception  e)  {  throw  onEof(i,  e,  NON_EXECUTE_PREFIX.length);  }	  throwOnEof(pos,    NON_EXECUTE_PREFIX,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	86	None	replace
1191	[BUG]  [BUGGY]  try  {  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length);  }  catch(IllegalArgumentException  iae)  {  throw  onEof(iae,  iae,  NON_EXECUTE_PREFIX.length);  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  try  {  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length);  }  catch(IllegalArgumentException  iae)  {  throw  onEof(iae,  iae,  NON_EXECUTE_PREFIX.length);  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	try  {  throwOnEof(buffer,  pos,  NON_EXECUTE_PREFIX.length);  }  catch(IllegalArgumentException  iae)  {  throw  onEof(iae,  iae,  NON_EXECUTE_PREFIX.length);  }	  throwOnEof(pos,    NON_EXECUTE_PREFIX,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	86	None	replace
1192	[BUG]  [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer[pos]]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer[pos]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  NON_EXECUTE_PREFIX,  buffer[pos]]);	  throwOnEof(pos,    NON_EXECUTE_PREFIX,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	69	None	replace
1193	[BUG]  [BUGGY]  throwOnEof(null,  pos,  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(null,  pos,  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(null,  pos,  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(pos,    NON_EXECUTE_PREFIX,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	69	None	replace
1194	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX.length,  bounds);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX.length,  bounds);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX.length,  bounds);	  throwOnEof    String(buffer,    i,    NON_EXECUTE_PREFIX.length,    limit);    	non-compiled	[CE]  	95	None	replace
1195	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  limit,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  i,  limit,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  i,  limit,  buffer[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    buffer[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	126	None	replace
1196	[BUG]  [BUGGY]  allowNonWhitespace(JsonSyntaxException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(JsonSyntaxException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(JsonSyntaxException.make(buffer,  pos,  buffer[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    buffer[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	126	None	replace
1197	[BUG]  [BUGGY]  Dump(buffer,  pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  Dump(buffer,  pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	Dump(buffer,  pos,  NON_EXECUTE_PREFIX);	  dump(buffer,    i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	140	None	replace
1198	[BUG]  [BUGGY]  implements  NON_EXECUTE_PREFIX(i,  pos  +  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  NON_EXECUTE_PREFIX(i,  pos  +  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  NON_EXECUTE_PREFIX(i,  pos  +  NON_EXECUTE_PREFIX.length);	  throwOnEof(i,    pos    +    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	90	None	replace
1199	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  limit  +  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  limit  +  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  limit  +  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	43	None	replace
1200	[BUG]  [BUGGY]  append(buffer,  pos,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  append(buffer,  pos,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	append(buffer,  pos,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	43	None	replace
1201	[BUG]  [BUGGY]  throwOnEof(JSError.make(buffer,  pos,  limit[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSError.make(buffer,  pos,  limit[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSError.make(buffer,  pos,  limit[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSError.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	21	None	replace
1202	[BUG]  [BUGGY]  throwOnEof(JSError.make(buffer,  pos,  limit  +  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSError.make(buffer,  pos,  limit  +  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSError.make(buffer,  pos,  limit  +  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSError.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	21	None	replace
1203	[BUG]  [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX[i],  limit);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX[i],  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  NON_EXECUTE_PREFIX[i],  limit);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	37	None	replace
1204	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  limit[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  limit[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  pos,  limit[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	18	None	replace
1205	[BUG]  [BUGGY]  allowNonWhitespace(buffer[pos  +  i]),  allowNonWhitespace(NON_EXECUTE_PREFIX[i]))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(buffer[pos  +  i]),  allowNonWhitespace(NON_EXECUTE_PREFIX[i]))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(buffer[pos  +  i]),  allowNonWhitespace(NON_EXECUTE_PREFIX[i]))  {  throw  new  IllegalStateException( " ");  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	158	None	replace
1206	[BUG]  [BUGGY]  allowWhitespace(buffer[pos  +  i])  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowWhitespace(buffer[pos  +  i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowWhitespace(buffer[pos  +  i])  {  throw  new  IllegalStateException( " ");  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	158	None	replace
1207	[BUG]  [BUGGY]  allowNonWhitespace(buffer[pos  +  i]),  allowNonWhitespace(NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(buffer[pos  +  i]),  allowNonWhitespace(NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(buffer[pos  +  i]),  allowNonWhitespace(NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	158	None	replace
1208	[BUG]  [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX[i  +  1]]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  NON_EXECUTE_PREFIX[i  +  1]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  NON_EXECUTE_PREFIX[i  +  1]]);	  throwOnEof(i,    pos,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	67	None	replace
1209	[BUG]  [BUGGY]  throwOnEof(i,  pos,  BAD_ON_EXECUTE_PREFIX);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  pos,  BAD_ON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  pos,  BAD_ON_EXECUTE_PREFIX);	  throwOnEof(i,    pos,    limit);    	non-compiled	[CE]  	48	None	replace
1210	[BUG]  [BUGGY]  throwOnEof(i,  BAD_NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(i,  BAD_NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(i,  BAD_NON_EXECUTE_PREFIX,  limit);	  throwOnEof(i,    BAD_ON_EXECUTE_PREFIX);    	non-compiled	[CE]  	162	None	replace
1211	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX.length  +  1,  limit);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX.length  +  1,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX.length  +  1,  limit);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX.length,    limit);    	non-compiled	[CE]  	115	None	replace
1212	[BUG]  [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX.length,  limit  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX.length,  limit  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  pos,  NON_EXECUTE_PREFIX.length,  limit  +  1,  NON_EXECUTE_PREFIX.length);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX.length,    limit);    	non-compiled	[CE]  	115	None	replace
1213	[BUG]  [BUGGY]  append(buffer,  pos,  NON_EXECUTE_PREFIX[i]]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  append(buffer,  pos,  NON_EXECUTE_PREFIX[i]]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	append(buffer,  pos,  NON_EXECUTE_PREFIX[i]]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX[i]]);    	non-compiled	[CE]  	70	None	replace
1214	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos[i],  limit,  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos[i],  limit,  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos[i],  limit,  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    pos[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	29	None	replace
1215	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos[pos],  NON_EXECUTE_PREFIX[pos  +  i]));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos[pos],  NON_EXECUTE_PREFIX[pos  +  i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos[pos],  NON_EXECUTE_PREFIX[pos  +  i]));	  throwOnEof    Reader(buffer,    pos[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	29	None	replace
1216	[BUG]  [BUGGY]  throwOnEof  =  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[pos  +  i]);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  =  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  =  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[pos  +  i]);	  throwOnEof    =    i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	150	None	replace
1217	[BUG]  [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos,  limit[i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos,  limit[i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSYntaxException.make(buffer,  pos,  limit[i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSYntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	128	None	replace
1218	[BUG]  [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos,  limit  +  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JSYntaxException.make(buffer,  pos,  limit  +  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JSYntaxException.make(buffer,  pos,  limit  +  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JSYntaxException.make(buffer,    pos,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	128	None	replace
1219	[BUG]  [BUGGY]  parent!=  null  &&  parent!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  parent!=  null  &&  parent!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	parent!=  null  &&  parent!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	75	None	replace
1220	[BUG]  [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(false)  {  throwOnEof;  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[0];  }	  if(!lenient)    {    throwOnEof;    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	75	None	replace
1221	[BUG]  [BUGGY]  enableNonWhitespace(pos,  NON_EXECUTE_PREFIX);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  enableNonWhitespace(pos,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	enableNonWhitespace(pos,  NON_EXECUTE_PREFIX);	  allowNonWhitespace(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	160	None	replace
1222	[BUG]  [BUGGY]  executePrefix(pos,  i);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  executePrefix(pos,  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	executePrefix(pos,  i);	  executePrefix(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	34	None	replace
1223	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  limit[pos],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  limit[pos],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  limit[pos],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    i[pos],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	31	None	replace
1224	[BUG]  [BUGGY]  throwOnEof(buffer,  pos[pos  +  i],  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos[pos  +  i],  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos[pos  +  i],  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	42	None	replace
1225	[BUG]  [BUGGY]  throwOnEof(buffer[pos  +  i],  limit,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer[pos  +  i],  limit,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer[pos  +  i],  limit,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(i,    buffer[pos    +    i],    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	42	None	replace
1226	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  pos  +  1);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  pos  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  pos  +  1);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX    +    i);    	non-compiled	[CE]  	119	None	replace
1227	[BUG]  [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  pos  +  1);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  pos  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException(i,  NON_EXECUTE_PREFIX,  pos  +  1);	  throwOnEof    ReaderException(i,    NON_EXECUTE_PREFIX    +    i);    	non-compiled	[CE]  	119	None	replace
1228	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]),  value);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]),  value);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]),  value);	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos    +    i]));    	non-compiled	[CE]  	125	None	replace
1229	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]),  message);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]),  message);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]),  message);	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos    +    i]));    	non-compiled	[CE]  	125	None	replace
1230	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]),  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]),  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]),  NON_EXECUTE_PREFIX[i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos    +    i]));    	non-compiled	[CE]  	125	None	replace
1231	[BUG]  [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]),  NON_EXECUTE_PREFIX[pos  +  i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]),  NON_EXECUTE_PREFIX[pos  +  i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]),  NON_EXECUTE_PREFIX[pos  +  i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos    +    i]));    	non-compiled	[CE]  	125	None	replace
1232	[BUG]  [BUGGY]  allowNonWhitespace(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  allowNonWhitespace(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	allowNonWhitespace(JsonSyntaxException.make(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]));	  throwOnEof(JsonSyntaxException.make(buffer,    i,    NON_EXECUTE_PREFIX[pos    +    i]));    	non-compiled	[CE]  	125	None	replace
1233	[BUG]  [BUGGY]  consumePrefix(buffer,  i,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  consumePrefix(buffer,  i,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	consumePrefix(buffer,  i,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	40	None	replace
1234	[BUG]  [BUGGY]  throwOnEof(buffer,  i,  limit[i]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  i,  limit[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  i,  limit[i]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	40	None	replace
1235	[BUG]  [BUGGY]  implements  JsonReader(buffer,  i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  implements  JsonReader(buffer,  i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	implements  JsonReader(buffer,  i,  NON_EXECUTE_PREFIX);	  throwOnEof    Reader(i,    buffer,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	112	None	replace
1236	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  limit  >  NON_EXECUTE_PREFIX[i])  {  return;  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  limit  >  NON_EXECUTE_PREFIX[i])  {  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  limit  >  NON_EXECUTE_PREFIX[i])  {  return;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    return;    }    	non-compiled	[CE]  	106	None	replace
1237	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  limit)  {  return;  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  limit)  {  return;  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  limit)  {  return;  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    return;    }    	non-compiled	[CE]  	106	None	replace
1238	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  limit[i]));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  limit[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  limit[i]));	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	28	None	replace
1239	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  NON_EXECUTE_PREFIX.length: "  +  i);  [CE]  [FE]              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  NON_EXECUTE_PREFIX.length: "  +  i);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length:  NON_EXECUTE_PREFIX.length: "  +  i);	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX.length:   "    +    i);    	non-compiled	[CE]  	64	None	replace
1240	[BUG]  [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  i  +  1);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  i  +  1);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  ReaderException( "Non-EXECUTE_PREFIX.length: "  +  i  +  1);	  throwOnEof    ReaderException(   "Non-EXECUTE_PREFIX.length:   "    +    i);    	non-compiled	[CE]  	64	None	replace
1241	[BUG]  [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]),  pos);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]),  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer[pos],  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i]),  pos);	  throwOnEof    Reader(buffer[pos],    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	26	None	replace
1242	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  for(int  i  =  0;  i  <  limit;  ++i)  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    for(int    i    =    0;    i    <    limit;    ++i)    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	54	None	replace
1243	[BUG]  [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_SIGN);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_SIGN);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  String(buffer,  i,  NON_EXECUTE_PREFIX,  NON_EXECUTE_SIGN);	  throwOnEof    String(buffer,    pos,    NON_EXECUTE_PREFIX,    i);    	non-compiled	[CE]  	113	None	replace
1244	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i],  NON_EXECUTE_PREFIX[i]));  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i],  NON_EXECUTE_PREFIX[i]));  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX[pos  +  i],  NON_EXECUTE_PREFIX[i]));	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX[i],    NON_EXECUTE_PREFIX[i]));    	non-compiled	[CE]  	98	None	replace
1245	[BUG]  [BUGGY]  dump(buffer,  pos);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer,  pos);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer,  pos);	  dump(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	36	None	replace
1246	[BUG]  [BUGGY]  dump(buffer,  pos  +  NON_EXECUTE_PREFIX);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer,  pos  +  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer,  pos  +  NON_EXECUTE_PREFIX);	  dump(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	36	None	replace
1247	[BUG]  [BUGGY]  dump(buffer,  i  +  1,  NON_EXECUTE_PREFIX);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer,  i  +  1,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer,  i  +  1,  NON_EXECUTE_PREFIX);	  dump(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	36	None	replace
1248	[BUG]  [BUGGY]  dump(buffer,  i  +  0,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer,  i  +  0,  NON_EXECUTE_PREFIX.length);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer,  i  +  0,  NON_EXECUTE_PREFIX.length);	  dump(i,    NON_EXECUTE_PREFIX);    	non-compiled	[CE]  	36	None	replace
1249	[BUG]  [BUGGY]  append(buffer,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  append(buffer,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	append(buffer,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX.length,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	41	None	replace
1250	[BUG]  [BUGGY]  dump(buffer,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer,  pos,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX.length,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	41	None	replace
1251	[BUG]  [BUGGY]  dump(buffer,  i,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  dump(buffer,  i,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	dump(buffer,  i,  NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX[i]);	  throwOnEof(buffer,    i,    NON_EXECUTE_PREFIX.length,    NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	41	None	replace
1252	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  i,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  i,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  i,  NON_EXECUTE_PREFIX,  limit);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	61	None	replace
1253	[BUG]  [BUGGY]  throwOnEof(buffer,  pos,  i,  NON_EXECUTE_PREFIX);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof(buffer,  pos,  i,  NON_EXECUTE_PREFIX);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof(buffer,  pos,  i,  NON_EXECUTE_PREFIX);	  throwOnEof(buffer,    pos,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	61	None	replace
1254	[BUG]  [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[i];  }	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	56	None	replace
1255	[BUG]  [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	bucket[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  else  {  buffer[pos  +  i]  =  NON_EXECUTE_PREFIX[	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    buffer[pos    +    i]    =    NON_EXECUTE_PREFIX[i];    }    	non-compiled	[CE]  	56	None	replace
1256	[BUG]  [BUGGY]  try  {  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  try  {  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	try  {  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX,  limit);	  throwOnEof    Reader(buffer,    i,    NON_EXECUTE_PREFIX,    limit);    	non-compiled	[CE]  	6	None	replace
1257	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  pos,  NON_EXECUTE_PREFIX[pos  +  i]);	  throwOnEof    Reader(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	47	None	replace
1258	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  NON_EXECUTE_PREFIX,  buffer[pos  +  i]);	  throwOnEof    Reader(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	47	None	replace
1259	[BUG]  [BUGGY]  throwOnEof  Reader(buffer,  i,  buffer[pos  +  i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]        nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {      [BUGGY]  throwOnEof  Reader(buffer,  i,  buffer[pos  +  i]);  [BUGGY]      }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.20701966780270628	1584	1585	3	replace	throwOnEof  Reader(buffer,  i,  buffer[pos  +  i]);	  throwOnEof    Reader(i,    NON_EXECUTE_PREFIX,    buffer[pos    +    i]);    	non-compiled	[CE]  	47	None	replace
