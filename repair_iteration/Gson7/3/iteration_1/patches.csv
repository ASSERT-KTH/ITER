bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	6	None	replace
2	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	6	None	replace
3	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos--;  [CE]  class  expected  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos--;  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  pos--;	  if(c    ==    'n'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  class  expected	14	None	replace
4	[BUG]  [BUGGY]  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [CE]  class  expected  [FE]                JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {	  if(c    ==    'n'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  class  expected	14	None	replace
5	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [CE]  not  a  statement  [FE]                  JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {	  if(c    ==    'n'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  not  a  statement	14	None	replace
6	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  class  expected  [FE]        JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	1	None	replace
7	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  class  expected  [FE]          JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	1	None	replace
8	[BUG]  [BUGGY]  'try'  without  'catch'  or  'finally'  [CE]  unclosed  character  literal  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  'try'  without  'catch'  or  'finally'  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	'try'  without  'catch'  or  'finally'	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  unclosed  character  literal	1	None	replace
9	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  class  expected  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	1	None	replace
10	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  [CE]  class  expected  [FE]                JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	1	None	replace
11	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                  JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	1	None	replace
12	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  ';'  expected  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
13	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  type  [FE]                JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
14	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  type  [FE]                  JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
15	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  type  [FE]                    JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
16	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  class  expected  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  class  expected	10	None	replace
17	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  type  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
18	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  class  expected  [FE]                JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  class  expected	10	None	replace
19	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  class  expected  [FE]                  JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  class  expected	10	None	replace
20	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  'else'  without  'if'  [FE]                    JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
21	[BUG]  [BUGGY]  if(c  ==  '.')  {  [CE]  class  expected  [FE]        JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  '.')  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	11	None	replace
22	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  class  expected  [FE]          JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	11	None	replace
23	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  'else'  without  'if'  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
24	[BUG]  [BUGGY]  if(c!=  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  class  expected  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c!=  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	13	None	replace
25	[BUG]  [BUGGY]  if(c  ==  ':')  {  pos--;  }  [CE]  class  expected  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  ':')  {  pos--;  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':')  {  pos--;  }	  if(c    ==    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	13	None	replace
26	[BUG]  [BUGGY]  if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  class  expected  [FE]                JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	13	None	replace
27	[BUG]  [BUGGY]  if(c  ==  ':')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [CE]  class  expected  [FE]                  JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  ':')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':')  {  pos--;  }  else  if(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	13	None	replace
28	[BUG]  [BUGGY]  int  pos--;  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  int  pos--;  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  	2	None	replace
29	[BUG]  [BUGGY]  long  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  long  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	long  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  	2	None	replace
30	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  	2	None	replace
31	[BUG]  [BUGGY]  Integer  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  Integer  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  	2	None	replace
32	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  	2	None	replace
33	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  [CE]  illegal  start  of  type  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }	  pos--;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
34	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name ");  }  [CE]  illegal  start  of  type  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name ");  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name ");  }	  pos--;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
35	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name ");  }  [CE]  illegal  start  of  type  [FE]                JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name ");  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name ");  }	  pos--;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
36	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  [CE]  class  expected  [FE]                  JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }	  pos--;    	non-compiled	[CE]  class  expected	3	None	replace
37	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  class  expected  [FE]          JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  class  expected	9	None	replace
38	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  class  expected  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  class  expected	9	None	replace
39	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  class  expected  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  class  expected	9	None	replace
40	[BUG]  [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  class  expected  [FE]                JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  class  expected	9	None	replace
41	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  class  expected  [FE]          JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'e'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    'n'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	12	None	replace
42	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  class  expected  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  '.'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    'n'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	12	None	replace
43	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  class  expected  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    'n'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	12	None	replace
44	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  'else'  without  'if'  [FE]                JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
45	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
46	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
47	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                      JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	5	None	replace
48	[BUG]  [BUGGY]  int  c  =  nextNonWhitespace(true);  [CE]  class  expected  [FE]                    JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  int  c  =  nextNonWhitespace(true);  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  c  =  nextNonWhitespace(true);	      	non-compiled	[CE]  class  expected	7	None	replace
49	[BUG]  [BUGGY]  int  c  =  nextNonWhitespace(false);  [CE]  class  expected  [FE]                      JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  int  c  =  nextNonWhitespace(false);  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  c  =  nextNonWhitespace(false);	      	non-compiled	[CE]  class  expected	7	None	replace
50	[BUG]  [BUGGY]  Integer  c  =  nextNonWhitespace(true);  [CE]  class  expected  [FE]                        JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  Integer  c  =  nextNonWhitespace(true);  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  c  =  nextNonWhitespace(true);	      	non-compiled	[CE]  class  expected	7	None	replace
51	[BUG]  [BUGGY]  Integer  c  =  nextNonWhitespace(false);  [CE]  'else'  without  'if'  [FE]                          JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  Integer  c  =  nextNonWhitespace(false);  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  c  =  nextNonWhitespace(false);	      	non-compiled	[CE]  'else'  without  'if'	7	None	replace
52	[BUG]  [BUGGY]  String  c  =  nextNonWhitespace(true);  [CE]  class  expected  [FE]                            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  String  c  =  nextNonWhitespace(true);  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	String  c  =  nextNonWhitespace(true);	      	non-compiled	[CE]  class  expected	7	None	replace
53	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  'else'  without  'if'  [FE]        JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
54	[BUG]  [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  'else'  without  'if'  [FE]          JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
55	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  'else'  without  'if'  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
56	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  'else'  without  'if'  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
57	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  'else'  without  'if'  [FE]                JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
58	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  'else'  without  'if'  [FE]          JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
59	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  'else'  without  'if'  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
60	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
61	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
62	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
63	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  [CE]  illegal  start  of  expression  [FE]        JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
64	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
65	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
66	[BUG]  [BUGGY]  if(c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  empty  character  literal  [FE]          JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    'n'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  empty  character  literal	12	None	replace
67	[BUG]  [BUGGY]  if(c  ==  'n')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]          JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  'n')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
68	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
69	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLenient((  char)c))  {  [CE]  ';'  expected  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLenient((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLenient((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
70	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
71	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
72	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
73	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
74	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    'n'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
75	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'E')  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'e'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'E')  {	  if(c    ==    'n'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
76	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_UNQUOTED_NAME;  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_UNQUOTED_NAME;  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_UNQUOTED_NAME;	  if(c    ==    'n'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
77	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]        JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
78	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]          JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
79	[BUG]  [BUGGY]  char  c  =  nextNonWhitespace(true);  [CE]  'else'  without  'if'  [FE]                    JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  char  c  =  nextNonWhitespace(true);  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	char  c  =  nextNonWhitespace(true);	      	non-compiled	[CE]  'else'  without  'if'	7	None	replace
80	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
81	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
82	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
83	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
84	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  [CE]  class  expected  [FE]                      JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(isLiteral((  char)c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  class  expected	4	None	replace
85	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name ");  }  [CE]  class  expected  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name ");  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name ");  }	  pos--;    	non-compiled	[CE]  class  expected	3	None	replace
86	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  pos--;  }  [CE]  class  expected  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  pos--;  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING)  {  pos--;  }	  pos--;    	non-compiled	[CE]  class  expected	3	None	replace
87	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]        JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
88	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	13	None	replace
89	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  empty  character  literal  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  ':'  ||  c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  empty  character  literal	13	None	replace
90	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  default  [FE]                JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  ':'  ||  c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	13	None	replace
91	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  orphaned  default  [FE]                  JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(isLiteral((  char)c)  ||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c)  ||  peeked  ==  PEEKED_BUFFERED)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  orphaned  default	6	None	replace
92	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)  ||  peeked  >=  PEEKED_BUFFERED)  {  [CE]  class  expected  [FE]                    JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)  ||  peeked  >=  PEEKED_BUFFERED)  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)  ||  peeked  >=  PEEKED_BUFFERED)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  class  expected	6	None	replace
93	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]          JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  'n'  ||  c  >  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    'n'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
94	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  orphaned  default  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'e'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    'n'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	12	None	replace
95	[BUG]  [BUGGY]  if(c  <  =  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  <  =  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
96	[BUG]  [BUGGY]  if(c  <  =  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  <  =  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
97	[BUG]  [BUGGY]  if(c  ==  ':'  <  =  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  ':'  <  =  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  <  =  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
98	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  orphaned  default  [FE]                  JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	13	None	replace
99	[BUG]  [BUGGY]  if(c  ==  ':'  <  =  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  ':'  <  =  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  <  =  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
100	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  default  [FE]        JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	8	None	replace
101	[BUG]  [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  orphaned  default  [FE]          JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	8	None	replace
102	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [CE]  orphaned  default  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {	  if(c    ==    'n'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  orphaned  default	14	None	replace
103	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED)  {  [CE]  ';'  expected  [FE]          JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED)  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED)  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
104	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  class  expected  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  class  expected	10	None	replace
105	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  class  expected  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  class  expected	10	None	replace
106	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  class  expected  [FE]        JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	11	None	replace
107	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  class  expected  [FE]          JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  '.')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	11	None	replace
108	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  class  expected  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	11	None	replace
109	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  class  expected  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	11	None	replace
110	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  orphaned  default  [FE]                JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	11	None	replace
111	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  class  expected  [FE]                  JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  '.')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	11	None	replace
112	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  class  expected  [FE]                JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	5	None	replace
113	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  class  expected  [FE]                  JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	5	None	replace
114	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  class  expected  [FE]                    JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	5	None	replace
115	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  class  expected  [FE]                      JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	5	None	replace
116	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type ");  }  [CE]  orphaned  default  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type ");  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type ");  }	  pos--;    	non-compiled	[CE]  orphaned  default	3	None	replace
117	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  orphaned  default  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }	  pos--;    	non-compiled	[CE]  orphaned  default	3	None	replace
118	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  class  expected  [FE]        JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	1	None	replace
119	[BUG]  [BUGGY]  if(c  >=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  class  expected  [FE]          JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  >=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	1	None	replace
120	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)  [CE]  class  expected  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	1	None	replace
121	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  class  expected  [FE]          JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  class  expected	9	None	replace
122	[BUG]  [BUGGY]  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  class  expected  [FE]            JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  class  expected	9	None	replace
123	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  class  expected  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  class  expected	9	None	replace
124	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  class  expected  [FE]              JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  class  expected	4	None	replace
125	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  orphaned  default  [FE]                JsonSyntaxException    [CONTEXT]    checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();    [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]    if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  orphaned  default	4	None	replace
