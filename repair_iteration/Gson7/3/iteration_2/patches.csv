bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  class  expected  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  class  expected	122	None	replace
2	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [CE]  orphaned  default  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  orphaned  default	122	None	replace
3	[BUG]  [BUGGY]  if(c  ==  '.')  {  pos--;  }  [CE]  orphaned  default  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  pos--;  }	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  orphaned  default	122	None	replace
4	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  [CE]  class  expected  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  class  expected	121	None	replace
5	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_SIGN  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  class  expected  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_SIGN  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_EXP_SIGN  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  class  expected	121	None	replace
6	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  class  expected  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  class  expected	121	None	replace
7	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [CE]  orphaned  default  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  orphaned  default	121	None	replace
8	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  orphaned  default  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    ':'    <    =    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	99	None	replace
9	[BUG]  [BUGGY]  if(c  <  =  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    ':'    <    =    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
10	[BUG]  [BUGGY]  if(c  ==  '-')  {  pos--;  }  [CE]  orphaned  default  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '-')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '-')  {  pos--;  }	  if(c    ==    ':'    <    =    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	99	None	replace
11	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  [CE]  class  expected  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	112	None	replace
12	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)  [CE]  class  expected  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	112	None	replace
13	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)  [CE]  class  expected  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	112	None	replace
14	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  [CE]  class  expected  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	112	None	replace
15	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  [CE]  orphaned  default  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	112	None	replace
16	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)&&  peeked!=  PEEKED_BUFFERED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)&&  peeked!=  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)&&  peeked!=  PEEKED_BUFFERED)  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked!=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	30	None	replace
17	[BUG]  [BUGGY]  if(c!=  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  class  expected  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	78	None	replace
18	[BUG]  [BUGGY]  if(c  >=  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  class  expected  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	78	None	replace
19	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  class  expected  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	78	None	replace
20	[BUG]  [BUGGY]  String  c  =  nextNonWhitespace(false);  [CE]  orphaned  default  [FE]                                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  String  c  =  nextNonWhitespace(false);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	String  c  =  nextNonWhitespace(false);	  String    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  orphaned  default	52	None	replace
21	[BUG]  [BUGGY]  String  c  =  nextNonWhitespace(true,  false);  [CE]  orphaned  default  [FE]                                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  String  c  =  nextNonWhitespace(true,  false);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	String  c  =  nextNonWhitespace(true,  false);	  String    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  orphaned  default	52	None	replace
22	[BUG]  [BUGGY]  String  c  =  nextNonWhitespace(true,  true);  [CE]  orphaned  default  [FE]                                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  String  c  =  nextNonWhitespace(true,  true);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	String  c  =  nextNonWhitespace(true,  true);	  String    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  orphaned  default	52	None	replace
23	[BUG]  [BUGGY]  if(c  ==  ':'  &&  c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  default  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  &&  c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  &&  c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    'n')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	90	None	replace
24	[BUG]  [BUGGY]  if(c!=  ':'  ||  c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  class  expected  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  ':'  ||  c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  ':'  ||  c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    'n')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	90	None	replace
25	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  class  expected  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    'n')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	90	None	replace
26	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  class  expected  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    'n')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  class  expected	90	None	replace
27	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  [CE]  class  expected  [FE]            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  '+')  {	  if(c    ==    '.')    {    	non-compiled	[CE]  class  expected	21	None	replace
28	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  [CE]  class  expected  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ':')  {	  if(c    ==    '.')    {    	non-compiled	[CE]  class  expected	21	None	replace
29	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  [CE]  class  expected  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  '-')  {	  if(c    ==    '.')    {    	non-compiled	[CE]  class  expected	21	None	replace
30	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  =='<  ')  {  [CE]  unclosed  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  =='<  ')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  =='<  ')  {	  if(c    ==    '.')    {    	non-compiled	[CE]  unclosed  character  literal	21	None	replace
31	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  [CE]  class  expected  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {	  if(c    ==    '.')    {    	non-compiled	[CE]  class  expected	21	None	replace
32	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  [CE]  orphaned  default  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	113	None	replace
33	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)  [CE]  orphaned  default  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	113	None	replace
34	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)  [CE]  orphaned  default  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	113	None	replace
35	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  orphaned  default  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	113	None	replace
36	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  orphaned  default  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	113	None	replace
37	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  orphaned  default  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	56	None	replace
38	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  orphaned  default  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	56	None	replace
39	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  orphaned  default  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	56	None	replace
40	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  orphaned  default  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c!=    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  orphaned  default	40	None	replace
41	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  orphaned  default  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    return    PEEKED_UNQUOTED_NAME;    }    else    if(peekStack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  orphaned  default	110	None	replace
42	[BUG]  [BUGGY]  if(c!=  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  orphaned  default  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    return    PEEKED_UNQUOTED_NAME;    }    else    if(peekStack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  orphaned  default	110	None	replace
43	[BUG]  [BUGGY]  parent  ==  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  parent  ==  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	parent  ==  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    return    PEEKED_UNQUOTED_NAME;    }    else    if(peekStack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
44	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  PEEKED_SINGLE_QUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  orphaned  default  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  PEEKED_SINGLE_QUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  PEEKED_SINGLE_QUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    return    PEEKED_UNQUOTED_NAME;    }    else    if(peekStack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  orphaned  default	110	None	replace
45	[BUG]  [BUGGY]  short  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  short  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	short  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  long    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	29	None	replace
46	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c))    {    pos--;    return    peeked    =    PEEKED_UNQUOTED_NAME;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  unclosed  string  literal	84	None	replace
47	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [CE]  class  expected  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }	  if(isLiteral((    char)c))    {    pos--;    return    peeked    =    PEEKED_UNQUOTED_NAME;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  class  expected	84	None	replace
48	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c))    {    pos--;    return    peeked    =    PEEKED_UNQUOTED_NAME;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  unclosed  string  literal	84	None	replace
49	[BUG]  [BUGGY]  if(c  =='}  ')  {  if(isLiteral((  char)  c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [CE]  unclosed  character  literal  [FE]                                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  =='}  ')  {  if(isLiteral((  char)  c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  =='}  ')  {  if(isLiteral((  char)  c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }	  if(isLiteral((    char)c))    {    pos--;    return    peeked    =    PEEKED_UNQUOTED_NAME;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  unclosed  character  literal	84	None	replace
50	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [CE]  class  expected  [FE]                                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }	  if(isLiteral((    char)c))    {    pos--;    return    peeked    =    PEEKED_UNQUOTED_NAME;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  class  expected	84	None	replace
51	[BUG]  [BUGGY]  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  [CE]  class  expected  [FE]                                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;	  if(isLiteral((    char)c))    {    pos--;    return    peeked    =    PEEKED_UNQUOTED_NAME;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  class  expected	84	None	replace
52	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  'else'  without  'if'  [FE]                                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c))    {    pos--;    return    peeked    =    PEEKED_UNQUOTED_NAME;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  'else'  without  'if'	84	None	replace
53	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  [CE]  'else'  without  'if'  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'e'  ||  c  ==  'E')  {	  if(c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  'else'  without  'if'	74	None	replace
54	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  [CE]  'else'  without  'if'  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  'n'  ||  c  ==  'r')  {	  if(c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  'else'  without  'if'	74	None	replace
55	[BUG]  [BUGGY]  if(c  ==  'N'  ||  c  ==  'r')  {  [CE]  'else'  without  'if'  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'N'  ||  c  ==  'r')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'N'  ||  c  ==  'r')  {	  if(c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  'else'  without  'if'	74	None	replace
56	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c!=  'r')  {  [CE]  'else'  without  'if'  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c!=  'r')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c!=  'r')  {	  if(c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  'else'  without  'if'	74	None	replace
57	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_SIGN  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  'else'  without  'if'  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_SIGN  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_EXP_SIGN  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    }    	non-compiled	[CE]  'else'  without  'if'	123	None	replace
58	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  'else'  without  'if'  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    }    	non-compiled	[CE]  'else'  without  'if'	123	None	replace
59	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  class  expected  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    }    	non-compiled	[CE]  class  expected	123	None	replace
60	[BUG]  [BUGGY]  if(c  <  NUMBER_CHAR_DECIMAL  ||  c  >  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  'else'  without  'if'  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  NUMBER_CHAR_DECIMAL  ||  c  >  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  NUMBER_CHAR_DECIMAL  ||  c  >  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    }    	non-compiled	[CE]  'else'  without  'if'	123	None	replace
61	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  'else'  without  'if'  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  'else'  without  'if'	70	None	replace
62	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  'else'  without  'if'  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  'else'  without  'if'	70	None	replace
63	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFER  [CE]  'else'  without  'if'  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFER  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFER	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  'else'  without  'if'	70	None	replace
64	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFER  [CE]  'else'  without  'if'  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFER  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFER	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  'else'  without  'if'	70	None	replace
65	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  'else'  without  'if'  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  'else'  without  'if'	70	None	replace
66	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(c!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
67	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {	  if(c!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
68	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {	  if(c!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
69	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING)  {	  if(c!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
70	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {	  if(c!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
71	[BUG]  [BUGGY]  if(c  ==  'E'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'E'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'E'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    'e'    ||    c    ==    'E')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
72	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '-'  ||  c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    'e'    ||    c    ==    'E')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
73	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'e'  ||  c  ==  'E')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    'e'    ||    c    ==    'E')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	41	None	replace
74	[BUG]  [BUGGY]  if(c  >=  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    <    =    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
75	[BUG]  [BUGGY]  if(c  <  'n'  ||  c  >  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  'n'  ||  c  >  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  'n'  ||  c  >  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    <    =    'n'    ||    c    >    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
76	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  <  =  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  'n'  ||  c  <  =  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  'n'  ||  c  <  =  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    <    =    'n'    ||    c    >    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
77	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  'n'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  'n'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    <    =    'n'    ||    c    >    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
78	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >=  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  'n'  ||  c  >=  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  'n'  ||  c  >=  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    <    =    'n'    ||    c    >    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
79	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  'n'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  'n'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    <    =    'n'    ||    c    >    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
80	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  	17	None	replace
81	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  	17	None	replace
82	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
83	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
84	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  class  expected  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  class  expected	34	None	replace
85	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  class  expected  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  class  expected	34	None	replace
86	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  class  expected  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  class  expected	34	None	replace
87	[BUG]  [BUGGY]  Integer  c  =  nextNonWhitespace(true,  PEEKED_DOUBLE_QUOTED_NAME);  [CE]  class  expected  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  Integer  c  =  nextNonWhitespace(true,  PEEKED_DOUBLE_QUOTED_NAME);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  c  =  nextNonWhitespace(true,  PEEKED_DOUBLE_QUOTED_NAME);	  Integer    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  class  expected	50	None	replace
88	[BUG]  [BUGGY]  Integer  c  =  nextNonWhitespace(true,  stack.length);  [CE]  class  expected  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  Integer  c  =  nextNonWhitespace(true,  stack.length);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  c  =  nextNonWhitespace(true,  stack.length);	  Integer    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  class  expected	50	None	replace
89	[BUG]  [BUGGY]  Integer  c  =  nextNonWhitespace(true,  PEEKED_SINGLE_QUOTED_NAME);  [CE]  class  expected  [FE]                                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  Integer  c  =  nextNonWhitespace(true,  PEEKED_SINGLE_QUOTED_NAME);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  c  =  nextNonWhitespace(true,  PEEKED_SINGLE_QUOTED_NAME);	  Integer    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  class  expected	50	None	replace
90	[BUG]  [BUGGY]  int  c  =  nextNonWhitespace(false,  stack.length);  [CE]  class  expected  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  c  =  nextNonWhitespace(false,  stack.length);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  c  =  nextNonWhitespace(false,  stack.length);	  int    c    =    nextNonWhitespace(false);    	non-compiled	[CE]  class  expected	49	None	replace
91	[BUG]  [BUGGY]  int  c  =  nextNonWhitespace(false,  peekStack);  [CE]  class  expected  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  c  =  nextNonWhitespace(false,  peekStack);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  c  =  nextNonWhitespace(false,  peekStack);	  int    c    =    nextNonWhitespace(false);    	non-compiled	[CE]  class  expected	49	None	replace
92	[BUG]  [BUGGY]  int  c  =  nextNonWhitespace(false,  stack);  [CE]  'else'  without  'if'  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  c  =  nextNonWhitespace(false,  stack);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  c  =  nextNonWhitespace(false,  stack);	  int    c    =    nextNonWhitespace(false);    	non-compiled	[CE]  'else'  without  'if'	49	None	replace
93	[BUG]  [BUGGY]  int  c  =  nextNonWhitespace(false,  true);  [CE]  class  expected  [FE]                                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  c  =  nextNonWhitespace(false,  true);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  c  =  nextNonWhitespace(false,  true);	  int    c    =    nextNonWhitespace(false);    	non-compiled	[CE]  class  expected	49	None	replace
94	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  'else'  without  'if'  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  'else'  without  'if'	64	None	replace
95	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  [CE]  class  expected  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    }    	non-compiled	[CE]  class  expected	36	None	replace
96	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  [CE]  class  expected  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    }    	non-compiled	[CE]  class  expected	36	None	replace
97	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  [CE]  'else'  without  'if'  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    }    	non-compiled	[CE]  'else'  without  'if'	36	None	replace
98	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  }  [CE]  class  expected  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    }    	non-compiled	[CE]  class  expected	36	None	replace
99	[BUG]  [BUGGY]  if(c!=  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  'else'  without  'if'  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    <    =    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	96	None	replace
100	[BUG]  [BUGGY]  if(c  >=  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  'else'  without  'if'  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    <    =    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	96	None	replace
101	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_DIGIT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
102	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  peeked--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  peeked--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  peeked--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
103	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  peeked--;  }  [CE]  'else'  without  'if'  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  peeked--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  peeked--;  }	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	111	None	replace
104	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  PEEKED_BUFFERED;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  PEEKED_BUFFERED;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  PEEKED_BUFFERED;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
105	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  throw  syntaxError( "Expected  name  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  throw  syntaxError( "Expected  name	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  unclosed  string  literal	111	None	replace
106	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  [CE]  ';'  expected  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	111	None	replace
107	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)  [CE]  illegal  start  of  expression  [FE]            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
108	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
109	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
110	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
111	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    }    	non-compiled	[CE]  unclosed  string  literal	81	None	replace
112	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }  [CE]  'else'  without  'if'  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    }    	non-compiled	[CE]  'else'  without  'if'	81	None	replace
113	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
114	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  [CE]  'else'  without  'if'  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    }    	non-compiled	[CE]  'else'  without  'if'	81	None	replace
115	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    }    	non-compiled	[CE]  unclosed  string  literal	81	None	replace
116	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
117	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
118	[BUG]  [BUGGY]  if(c  >=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
119	[BUG]  [BUGGY]  if(c  >=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DIGIT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
120	[BUG]  [BUGGY]  Integer  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLenient((  char)c))  {  [CE]  ';'  expected  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  Integer  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLenient((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLenient((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLenient((    char)c))    {    	non-compiled	[CE]  ';'  expected	69	None	replace
121	[BUG]  [BUGGY]  int  pos  =  0;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLenient((  char)c))  {  [CE]  'else'  without  'if'  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos  =  0;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLenient((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos  =  0;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLenient((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLenient((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	69	None	replace
122	[BUG]  [BUGGY]  char  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLenient((  char)c))  {  [CE]  ';'  expected  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  char  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLenient((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	char  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLenient((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLenient((    char)c))    {    	non-compiled	[CE]  ';'  expected	69	None	replace
123	[BUG]  [BUGGY]  Integer  c  =  nextNonWhitespace(false,  PEEKED_DOUBLE_QUOTED_NAME);  [CE]  'else'  without  'if'  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  Integer  c  =  nextNonWhitespace(false,  PEEKED_DOUBLE_QUOTED_NAME);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  c  =  nextNonWhitespace(false,  PEEKED_DOUBLE_QUOTED_NAME);	  Integer    c    =    nextNonWhitespace(false);    	non-compiled	[CE]  'else'  without  'if'	51	None	replace
124	[BUG]  [BUGGY]  Integer  c  =  nextNonWhitespace(false,  peekStack);  [CE]  'else'  without  'if'  [FE]                                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  Integer  c  =  nextNonWhitespace(false,  peekStack);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  c  =  nextNonWhitespace(false,  peekStack);	  Integer    c    =    nextNonWhitespace(false);    	non-compiled	[CE]  'else'  without  'if'	51	None	replace
125	[BUG]  [BUGGY]  Integer  c  =  nextNonWhitespace(false,  PEEKED_BUFFERED);  [CE]  'else'  without  'if'  [FE]                                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  Integer  c  =  nextNonWhitespace(false,  PEEKED_BUFFERED);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  c  =  nextNonWhitespace(false,  PEEKED_BUFFERED);	  Integer    c    =    nextNonWhitespace(false);    	non-compiled	[CE]  'else'  without  'if'	51	None	replace
126	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  'else'  without  'if'  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  'else'  without  'if'	35	None	replace
127	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  'else'  without  'if'  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  'else'  without  'if'	35	None	replace
128	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)  [CE]  'else'  without  'if'  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  'else'  without  'if'	104	None	replace
129	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [CE]  'else'  without  'if'  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  'else'  without  'if'	104	None	replace
130	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  [CE]  'else'  without  'if'  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  'else'  without  'if'	104	None	replace
131	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  [CE]  'else'  without  'if'  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	114	None	replace
132	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)  [CE]  'else'  without  'if'  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	114	None	replace
133	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  [CE]  'else'  without  'if'  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	114	None	replace
134	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  [CE]  'else'  without  'if'  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	114	None	replace
135	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  [CE]  'else'  without  'if'  [FE]                                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	114	None	replace
136	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)  [CE]  'else'  without  'if'  [FE]                                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	114	None	replace
137	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  [CE]  'else'  without  'if'  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'a'    ||    c    ==    'z')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  'else'  without  'if'	102	None	replace
138	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  [CE]  'else'  without  'if'  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'a'    ||    c    ==    'z')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  'else'  without  'if'	102	None	replace
139	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  [CE]  'else'  without  'if'  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'a'    ||    c    ==    'z')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  'else'  without  'if'	102	None	replace
140	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c!=  'a'  ||  c  ==  'z')  {  [CE]  'else'  without  'if'  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c!=  'a'  ||  c  ==  'z')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c!=  'a'  ||  c  ==  'z')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'a'    ||    c    ==    'z')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  'else'  without  'if'	102	None	replace
141	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c!=  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  [CE]  'else'  without  'if'  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c!=  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c!=  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'a'    ||    c    ==    'z')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  'else'  without  'if'	102	None	replace
142	[BUG]  [BUGGY]  int  c  =  nextNonWhitespace(true,  stack.length);  [CE]  class  expected  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  c  =  nextNonWhitespace(true,  stack.length);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  c  =  nextNonWhitespace(true,  stack.length);	  int    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  class  expected	48	None	replace
143	[BUG]  [BUGGY]  int  c  =  nextNonWhitespace(true,  false);  [CE]  'else'  without  'if'  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  c  =  nextNonWhitespace(true,  false);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  c  =  nextNonWhitespace(true,  false);	  int    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  'else'  without  'if'	48	None	replace
144	[BUG]  [BUGGY]  int  c  =  stack[stackSize  -  1];  [CE]  'else'  without  'if'  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  c  =  stack[stackSize  -  1];  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  c  =  stack[stackSize  -  1];	  int    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  'else'  without  'if'	48	None	replace
145	[BUG]  [BUGGY]  int  c  =  nextNonWhitespace(true,  true);  [CE]  class  expected  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  c  =  nextNonWhitespace(true,  true);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  c  =  nextNonWhitespace(true,  true);	  int    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  class  expected	48	None	replace
146	[BUG]  [BUGGY]  if(peekStack  >=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  'else'  without  'if'  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  >=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  >=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    >=    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	119	None	replace
147	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  class  expected  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  class  expected	117	None	replace
148	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  class  expected  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  class  expected	117	None	replace
149	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  class  expected  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  class  expected	117	None	replace
150	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  class  expected  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  class  expected	117	None	replace
151	[BUG]  [BUGGY]  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  'else'  without  'if'  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
152	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  peeked--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  'else'  without  'if'  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  peeked--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  peeked--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	107	None	replace
153	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
154	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  PEEKED_BUFFERED;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  'else'  without  'if'  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  PEEKED_BUFFERED;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  PEEKED_BUFFERED;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	107	None	replace
155	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  ';'  expected  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
156	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  class  expected  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c!=  JsonScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  class  expected	14	None	replace
157	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JSONScope.NONEMPTY_OBJECT)  {  [CE]  class  expected  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JSONScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JSONScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  class  expected	14	None	replace
158	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JSONScope.NONEMPTY_OBJECT)  {  [CE]  ';'  expected  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JSONScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JSONScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
159	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(true);  [CE]  'else'  without  'if'  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos  =  nextNonWhitespace(true);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos  =  nextNonWhitespace(true);	  int    pos--;    	non-compiled	[CE]  'else'  without  'if'	28	None	replace
160	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(false);  [CE]  class  expected  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos  =  nextNonWhitespace(false);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos  =  nextNonWhitespace(false);	  int    pos--;    	non-compiled	[CE]  class  expected	28	None	replace
161	[BUG]  [BUGGY]  int  pos  =  0;  [CE]  'else'  without  'if'  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos  =  0;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos  =  0;	  int    pos--;    	non-compiled	[CE]  'else'  without  'if'	28	None	replace
162	[BUG]  [BUGGY]  int  pos  =  stackSize  -  1;  [CE]  class  expected  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos  =  stackSize  -  1;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos  =  stackSize  -  1;	  int    pos--;    	non-compiled	[CE]  class  expected	28	None	replace
163	[BUG]  [BUGGY]  int  pos  =  1;  [CE]  class  expected  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos  =  1;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos  =  1;	  int    pos--;    	non-compiled	[CE]  class  expected	28	None	replace
164	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(null);  [CE]  class  expected  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos  =  nextNonWhitespace(null);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos  =  nextNonWhitespace(null);	  int    pos--;    	non-compiled	[CE]  class  expected	28	None	replace
165	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  [CE]  'else'  without  'if'  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_BLOCK)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	115	None	replace
166	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)  [CE]  'else'  without  'if'  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_BLOCK)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	115	None	replace
167	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  [CE]  'else'  without  'if'  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_BLOCK)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	115	None	replace
168	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  [CE]  illegal  start  of  expression  [FE]                                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_BLOCK)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
169	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  [CE]  'else'  without  'if'  [FE]                                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_BLOCK)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	115	None	replace
170	[BUG]  [BUGGY]  if(c  ==  ':'  &&  c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  &&  c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  &&  c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    '')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  empty  character  literal	89	None	replace
171	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    '')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  empty  character  literal	89	None	replace
172	[BUG]  [BUGGY]  if(c!=  ':'  ||  c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  empty  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  ':'  ||  c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  ':'  ||  c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    '')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  empty  character  literal	89	None	replace
173	[BUG]  [BUGGY]  Integer  pos--;  [CE]  ';'  expected  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  Integer  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  pos--;	  Integer    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	31	None	replace
174	[BUG]  [BUGGY]  Integer  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  Integer  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  Integer    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	31	None	replace
175	[BUG]  [BUGGY]  Integer  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [CE]  ';'  expected  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  Integer  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.	  Integer    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	31	None	replace
176	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_SIGN  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_SIGN  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_EXP_SIGN  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
177	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
178	[BUG]  [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
179	[BUG]  [BUGGY]  if(c  <  NUMBER_CHAR_DECIMAL  ||  c  >  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  NUMBER_CHAR_DECIMAL  ||  c  >  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  NUMBER_CHAR_DECIMAL  ||  c  >  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
180	[BUG]  [BUGGY]  'try'  without  'catch'  or  'finally';  [CE]  unclosed  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  'try'  without  'catch'  or  'finally';  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	'try'  without  'catch'  or  'finally';	  'try'    without    'catch'    or    'finally'    	non-compiled	[CE]  unclosed  character  literal	8	None	replace
181	[BUG]  [BUGGY]  'try'  without  'catch'  or  'finally',  peeked  =  nextNonWhitespace(true));  [CE]  unclosed  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  'try'  without  'catch'  or  'finally',  peeked  =  nextNonWhitespace(true));  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	'try'  without  'catch'  or  'finally',  peeked  =  nextNonWhitespace(true));	  'try'    without    'catch'    or    'finally'    	non-compiled	[CE]  unclosed  character  literal	8	None	replace
182	[BUG]  [BUGGY]  'try'  without  'catch'  or  'finally'.booleanValue()  [CE]  unclosed  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  'try'  without  'catch'  or  'finally'.booleanValue()  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	'try'  without  'catch'  or  'finally'.booleanValue()	  'try'    without    'catch'    or    'finally'    	non-compiled	[CE]  unclosed  character  literal	8	None	replace
183	[BUG]  [BUGGY]  'try'  without  'catch'  or  'finally',  peekedLong  =  nextNonWhitespace(true));  [CE]  unclosed  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  'try'  without  'catch'  or  'finally',  peekedLong  =  nextNonWhitespace(true));  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	'try'  without  'catch'  or  'finally',  peekedLong  =  nextNonWhitespace(true));	  'try'    without    'catch'    or    'finally'    	non-compiled	[CE]  unclosed  character  literal	8	None	replace
184	[BUG]  [BUGGY]  'try'  without  'catch'  or  'finally',  peeked  =  nextNonWhitespace(false));  [CE]  unclosed  character  literal  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  'try'  without  'catch'  or  'finally',  peeked  =  nextNonWhitespace(false));  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	'try'  without  'catch'  or  'finally',  peeked  =  nextNonWhitespace(false));	  'try'    without    'catch'    or    'finally'    	non-compiled	[CE]  unclosed  character  literal	8	None	replace
185	[BUG]  [BUGGY]  'try'  without  'catch'  or  'finally',  peekedLong  =  nextNonWhitespace(true);  [CE]  unclosed  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  'try'  without  'catch'  or  'finally',  peekedLong  =  nextNonWhitespace(true);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	'try'  without  'catch'  or  'finally',  peekedLong  =  nextNonWhitespace(true);	  'try'    without    'catch'    or    'finally'    	non-compiled	[CE]  unclosed  character  literal	8	None	replace
186	[BUG]  [BUGGY]  long  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  long  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	long  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(!isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	68	None	replace
187	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLong((  char)c))  {  [CE]  ';'  expected  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLong((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLong((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(!isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	68	None	replace
188	[BUG]  [BUGGY]  Integer  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  Integer  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(!isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	68	None	replace
189	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLenient((  char)c))  {  [CE]  ';'  expected  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLenient((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLenient((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(!isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	68	None	replace
190	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
191	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_DECIMAL  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  [CE]  orphaned  case  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_DECIMAL  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_DECIMAL  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)    	non-compiled	[CE]  orphaned  case	120	None	replace
192	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c!=  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c!=  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c!=  JsonScope.NONEMPTY_DECIMAL)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
193	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  orphaned  case  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c!=    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  orphaned  case	19	None	replace
194	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos-2;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos-2;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  pos-2;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {	  if(c    ==    'n'    ||    c    ==    'r')    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  not  a  statement	5	None	replace
195	[BUG]  [BUGGY]  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {	  if(c    ==    'n'    ||    c    ==    'r')    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  not  a  statement	5	None	replace
196	[BUG]  [BUGGY]  if(c  ==  'N'  ||  c  ==  'r')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'N'  ||  c  ==  'r')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'N'  ||  c  ==  'r')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {	  if(c    ==    'n'    ||    c    ==    'r')    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  not  a  statement	5	None	replace
197	[BUG]  [BUGGY]  if(c  ==  '.')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {	  if(c    ==    'n'    ||    c    ==    'r')    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  not  a  statement	5	None	replace
198	[BUG]  [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  orphaned  case  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  orphaned  case	71	None	replace
199	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  [CE]  orphaned  case  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  orphaned  case	71	None	replace
200	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  orphaned  case  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  orphaned  case	105	None	replace
201	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  ';'  expected  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  ';'  expected	125	None	replace
202	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c!=  JsonScope.NONEMPTY_LONG)  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c!=  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c!=  JsonScope.NONEMPTY_LONG)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
203	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JSONScope.NONEMPTY_LONG)  {  [CE]  orphaned  case  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JSONScope.NONEMPTY_LONG)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JSONScope.NONEMPTY_LONG)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  orphaned  case	125	None	replace
204	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    type   ");    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
205	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    type   ");    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
206	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    type   ");    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
207	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    type   ");    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
208	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }  [CE]  orphaned  case  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    type   ");    }    	non-compiled	[CE]  orphaned  case	116	None	replace
209	[BUG]  [BUGGY]  if(c!=  ':')  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  ':')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  ':')  {  pos--;  }	  if(c!=    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
210	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  orphaned  case  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  orphaned  case	83	None	replace
211	[BUG]  [BUGGY]  if(isLong((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  orphaned  case  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLong((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLong((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  orphaned  case	83	None	replace
212	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  [CE]  orphaned  case  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  orphaned  case	83	None	replace
213	[BUG]  [BUGGY]  if(c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	66	None	replace
214	[BUG]  [BUGGY]  if(c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
215	[BUG]  [BUGGY]  if(c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	66	None	replace
216	[BUG]  [BUGGY]  if(c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    '')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  empty  character  literal	66	None	replace
217	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_SIGN  ||  c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_SIGN  ||  c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_EXP_SIGN  ||  c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
218	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;	  if(c    ==    NUMBER_CHAR_DIGIT    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
219	[BUG]  [BUGGY]  if(c  <  NUMBER_CHAR_DIGIT  ||  c  >  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  NUMBER_CHAR_DIGIT  ||  c  >  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  NUMBER_CHAR_DIGIT  ||  c  >  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
220	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    '.'    ||    c    ==    ',')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	108	None	replace
221	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    '.'    ||    c    ==    ',')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	108	None	replace
222	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  [CE]  orphaned  case  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  pos--;	  if(c    ==    '.'    ||    c    ==    ',')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	108	None	replace
223	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  [CE]  orphaned  case  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	55	None	replace
224	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_E  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_E  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_EXP_E  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	55	None	replace
225	[BUG]  [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	55	None	replace
226	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
227	[BUG]  [BUGGY]  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
228	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
229	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos-2;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos-2;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos-2;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
230	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
231	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
232	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
233	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
234	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
235	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
236	[BUG]  [BUGGY]  if(c!=  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	53	None	replace
237	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	53	None	replace
238	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  =='<  ')  {  pos--;  }  [CE]  unclosed  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  =='<  ')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  =='<  ')  {  pos--;  }	  if(c    ==    ':')    {    pos--;    }    	non-compiled	[CE]  unclosed  character  literal	25	None	replace
239	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  =='{  ')  {  pos--;  }  [CE]  unclosed  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  =='{  ')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  =='{  ')  {  pos--;  }	  if(c    ==    ':')    {    pos--;    }    	non-compiled	[CE]  unclosed  character  literal	25	None	replace
240	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  =='}  ')  {  pos--;  }  [CE]  unclosed  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  =='}  ')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  =='}  ')  {  pos--;  }	  if(c    ==    ':')    {    pos--;    }    	non-compiled	[CE]  unclosed  character  literal	25	None	replace
241	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '+')  {  pos--;  }	  if(c    ==    ':')    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
242	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '-')  {  pos--;  }	  if(c    ==    ':')    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
243	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  [CE]  orphaned  case  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  orphaned  case	82	None	replace
244	[BUG]  [BUGGY]  'else'  without  'if'  [CE]  unclosed  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  'else'  without  'if'  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	'else'  without  'if'	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  unclosed  character  literal	23	None	replace
245	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	23	None	replace
246	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(pos  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(pos  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(pos  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	23	None	replace
247	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(c  ==  '.')  {  pos--;  }  [CE]  orphaned  case  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(c  ==  '.')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(c  ==  '.')  {  pos--;  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	23	None	replace
248	[BUG]  [BUGGY]  if(isLong((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  orphaned  case  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLong((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLong((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  orphaned  case	80	None	replace
249	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)  c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  orphaned  case  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)  c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)  c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  orphaned  case	80	None	replace
250	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)  c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJ  [CE]  orphaned  case  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)  c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJ  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)  c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJ	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  orphaned  case	80	None	replace
251	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)  c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }  [CE]  orphaned  case  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)  c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)  c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  orphaned  case	80	None	replace
252	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)  c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  [CE]  orphaned  case  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)  c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)  c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  orphaned  case	80	None	replace
253	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  orphaned  case  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    }    	non-compiled	[CE]  orphaned  case	61	None	replace
254	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  }	  if(c    ==    NUMBER_CHAR_DIGIT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
255	[BUG]  [BUGGY]  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'E')  {  [CE]  orphaned  case  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'E')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'E')    {    	non-compiled	[CE]  orphaned  case	75	None	replace
256	[BUG]  [BUGGY]  if(c  ==  'E'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'E')  {  [CE]  orphaned  case  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'E'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'E')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'E'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'E')    {    	non-compiled	[CE]  orphaned  case	75	None	replace
257	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'E')  {  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'E')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'e'  ||  c  ==  'E')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'E')    {    	non-compiled	[CE]  not  a  statement	75	None	replace
258	[BUG]  [BUGGY]  if(c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  '')  {  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  '')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  '')  {	  if(c    ==    'e'    ||    c    ==    'E')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'E')    {    	non-compiled	[CE]  empty  character  literal	75	None	replace
259	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'E')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
260	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  '-')  {  [CE]  orphaned  case  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  '-')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '-'  ||  c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  '-')  {	  if(c    ==    'e'    ||    c    ==    'E')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'E')    {    	non-compiled	[CE]  orphaned  case	75	None	replace
261	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_E  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_E  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_EXP_E  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
262	[BUG]  [BUGGY]  if(c  <  NUMBER_CHAR_DECIMAL  ||  c  >  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  NUMBER_CHAR_DECIMAL  ||  c  >  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  NUMBER_CHAR_DECIMAL  ||  c  >  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
263	[BUG]  [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
264	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
265	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  pos--;  }  [CE]  'else'  without  'if'  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    	non-compiled	[CE]  'else'  without  'if'	33	None	replace
266	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_STRING)  {  pos--;  }  [CE]  'else'  without  'if'  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_STRING)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_STRING)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    	non-compiled	[CE]  'else'  without  'if'	33	None	replace
267	[BUG]  [BUGGY]  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
268	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
269	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos-2;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos-2;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos-2;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
270	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
271	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
272	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos--;  }  [CE]  'else'  without  'if'  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  pos--;  }	  if(c    ==    'n'    ||    c    ==    'r')    {    pos--;    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
273	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  pos--;  }  [CE]  'else'  without  'if'  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'e'  ||  c  ==  'E')  {  pos--;  }	  if(c    ==    'n'    ||    c    ==    'r')    {    pos--;    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
274	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  checkLenient();  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  checkLenient();  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  checkLenient();	  if(c    ==    'n'    ||    c    ==    'r')    {    pos--;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
275	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  pos--;  }  [CE]  'else'  without  'if'  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  'n'  ||  c  ==  'r')  {  pos--;  }	  if(c    ==    'n'    ||    c    ==    'r')    {    pos--;    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
276	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLiteral((  char)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
277	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peeked  ==  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLiteral((  char)c)&&  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c)&&  peeked  ==  PEEKED_BUFFERED)  {	  if(isLiteral((    char)c)    ||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
278	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLiteral((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
279	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLiteral((  char)c)||  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c)||  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
280	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  ';'  expected  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
281	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  'else'  without  'if'  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
282	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  ';'  expected  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
283	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  'else'  without  'if'  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
284	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
285	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
286	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  'else'  without  'if'  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }	  if(c    ==    'n'    ||    c    ==    'r')    {    return    PEEKED_UNQUOTED_NAME;    	non-compiled	[CE]  'else'  without  'if'	76	None	replace
287	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_BUFFERED_NAME;  }  [CE]  'else'  without  'if'  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_BUFFERED_NAME;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_BUFFERED_NAME;  }	  if(c    ==    'n'    ||    c    ==    'r')    {    return    PEEKED_UNQUOTED_NAME;    	non-compiled	[CE]  'else'  without  'if'	76	None	replace
288	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_UNQUOTED_NAME;  }  [CE]  'else'  without  'if'  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_UNQUOTED_NAME;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_UNQUOTED_NAME;  }	  if(c    ==    'n'    ||    c    ==    'r')    {    return    PEEKED_UNQUOTED_NAME;    	non-compiled	[CE]  'else'  without  'if'	76	None	replace
289	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_BUFFERED;  }  [CE]  'else'  without  'if'  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_BUFFERED;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_BUFFERED;  }	  if(c    ==    'n'    ||    c    ==    'r')    {    return    PEEKED_UNQUOTED_NAME;    	non-compiled	[CE]  'else'  without  'if'	76	None	replace
290	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_BOOLEAN_QUOTED_NAME;  }  [CE]  'else'  without  'if'  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_BOOLEAN_QUOTED_NAME;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_BOOLEAN_QUOTED_NAME;  }	  if(c    ==    'n'    ||    c    ==    'r')    {    return    PEEKED_UNQUOTED_NAME;    	non-compiled	[CE]  'else'  without  'if'	76	None	replace
291	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_BUFFERED_OBJECT;  }  [CE]  'else'  without  'if'  [FE]                                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_BUFFERED_OBJECT;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_BUFFERED_OBJECT;  }	  if(c    ==    'n'    ||    c    ==    'r')    {    return    PEEKED_UNQUOTED_NAME;    	non-compiled	[CE]  'else'  without  'if'	76	None	replace
292	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_SINGLE_QUOTED_NAME;  }  [CE]  'else'  without  'if'  [FE]                                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_SINGLE_QUOTED_NAME;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_SINGLE_QUOTED_NAME;  }	  if(c    ==    'n'    ||    c    ==    'r')    {    return    PEEKED_UNQUOTED_NAME;    	non-compiled	[CE]  'else'  without  'if'	76	None	replace
293	[BUG]  [BUGGY]  if(c  ==  'E'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'E'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'E'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    'e'    ||    c    ==    'E')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
294	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '-'  ||  c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    'e'    ||    c    ==    'E')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
295	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'e'  ||  c  ==  'E')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    'e'    ||    c    ==    'E')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	94	None	replace
296	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [CE]  'else'  without  'if'  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    }    	non-compiled	[CE]  'else'  without  'if'	73	None	replace
297	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [CE]  illegal  start  of  expression  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
298	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [CE]  illegal  start  of  expression  [FE]                                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
299	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [CE]  illegal  start  of  expression  [FE]                                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
300	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  ';'  expected  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
301	[BUG]  [BUGGY]  char  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  ';'  expected  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  char  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	char  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
302	[BUG]  [BUGGY]  int  pos  =  0;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  'else'  without  'if'  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos  =  0;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos  =  0;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  'else'  without  'if'	12	None	replace
303	[BUG]  [BUGGY]  if(c  <  =  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    <    =    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
304	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT    ||    c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
305	[BUG]  [BUGGY]  if(c  <  NUMBER_CHAR_DIGIT  ||  c  >  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  NUMBER_CHAR_DIGIT  ||  c  >  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  NUMBER_CHAR_DIGIT  ||  c  >  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT    ||    c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
306	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT    ||    c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
307	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT    ||    c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
308	[BUG]  [BUGGY]  if(isLong((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLong((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLong((  char)c))  {	  if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
309	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c))  {  [CE]  ')'  expected  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c))  {	  if(isLiteral((    char)c))    {    	non-compiled	[CE]  ')'  expected	10	None	replace
310	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLenient((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLenient((  char)c))  {	  if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
311	[BUG]  [BUGGY]  if(c  >=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c!=    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
312	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT    ||    c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
313	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT    ||    c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
314	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
315	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
316	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [CE]  orphaned  case  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  orphaned  case	4	None	replace
317	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
318	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
319	[BUG]  [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
320	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  }  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
321	[BUG]  [BUGGY]  long  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  long  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	long  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	32	None	replace
322	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLenient((  char)c))  {  [CE]  ';'  expected  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLenient((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLenient((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	32	None	replace
323	[BUG]  [BUGGY]  short  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  short  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	short  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	32	None	replace
324	[BUG]  [BUGGY]  if(c  ==  '.'  &&  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  &&  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  &&  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.'    ||    c    ==    ',')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	106	None	replace
325	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.'    ||    c    ==    ',')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	106	None	replace
326	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.'    ||    c    ==    ',')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	106	None	replace
327	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_STRING)    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
328	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_DOUBLE_QUOTED_NAME)  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_DOUBLE_QUOTED_NAME)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_DOUBLE_QUOTED_NAME)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_STRING)    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
329	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_STRING)    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
330	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_STRING)    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
331	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  '.'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  '.'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	42	None	replace
332	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  'r')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  'r')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	42	None	replace
333	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ','  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ','  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	42	None	replace
334	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    '.'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	42	None	replace
335	[BUG]  [BUGGY]  char  c  =  nextNonWhitespace(false);  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  char  c  =  nextNonWhitespace(false);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	char  c  =  nextNonWhitespace(false);	  char    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
336	[BUG]  [BUGGY]  char  c  =  nextNonWhitespace(true,  false);  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  char  c  =  nextNonWhitespace(true,  false);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	char  c  =  nextNonWhitespace(true,  false);	  char    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
337	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  PEEKED_SINGLE_QUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  orphaned  case  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  PEEKED_SINGLE_QUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  PEEKED_SINGLE_QUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    return    PEEKED_UNQUOTED_NAME;    }    else    if(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  orphaned  case	109	None	replace
338	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  PEEKED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  orphaned  case  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  PEEKED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  PEEKED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    return    PEEKED_UNQUOTED_NAME;    }    else    if(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  orphaned  case	109	None	replace
339	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  PEEKED_END_OBJECT;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  orphaned  case  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  PEEKED_END_OBJECT;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  PEEKED_END_OBJECT;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    return    PEEKED_UNQUOTED_NAME;    }    else    if(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  orphaned  case	109	None	replace
340	[BUG]  [BUGGY]  pos--;  }  else  if(isLiteral((  char)c))  {  [CE]  'else'  without  'if'  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos--;  }  else  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  }  else  if(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    }    else    if(isLiteral((    char)c))    {    	non-compiled	[CE]  'else'  without  'if'	27	None	replace
341	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(c  ==  ':')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(c  ==  ':')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(c  ==  ':')  {  pos--;  }  else  if(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    }    else    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	27	None	replace
342	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '+')  {  pos--;  }  else  if(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    }    else    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	27	None	replace
343	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  =='<  ')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [CE]  unclosed  character  literal  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  =='<  ')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  =='<  ')  {  pos--;  }  else  if(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    }    else    if(isLiteral((    char)c))    {    	non-compiled	[CE]  unclosed  character  literal	27	None	replace
344	[BUG]  [BUGGY]  if(c  ==  '.')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  pos--;  }  else  if(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    }    else    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	27	None	replace
345	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	57	None	replace
346	[BUG]  [BUGGY]  if(c  ==  ';')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ';')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ';')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    'n')    {    int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	67	None	replace
347	[BUG]  [BUGGY]  if(c  ==  '.')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    'n')    {    int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	67	None	replace
348	[BUG]  [BUGGY]  if(c  ==  ':')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    'n')    {    int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	67	None	replace
349	[BUG]  [BUGGY]  if(c  ==  '#')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '#')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '#')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    'n')    {    int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	67	None	replace
350	[BUG]  [BUGGY]  if(c  ==  '')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  empty  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    'n')    {    int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  empty  character  literal	67	None	replace
351	[BUG]  [BUGGY]  if(c  ==  ';')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ';')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ';')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    'n')    {    int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	67	None	replace
352	[BUG]  [BUGGY]  if(c  ==  ':'  &&  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  &&  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  &&  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	98	None	replace
353	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  pos--;  [CE]  orphaned  case  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '-')  {  pos--;	  if(c    ==    ':'    ||    c    ==    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	98	None	replace
354	[BUG]  [BUGGY]  long  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  ';'  expected  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  long  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	long  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
355	[BUG]  [BUGGY]  if(c  ==  ':'  &&  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  &&  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  &&  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	88	None	replace
356	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '-')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	88	None	replace
357	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  pos--;  //  don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  pos--;  //  don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '-')  {  pos--;  //  don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	88	None	replace
358	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;/  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;/  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;/  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
359	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(isLiteral((  char)c))  {  }  [CE]  orphaned  case  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    }    	non-compiled	[CE]  orphaned  case	61	None	replace
360	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '-')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	98	None	replace
361	[BUG]  [BUGGY]  pos-1;  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos-1;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos-1;	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
362	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
363	[BUG]  [BUGGY]  if(c  ==  JsonScope.NEW_ARRAY)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NEW_ARRAY)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NEW_ARRAY)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	44	None	replace
364	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	100	None	replace
365	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_SIGN  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  [CE]  orphaned  case  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_SIGN  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_EXP_SIGN  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	100	None	replace
366	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  orphaned  case  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  orphaned  case	71	None	replace
367	[BUG]  [BUGGY]  if(c!=  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  orphaned  case  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  orphaned  case	71	None	replace
368	[BUG]  [BUGGY]  if(c  <  =  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
369	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  orphaned  case  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  orphaned  case	125	None	replace
370	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JSONScope.NONEMPTY_LONG)  {  [CE]  orphaned  case  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JSONScope.NONEMPTY_LONG)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JSONScope.NONEMPTY_LONG)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  orphaned  case	125	None	replace
371	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  orphaned  case  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  orphaned  case	125	None	replace
372	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  }  [CE]  orphaned  case  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  }	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  orphaned  case	125	None	replace
373	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [CE]  orphaned  case  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    }    	non-compiled	[CE]  orphaned  case	72	None	replace
374	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peek  [CE]  orphaned  case  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peek  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peek	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    }    	non-compiled	[CE]  orphaned  case	72	None	replace
375	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFER  [CE]  orphaned  case  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFER  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFER	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    }    	non-compiled	[CE]  orphaned  case	72	None	replace
376	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeke  [CE]  orphaned  case  [FE]                                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeke  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeke	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    }    	non-compiled	[CE]  orphaned  case	72	None	replace
377	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEE  [CE]  orphaned  case  [FE]                                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEE  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEE	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    }    	non-compiled	[CE]  orphaned  case	72	None	replace
378	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  pos--;  [CE]  orphaned  case  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'e'  ||  c  ==  'E')  {  pos--;	  if(c    ==    'e'    ||    c    ==    'E')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'E')    {    	non-compiled	[CE]  orphaned  case	75	None	replace
379	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  pos--;  [CE]  orphaned  case  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '-'  ||  c  ==  '+')  {  pos--;	  if(c    ==    'e'    ||    c    ==    'E')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'E')    {    	non-compiled	[CE]  orphaned  case	75	None	replace
380	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    '')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	89	None	replace
381	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    '')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	89	None	replace
382	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '/')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '/')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '/')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    '')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	89	None	replace
383	[BUG]  [BUGGY]  if(c  ==  JsonScope.LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  orphaned  case  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	57	None	replace
384	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  [CE]  orphaned  case  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;	  if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	57	None	replace
385	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  [CE]  orphaned  case  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  orphaned  case	38	None	replace
386	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED)  {  [CE]  orphaned  case  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)    ||    peeked    >=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  orphaned  case	92	None	replace
387	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED)  {  [CE]  orphaned  case  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)    ||    peeked    >=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  orphaned  case	92	None	replace
388	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED)  {  }  [CE]  orphaned  case  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED)  {  }	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)    ||    peeked    >=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  orphaned  case	92	None	replace
389	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED)  {  }  [CE]  orphaned  case  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED)  {  }	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)    ||    peeked    >=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  orphaned  case	92	None	replace
390	[BUG]  [BUGGY]  if(c  ==  JsonScope.UNQUOTED_NAME)  {  [CE]  orphaned  default  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.UNQUOTED_NAME)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.UNQUOTED_NAME)  {	  if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	10	None	replace
391	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  orphaned  case  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {	  if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
392	[BUG]  [BUGGY]  char  c  =  nextNonWhitespace(true,  PEEKED_DOUBLE_QUOTED_NAME);  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  char  c  =  nextNonWhitespace(true,  PEEKED_DOUBLE_QUOTED_NAME);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	char  c  =  nextNonWhitespace(true,  PEEKED_DOUBLE_QUOTED_NAME);	  char    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
393	[BUG]  [BUGGY]  char  c  =  nextNonWhitespace(true,  PEEKED_SINGLE_QUOTED_NAME);  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  char  c  =  nextNonWhitespace(true,  PEEKED_SINGLE_QUOTED_NAME);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	char  c  =  nextNonWhitespace(true,  PEEKED_SINGLE_QUOTED_NAME);	  char    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
394	[BUG]  [BUGGY]  char  c  =  nextNonWhitespace(true,  true);  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  char  c  =  nextNonWhitespace(true,  true);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	char  c  =  nextNonWhitespace(true,  true);	  char    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
395	[BUG]  [BUGGY]  char  c  =  nextNonWhitespace(false,  JsonScope.NONEMPTY_OBJECT);  [CE]  illegal  start  of  expression  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  char  c  =  nextNonWhitespace(false,  JsonScope.NONEMPTY_OBJECT);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	char  c  =  nextNonWhitespace(false,  JsonScope.NONEMPTY_OBJECT);	  char    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
396	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }  [CE]  orphaned  default  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    }    	non-compiled	[CE]  orphaned  default	81	None	replace
397	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    }    	non-compiled	[CE]  unclosed  string  literal	81	None	replace
398	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY  [CE]  orphaned  default  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    }    	non-compiled	[CE]  orphaned  default	81	None	replace
399	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  [CE]  orphaned  default  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)c))  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    }    	non-compiled	[CE]  orphaned  default	81	None	replace
400	[BUG]  [BUGGY]  if(pos  >=  -1)  {  if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  orphaned  default  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(pos  >=  -1)  {  if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(pos  >=  -1)  {  if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    ':'    <    =    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	99	None	replace
401	[BUG]  [BUGGY]  if(pos  ==  -1)  {  if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  orphaned  default  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(pos  ==  -1)  {  if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(pos  ==  -1)  {  if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    ':'    <    =    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	99	None	replace
402	[BUG]  [BUGGY]  if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(isLiteral((  char)c))  {  [CE]  orphaned  default  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(isLiteral((  char)c))  {	  if(c    ==    ':'    <    =    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	99	None	replace
403	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '>')  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '>')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '>')  {  pos--;  }	  if(c    ==    ':')    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
404	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '')  {  pos--;  }  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '')  {  pos--;  }	  if(c    ==    ':')    {    pos--;    }    	non-compiled	[CE]  empty  character  literal	25	None	replace
405	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  ')')  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  ')')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  ')')  {  pos--;  }	  if(c    ==    ':')    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
406	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  'n'  ||  c  ==  'r')  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }	  if(c    ==    'n'    ||    c    ==    'r')    {    return    PEEKED_UNQUOTED_NAME;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
407	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_DOUBLE_QUOTED_NAME;  [CE]  orphaned  default  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_DOUBLE_QUOTED_NAME;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  PEEKED_DOUBLE_QUOTED_NAME;	  if(c    ==    'n'    ||    c    ==    'r')    {    return    PEEKED_UNQUOTED_NAME;    	non-compiled	[CE]  orphaned  default	76	None	replace
408	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  PEEKED_UNQUOTED_NAME;  }  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  PEEKED_UNQUOTED_NAME;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'e'  ||  c  ==  'E')  {  return  PEEKED_UNQUOTED_NAME;  }	  if(c    ==    'n'    ||    c    ==    'r')    {    return    PEEKED_UNQUOTED_NAME;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
409	[BUG]  [BUGGY]  Integer  c  =  nextNonWhitespace(false,  0);  [CE]  illegal  start  of  expression  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  Integer  c  =  nextNonWhitespace(false,  0);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  c  =  nextNonWhitespace(false,  0);	  Integer    c    =    nextNonWhitespace(false);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
410	[BUG]  [BUGGY]  Integer  c  =  nextNonWhitespace(false,  1);  [CE]  illegal  start  of  expression  [FE]                                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  Integer  c  =  nextNonWhitespace(false,  1);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  c  =  nextNonWhitespace(false,  1);	  Integer    c    =    nextNonWhitespace(false);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
411	[BUG]  [BUGGY]  Integer  c  =  nextNonWhitespace(false,  true);  [CE]  illegal  start  of  expression  [FE]                                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  Integer  c  =  nextNonWhitespace(false,  true);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  c  =  nextNonWhitespace(false,  true);	  Integer    c    =    nextNonWhitespace(false);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
412	[BUG]  [BUGGY]  int  c  =  nextNonWhitespace(false,  0);  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  c  =  nextNonWhitespace(false,  0);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  c  =  nextNonWhitespace(false,  0);	  int    c    =    nextNonWhitespace(false);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
413	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFER  [CE]  orphaned  default  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFER  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFER	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    }    	non-compiled	[CE]  orphaned  default	73	None	replace
414	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  orphaned  default  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  orphaned  default	65	None	replace
415	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  orphaned  default  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  orphaned  default	65	None	replace
416	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  'e')  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
417	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  [CE]  orphaned  default  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  orphaned  default	4	None	replace
418	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'n')  {  [CE]  orphaned  default  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  'n')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  'n')  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  orphaned  default	4	None	replace
419	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG)  {  [CE]  orphaned  default  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_LONG)  {	  if(c!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  orphaned  default	124	None	replace
420	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_STRING)  {  [CE]  orphaned  default  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_STRING)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_STRING)  {	  if(c!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  orphaned  default	124	None	replace
421	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  empty  character  literal	26	None	replace
422	[BUG]  [BUGGY]  if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(!isLiteral((  char)c))  {  [CE]  orphaned  default  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(!isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(!isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	26	None	replace
423	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  long  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  long  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  long  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  long    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	29	None	replace
424	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_UNQUOTED_NAME;  [CE]  orphaned  default  [FE]            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_UNQUOTED_NAME;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_UNQUOTED_NAME;	  if(c    ==    '.'    ||    c    ==    ',')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	106	None	replace
425	[BUG]  [BUGGY]  if(c!=  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  orphaned  default  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c!=    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	101	None	replace
426	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(isLiteral((  char)c))  {	  if(c!=    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
427	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    type   ");    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
428	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_END)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_END)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_END)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    type   ");    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
429	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_SIGN  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  orphaned  default  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_SIGN  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_SIGN  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  orphaned  default	39	None	replace
430	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_SIGN  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_SIGN  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_SIGN  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
431	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  [CE]  orphaned  default  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	113	None	replace
432	[BUG]  [BUGGY]  if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  [CE]  orphaned  default  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  orphaned  default	113	None	replace
433	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLiteral((  char)c))  {  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c))  {  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    return    PEEKED_UNQUOTED_NAME;    }    else    if(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
434	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    return    PEEKED_UNQUOTED_NAME;    }    else    if(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
435	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY  [CE]  ')'  expected  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLiteral((  char)c))  {  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c))  {  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY	  if(c    ==    '.')    {    return    PEEKED_UNQUOTED_NAME;    }    else    if(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  ')'  expected	109	None	replace
436	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJ  [CE]  ')'  expected  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLiteral((  char)c))  {  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJ  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c))  {  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJ	  if(c    ==    '.')    {    return    PEEKED_UNQUOTED_NAME;    }    else    if(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  ')'  expected	109	None	replace
437	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLiteral((  char)c))  {  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c))  {  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    return    PEEKED_UNQUOTED_NAME;    }    else    if(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
438	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
439	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
440	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JSONScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JSONScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JSONScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
441	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
442	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(!isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(!isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(!isLiteral((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	32	None	replace
443	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unknown  string.  If(isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unknown  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unknown  string.  If(isLiteral((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	32	None	replace
444	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  'e')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
445	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
446	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  pos;  }  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  pos;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  pos;  }	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
447	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  return  peeked  [CE]  ';'  expected  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  return  peeked  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  return  peeked	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	111	None	replace
448	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_EXP_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
449	[BUG]  [BUGGY]  Integer  c  =  nextNonWhitespace(true,  0);  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  Integer  c  =  nextNonWhitespace(true,  0);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  c  =  nextNonWhitespace(true,  0);	  Integer    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
450	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
451	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
452	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_ARRAY)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_ARRAY)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_ARRAY)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
453	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
454	[BUG]  [BUGGY]  Integer  pos  =  nextNonWhitespace(false);  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  Integer  pos  =  nextNonWhitespace(false);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  pos  =  nextNonWhitespace(false);	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
455	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  pos--;  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  pos--;  }	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
456	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos-1;  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos-1;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  pos-1;	  if(c    ==    'n'    ||    c    ==    'r')    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  not  a  statement	5	None	replace
457	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos0;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos0;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  pos0;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {	  if(c    ==    'n'    ||    c    ==    'r')    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  not  a  statement	5	None	replace
458	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos-2;  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos-2;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  pos-2;	  if(c    ==    'n'    ||    c    ==    'r')    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  not  a  statement	5	None	replace
459	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
460	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked!=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
461	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked!=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
462	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  }  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  }	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked!=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
463	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  }  [CE]  illegal  start  of  expression  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  }	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked!=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
464	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  }	  if(c    ==    '.'    ||    c    ==    ',')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
465	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DIGIT)  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DIGIT)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DIGIT)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
466	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.DOUBLE_QUOTED_NAME)  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.DOUBLE_QUOTED_NAME)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.DOUBLE_QUOTED_NAME)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
467	[BUG]  [BUGGY]  if(c  ==  ')')  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ')')  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ')')  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c))    {    pos--;    return    peeked    =    PEEKED_UNQUOTED_NAME;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
468	[BUG]  [BUGGY]  if(c  ==  ')')  {  pos--;  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ')')  {  pos--;  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ')')  {  pos--;  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c))    {    pos--;    return    peeked    =    PEEKED_UNQUOTED_NAME;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
469	[BUG]  [BUGGY]  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c))    {    pos--;    return    peeked    =    PEEKED_UNQUOTED_NAME;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	84	None	replace
470	[BUG]  [BUGGY]  if(c  ==  ')')  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [CE]  illegal  start  of  expression  [FE]                                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ')')  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ')')  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }	  if(isLiteral((    char)c))    {    pos--;    return    peeked    =    PEEKED_UNQUOTED_NAME;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
471	[BUG]  [BUGGY]  'try'  with  'catch'  or  'finally'  [CE]  unclosed  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  'try'  with  'catch'  or  'finally'  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	'try'  with  'catch'  or  'finally'	  'try'    without    'catch'    or    'finally'    	non-compiled	[CE]  unclosed  character  literal	8	None	replace
472	[BUG]  [BUGGY]  'try'  without  'catch'  or  'finally',  isLiteral((  char)c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  [CE]  unclosed  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  'try'  without  'catch'  or  'finally',  isLiteral((  char)c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	'try'  without  'catch'  or  'finally',  isLiteral((  char)c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;	  'try'    without    'catch'    or    'finally'    	non-compiled	[CE]  unclosed  character  literal	8	None	replace
473	[BUG]  [BUGGY]  'try'  without  'catch'  or  'finally',  isLiteral((  char)c));  [CE]  unclosed  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  'try'  without  'catch'  or  'finally',  isLiteral((  char)c));  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	'try'  without  'catch'  or  'finally',  isLiteral((  char)c));	  'try'    without    'catch'    or    'finally'    	non-compiled	[CE]  unclosed  character  literal	8	None	replace
474	[BUG]  [BUGGY]  'try'  without  'catch'  or  'finally',  isLiteral((  char)c))  {  return  peeked  =  PEEKED_DOUBLE_QUOTED_NAME;  [CE]  unclosed  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  'try'  without  'catch'  or  'finally',  isLiteral((  char)c))  {  return  peeked  =  PEEKED_DOUBLE_QUOTED_NAME;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	'try'  without  'catch'  or  'finally',  isLiteral((  char)c))  {  return  peeked  =  PEEKED_DOUBLE_QUOTED_NAME;	  'try'    without    'catch'    or    'finally'    	non-compiled	[CE]  unclosed  character  literal	8	None	replace
475	[BUG]  [BUGGY]  int  pos  =(int)Math.floor(peekStack[stackSize  -  1]);  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos  =(int)Math.floor(peekStack[stackSize  -  1]);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos  =(int)Math.floor(peekStack[stackSize  -  1]);	  int    pos--;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
476	[BUG]  [BUGGY]  int  pos  =(int)Math.floor(pathNames[0],  pathNames[1]);  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos  =(int)Math.floor(pathNames[0],  pathNames[1]);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos  =(int)Math.floor(pathNames[0],  pathNames[1]);	  int    pos--;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
477	[BUG]  [BUGGY]  int  pos  =(int)Math.pow(10,  nextNonWhitespace(true));  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos  =(int)Math.pow(10,  nextNonWhitespace(true));  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos  =(int)Math.pow(10,  nextNonWhitespace(true));	  int    pos--;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
478	[BUG]  [BUGGY]  if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_BLOCK)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
479	[BUG]  [BUGGY]  if(pos  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(pos  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(pos  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_BLOCK)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
480	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  [CE]  illegal  start  of  expression  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_BLOCK)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
481	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral(  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral(  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral(	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
482	[BUG]  [BUGGY]  if(pos  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(pos  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(pos  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
483	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
484	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  return  PEEKED_UNQUOTED_NAME;  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  return  PEEKED_UNQUOTED_NAME;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  return  PEEKED_UNQUOTED_NAME;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
485	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_DOUBLE_QUOTED_NAME)  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_DOUBLE_QUOTED_NAME)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_DOUBLE_QUOTED_NAME)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
486	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
487	[BUG]  [BUGGY]  if(c  <  'n'  ||  c  >  'r')  {  pos--;  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  'n'  ||  c  >  'r')  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  'n'  ||  c  >  'r')  {  pos--;	  if(c    <    =    'n'    ||    c    >    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
488	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(isLiteral((  char)c))  {	  if(c!=    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
489	[BUG]  [BUGGY]  if(c  ==  '[')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '[')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '[')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    'n')    {    int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	67	None	replace
490	[BUG]  [BUGGY]  if(c  ==  ',')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ',')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ',')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    'n')    {    int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	67	None	replace
491	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  expression  [FE]            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  'a'  &&  c  <  =  'z')  {	  if(c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
492	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '')  {  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  '')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  '')  {	  if(c    ==    '.')    {    	non-compiled	[CE]  empty  character  literal	21	None	replace
493	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
494	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
495	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
496	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  return  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  return  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  return  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
497	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  ';'  expected  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
498	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)&&  peeked  ==  PEEKED_BUFFERED)  {  [CE]  ';'  expected  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)&&  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)&&  peeked  ==  PEEKED_BUFFERED)  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
499	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  JsonScope.BUFFERED)  {  [CE]  ';'  expected  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  JsonScope.BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  JsonScope.BUFFERED)  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
500	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r')  {  pos--;  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  'r')  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  'r')  {  pos--;	  if(c    ==    '.'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
501	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r')  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  'r')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  'r')  {  pos--;  }	  if(c    ==    '.'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
502	[BUG]  [BUGGY]  if(c  ==  'else')  {  [CE]  unclosed  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'else')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'else')  {	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  unclosed  character  literal	23	None	replace
503	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
504	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(c  ==  '.')  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(c  ==  '.')  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(c  ==  '.')  {  pos--;  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  unclosed  string  literal	23	None	replace
505	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(peekStack!=  JsonScope.DANGLING_NAME)  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(peekStack!=  JsonScope.DANGLING_NAME)  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(peekStack!=  JsonScope.DANGLING_NAME)  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  unclosed  string  literal	23	None	replace
506	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '-')  {  pos--;  }  else  if(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    }    else    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
507	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '/')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '/')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '/')  {  pos--;  }  else  if(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    }    else    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
508	[BUG]  [BUGGY]  if(c  ==  ':')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    }    else    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
509	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [CE]  empty  character  literal  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '')  {  pos--;  }  else  if(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    }    else    if(isLiteral((    char)c))    {    	non-compiled	[CE]  empty  character  literal	27	None	replace
510	[BUG]  [BUGGY]  parent  ==  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  parent  ==  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	parent  ==  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    return    PEEKED_UNQUOTED_NAME;    }    else    if(peekStack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
511	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    return    PEEKED_UNQUOTED_NAME;    }    else    if(peekStack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
512	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  PEEKED_SINGLE_QUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  PEEKED_SINGLE_QUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  PEEKED_SINGLE_QUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    return    PEEKED_UNQUOTED_NAME;    }    else    if(peekStack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
513	[BUG]  [BUGGY]  if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
514	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.DOUBLE_QUOTED_NAME)  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.DOUBLE_QUOTED_NAME)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.DOUBLE_QUOTED_NAME)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_STRING)    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
515	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_UNQUOTED_NAME;  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_UNQUOTED_NAME;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_UNQUOTED_NAME;  }	  if(c    ==    JsonScope.NONEMPTY_STRING)    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
516	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_OBJECT)  {  [CE]  ';'  expected  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_OBJECT)  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
517	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.  [CE]  ';'  expected  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
518	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  'e')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
519	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
520	[BUG]  [BUGGY]  if(pos  ==  -1)  {  if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(pos  ==  -1)  {  if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(pos  ==  -1)  {  if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    <    =    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
521	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  pos--;  [CE]  illegal  start  of  expression  [FE]            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
522	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLiteral((  char)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED)  {	  if(isLiteral((    char)c)    ||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
523	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked!=  PEEKED_DOUBLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLiteral((  char)c)||  peeked!=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c)||  peeked!=  PEEKED_DOUBLE_QUOTED)  {	  if(isLiteral((    char)c)    ||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
524	[BUG]  [BUGGY]  if(isLenient((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLenient((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLenient((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(isLiteral((    char)c)    ||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
525	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  >=  PEEKED_DOUBLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLiteral((  char)c)||  peeked  >=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c)||  peeked  >=  PEEKED_DOUBLE_QUOTED)  {	  if(isLiteral((    char)c)    ||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
526	[BUG]  [BUGGY]  if(isLong((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLong((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLong((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(isLiteral((    char)c)    ||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
527	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
528	[BUG]  [BUGGY]  if(c!=  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c!=    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
529	[BUG]  [BUGGY]  int  c  =  nextNonWhitespace(true,  stack);  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  c  =  nextNonWhitespace(true,  stack);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  c  =  nextNonWhitespace(true,  stack);	  int    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
530	[BUG]  [BUGGY]  int  c  =  nextNonWhitespace(true,  stackSize);  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  c  =  nextNonWhitespace(true,  stackSize);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  c  =  nextNonWhitespace(true,  stackSize);	  int    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
531	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_DIGIT  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_DIGIT  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_EXP_DIGIT  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT    ||    c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
532	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT    ||    c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
533	[BUG]  [BUGGY]  if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
534	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n')  {  pos--;  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n')  {  pos--;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  'n')  {  pos--;	  if(c    ==    ':'    ||    c    ==    'n')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
535	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  'n')  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    'n')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	90	None	replace
536	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n')  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  'n')  {  pos--;  }	  if(c    ==    ':'    ||    c    ==    'n')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
537	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
538	[BUG]  [BUGGY]  if(c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    '')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
539	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
540	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJ  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJ  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  if(isLiteral((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJ	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
541	[BUG]  [BUGGY]  if(c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'a'    ||    c    ==    'z')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
542	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.DOUBLE_QUOTED_NAME)  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.DOUBLE_QUOTED_NAME)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.DOUBLE_QUOTED_NAME)  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
543	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
544	[BUG]  [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c!=    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
545	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  if(isLiteral((  char)c))  {  }	  if(c!=    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
546	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_DIGIT  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_DIGIT  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_EXP_DIGIT  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT    ||    c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
547	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT    ||    c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
548	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  pos--;/  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  pos--;/  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '-')  {  pos--;/  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
549	[BUG]  [BUGGY]  if(c  ==  ';')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ';')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ';')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(!isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	68	None	replace
550	[BUG]  [BUGGY]  if(c  ==  '.')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(!isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	68	None	replace
551	[BUG]  [BUGGY]  int  pos  =  0;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos  =  0;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos  =  0;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(!isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
552	[BUG]  [BUGGY]  if(c  ==  JsonScope.UNQUOTED_NAME)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.UNQUOTED_NAME)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.UNQUOTED_NAME)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
553	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
554	[BUG]  [BUGGY]  if(c  ==  JsonScope.UNQUOTED_NAME)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  }  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.UNQUOTED_NAME)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.UNQUOTED_NAME)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  }	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
555	[BUG]  [BUGGY]  if(c  ==  JsonScope.UNQUOTED_NAME)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JSONScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.UNQUOTED_NAME)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JSONScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.UNQUOTED_NAME)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JSONScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
556	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_STRING)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
557	[BUG]  [BUGGY]  if(c  ==  ':'  <  =  '-')  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  <  =  '-')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  <  =  '-')  {  pos--;  }	  if(c    ==    ':'    <    =    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
558	[BUG]  [BUGGY]  if(c  <  =  '-'  ||  c  >  '9')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  '-'  ||  c  >  '9')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  '-'  ||  c  >  '9')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    ':'    <    =    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
559	[BUG]  [BUGGY]  if(c!=  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
560	[BUG]  [BUGGY]  if(c  <  =  ':')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  ':')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  ':')  {  pos--;  }  else  if(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    }    else    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
561	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  ',')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  ',')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  ',')  {  pos--;  }  else  if(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    }    else    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
562	[BUG]  [BUGGY]  if(c!=  ':')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  ':')  {  pos--;  }  else  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  ':')  {  pos--;  }  else  if(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    }    else    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
563	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
564	[BUG]  [BUGGY]  if(c  <  =  '.')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  '.')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  '.')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
565	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  PEEKED_BUFFERED;  }  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  PEEKED_BUFFERED;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  PEEKED_BUFFERED;  }	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
566	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  PEEKED_BUFFERED;  }  else  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  return  PEEKED_BUFFERED;  }  else  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  return  PEEKED_BUFFERED;  }  else  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
567	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  pos--;  }  [CE]  illegal  start  of  expression  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  return  pos--;  }	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
568	[BUG]  [BUGGY]  if(c  <  =  '.')  {  return  pos--;  }  [CE]  illegal  start  of  expression  [FE]                                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  '.')  {  return  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  '.')  {  return  pos--;  }	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
569	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
570	[BUG]  [BUGGY]  if(c  <  =  '.')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  '.')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  '.')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
571	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  '-')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
572	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  '-')  {  return  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    '.')    {    return    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
573	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  ')  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  ')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  ')  {	  if(c    ==    'e'    ||    c    ==    'E')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
574	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'E')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '-'  ||  c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
575	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
576	[BUG]  [BUGGY]  Integer  c  =  nextNonWhitespace(true,  isLiteral((  char)c));  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  Integer  c  =  nextNonWhitespace(true,  isLiteral((  char)c));  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  c  =  nextNonWhitespace(true,  isLiteral((  char)c));	  Integer    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
577	[BUG]  [BUGGY]  if(c  <  =  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.'    ||    c    ==    ',')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
578	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos++;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos++;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  pos++;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.'    ||    c    ==    ',')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
579	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  'n'  ||  c  >  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    <    =    'n'    ||    c    >    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
580	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  'n'  ||  c  >  'r')  {  pos--;  }	  if(c    <    =    'n'    ||    c    >    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
581	[BUG]  [BUGGY]  int  c  =  nextNonWhitespace(false,  PEEKED_DOUBLE_QUOTED_NAME);  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  c  =  nextNonWhitespace(false,  PEEKED_DOUBLE_QUOTED_NAME);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  c  =  nextNonWhitespace(false,  PEEKED_DOUBLE_QUOTED_NAME);	  int    c    =    nextNonWhitespace(false);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
582	[BUG]  [BUGGY]  int  c  =  nextNonWhitespace(false,  isLiteral((  char)c));  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  c  =  nextNonWhitespace(false,  isLiteral((  char)c));  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  c  =  nextNonWhitespace(false,  isLiteral((  char)c));	  int    c    =    nextNonWhitespace(false);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
583	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  if(isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  if(isLiteral((  char)c))  {	  long    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	29	None	replace
584	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_STRING)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_STRING)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_STRING)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_STRING)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
585	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_STRING)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
586	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  [CE]  ';'  expected  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
587	[BUG]  [BUGGY]  if(c  <  NUMBER_CHAR_DECIMAL  ||  c  >  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  NUMBER_CHAR_DECIMAL  ||  c  >  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  NUMBER_CHAR_DECIMAL  ||  c  >  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
588	[BUG]  [BUGGY]  if(c  <  =  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
589	[BUG]  [BUGGY]  if(c  >=  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
590	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  return  pos--;  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  return  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  return  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
591	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_DIGIT)  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_DIGIT)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_DIGIT)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
592	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos++;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos++;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos++;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
593	[BUG]  [BUGGY]  int  c  =  nextNonWhitespace(true,  PEEKED_DOUBLE_QUOTED_NAME);  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  c  =  nextNonWhitespace(true,  PEEKED_DOUBLE_QUOTED_NAME);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  c  =  nextNonWhitespace(true,  PEEKED_DOUBLE_QUOTED_NAME);	  int    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
594	[BUG]  [BUGGY]  int  c  =  nextNonWhitespace(true,  isLiteral((  char)c));  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  c  =  nextNonWhitespace(true,  isLiteral((  char)c));  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  c  =  nextNonWhitespace(true,  isLiteral((  char)c));	  int    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
595	[BUG]  [BUGGY]  int  c  =  nextNonWhitespace(true,  PEEKED_SINGLE_QUOTED_NAME);  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  c  =  nextNonWhitespace(true,  PEEKED_SINGLE_QUOTED_NAME);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  c  =  nextNonWhitespace(true,  PEEKED_SINGLE_QUOTED_NAME);	  int    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
596	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  'e')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    'e'    ||    c    ==    'E')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
597	[BUG]  [BUGGY]  if(c  <  =  'e'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  'e'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  'e'  ||  c  ==  'E')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    'e'    ||    c    ==    'E')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
598	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'a'    ||    c    ==    'z')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
599	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'peek'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  [CE]  unclosed  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'peek'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'peek'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'a'    ||    c    ==    'z')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  unclosed  character  literal	102	None	replace
600	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'l'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'l'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'l'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'a'    ||    c    ==    'z')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
601	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)    ||    peeked    >=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
602	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)    ||    peeked    >=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
603	[BUG]  [BUGGY]  if(c  <  =  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
604	[BUG]  [BUGGY]  if(c  <  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
605	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
606	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
607	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
608	[BUG]  [BUGGY]  'try'  without  'catch'  or  'finally',  peeked  =(char)c;  [CE]  unclosed  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  'try'  without  'catch'  or  'finally',  peeked  =(char)c;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	'try'  without  'catch'  or  'finally',  peeked  =(char)c;	  'try'    without    'catch'    or    'finally'    	non-compiled	[CE]  unclosed  character  literal	8	None	replace
609	[BUG]  [BUGGY]  parent  =  parent.getParent();  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  parent  =  parent.getParent();  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	parent  =  parent.getParent();	  if(isLiteral((    char)c))    {    pos--;    return    peeked    =    PEEKED_UNQUOTED_NAME;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
610	[BUG]  [BUGGY]  parent  =(Parent)c;  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  parent  =(Parent)c;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	parent  =(Parent)c;	  if(isLiteral((    char)c))    {    pos--;    return    peeked    =    PEEKED_UNQUOTED_NAME;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
611	[BUG]  [BUGGY]  parentMap.put((  char)c,  pathNames[pos++]);  [CE]  illegal  start  of  expression  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  parentMap.put((  char)c,  pathNames[pos++]);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	parentMap.put((  char)c,  pathNames[pos++]);	  if(isLiteral((    char)c))    {    pos--;    return    peeked    =    PEEKED_UNQUOTED_NAME;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
612	[BUG]  [BUGGY]  parentMap.put((  char)c,  new  Integer(peekStack[stackSize  -  1]));  [CE]  illegal  start  of  expression  [FE]                                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  parentMap.put((  char)c,  new  Integer(peekStack[stackSize  -  1]));  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	parentMap.put((  char)c,  new  Integer(peekStack[stackSize  -  1]));	  if(isLiteral((    char)c))    {    pos--;    return    peeked    =    PEEKED_UNQUOTED_NAME;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
613	[BUG]  [BUGGY]  if(c  <  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
614	[BUG]  [BUGGY]  if(c  <  =  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
615	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a')  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a')  {  pos--;  }	  if(c    ==    'n'    ||    c    ==    'r')    {    pos--;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
616	[BUG]  [BUGGY]  if(!lenient  Reader)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(!lenient  Reader)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(!lenient  Reader)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  	17	None	replace
617	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
618	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
619	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
620	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_ARRAY)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_ARRAY)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_ARRAY)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
621	[BUG]  [BUGGY]  if(pos  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(pos  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(pos  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
622	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
623	[BUG]  [BUGGY]  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
624	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
625	[BUG]  [BUGGY]  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  }	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
626	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  }  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  }	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
627	[BUG]  [BUGGY]  if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
628	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
629	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
630	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
631	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(c  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
632	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.DOUBLE_QUOTED_NAME)  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.DOUBLE_QUOTED_NAME)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.DOUBLE_QUOTED_NAME)  {	  if(c!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
633	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JSONScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JSONScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JSONScope.NONEMPTY_OBJECT)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
634	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
635	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos++;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos++;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos++;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
636	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos-1;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  not  a  statement	11	None	replace
637	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DOUBLE_QUOTED_NAME)  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DOUBLE_QUOTED_NAME)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DOUBLE_QUOTED_NAME)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
638	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
639	[BUG]  [BUGGY]  if(c  <  =  ':'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  ':'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  ':'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
640	[BUG]  [BUGGY]  if(c  >=  ':'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  ':'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  ':'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
641	[BUG]  [BUGGY]  if(c  ==  '@')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '@')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '@')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
642	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    type   ");    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
643	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_ARRAY)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_ARRAY)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_ARRAY)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    type   ");    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
644	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.DOUBLE_QUOTED_NAME)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.DOUBLE_QUOTED_NAME)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.DOUBLE_QUOTED_NAME)  {  pos--;  }  else  {  throw  syntaxError( "Expected  type   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    type   ");    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
645	[BUG]  [BUGGY]  if(pos  >=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(pos  >=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(pos  >=  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
646	[BUG]  [BUGGY]  if(c  <  =  ':'  ||  c  >  '9')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  ':'  ||  c  >  '9')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  ':'  ||  c  >  '9')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    <    =    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
647	[BUG]  [BUGGY]  if(c  <  =  ':'  ||  c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  ':'  ||  c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  ':'  ||  c  ==  '')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    <    =    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
648	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'e')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'e')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'e')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
649	[BUG]  [BUGGY]  if(c  <  =  '.'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  '.'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  '.'  ||  c  ==  'r')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
650	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'a'  &&  c  <  =  'z')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'a'  &&  c  <  =  'z')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'a'  &&  c  <  =  'z')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
651	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
652	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
653	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'a')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'a')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'a')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    '.'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
654	[BUG]  [BUGGY]  if(c  <  NUMBER_CHAR_DECIMAL  ||  c  >  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  NUMBER_CHAR_DECIMAL  ||  c  >  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  NUMBER_CHAR_DECIMAL  ||  c  >  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
655	[BUG]  [BUGGY]  if(c  >=  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
656	[BUG]  [BUGGY]  if(c  ==  ':')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    'n')    {    int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	67	None	replace
657	[BUG]  [BUGGY]  if(c  ==  '@')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '@')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '@')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    'n')    {    int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	67	None	replace
658	[BUG]  [BUGGY]  if(c  ==  '@')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '@')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '@')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    'n')    {    int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	67	None	replace
659	[BUG]  [BUGGY]  if(c  <  =  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
660	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '*')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '*')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '*')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    '')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
661	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
662	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [CE]  illegal  start  of  expression  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
663	[BUG]  [BUGGY]  if(c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '+')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    '')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
664	[BUG]  [BUGGY]  if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {	  if(c!=    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
665	[BUG]  [BUGGY]  if(c!=  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  NUMBER_CHAR_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
666	[BUG]  [BUGGY]  if(c  <  =  ':'  ||  c  >  '9')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  ':'  ||  c  >  '9')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  ':'  ||  c  >  '9')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    <    =    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
667	[BUG]  [BUGGY]  if(c  <  =  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
668	[BUG]  [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c!=    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
669	[BUG]  [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)  ||  peeked  >  PEEKED_BUFFERED)  {  [CE]  ';'  expected  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)  ||  peeked  >  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)  ||  peeked  >  PEEKED_BUFFERED)  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    >=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  ';'  expected	103	None	replace
670	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
671	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
672	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
673	[BUG]  [BUGGY]  String  c  =  nextNonWhitespace(true,  isLiteral((  char)c));  [CE]  illegal  start  of  expression  [FE]                                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  String  c  =  nextNonWhitespace(true,  isLiteral((  char)c));  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	String  c  =  nextNonWhitespace(true,  isLiteral((  char)c));	  String    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
674	[BUG]  [BUGGY]  if(c  <  =  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    >=    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
675	[BUG]  [BUGGY]  if(c  ==  ':')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {  [CE]  ';'  expected  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(!isLiteral((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(!isLiteral((    char)c))    {    	non-compiled	[CE]  ';'  expected	68	None	replace
676	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
677	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
678	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ':')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    return    PEEKED_UNQUOTED_NAME;    }    else    if(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
679	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '@')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  '@')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  '@')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    return    PEEKED_UNQUOTED_NAME;    }    else    if(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
680	[BUG]  [BUGGY]  if(c  <  =  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
681	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
682	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
683	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
684	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
685	[BUG]  [BUGGY]  if(c  <  =  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
686	[BUG]  [BUGGY]  if(c  <  NUMBER_CHAR_DIGIT  ||  c  >  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  NUMBER_CHAR_DIGIT  ||  c  >  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  NUMBER_CHAR_DIGIT  ||  c  >  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT    ||    c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
687	[BUG]  [BUGGY]  if(c  <  =  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT    ||    c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
688	[BUG]  [BUGGY]  if(c  >=  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT    ||    c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
689	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(pos  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(pos  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(pos  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
690	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(pos  ==  '.')  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(pos  ==  '.')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(pos  ==  '.')  {  pos--;  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
691	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(pos  >=  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(pos  >=  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(pos  >=  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
692	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '%')  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '%')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '%')  {  pos--;  }	  if(c    ==    ':')    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
693	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '/')  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '/')  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '/')  {  pos--;  }	  if(c    ==    ':')    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
694	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos++;  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  pos++;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  pos++;  }	  if(c    ==    'n'    ||    c    ==    'r')    {    pos-1;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
695	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    'n'    ||    c    ==    'r')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
696	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  <  =  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLiteral((  char)c)||  peeked  <  =  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLiteral((  char)c)||  peeked  <  =  PEEKED_BUFFERED)  {	  if(isLiteral((    char)c)    ||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
697	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
698	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
699	[BUG]  [BUGGY]  if(c  <  =  ':'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  ':'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  ':'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
700	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  return  PEEKED_UNQUOTED_NAME;  }  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  '-')  {  return  PEEKED_UNQUOTED_NAME;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  '-')  {  return  PEEKED_UNQUOTED_NAME;  }	  if(c    ==    ':'    ||    c    ==    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
701	[BUG]  [BUGGY]  if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
702	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    'n')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
703	[BUG]  [BUGGY]  if(c  <  =  ':'  ||  c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  ':'  ||  c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  ':'  ||  c  ==  'n')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    'n')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
704	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'p')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'p')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  'p')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    ':'    ||    c    ==    'n')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
705	[BUG]  [BUGGY]  if(c  >=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
706	[BUG]  [BUGGY]  if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
707	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_E  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_E  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_E  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
708	[BUG]  [BUGGY]  if(c  <  =  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    '.'    ||    c    ==    ',')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
709	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos++;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos++;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  pos++;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    '.'    ||    c    ==    ',')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
710	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_UNQUOTED_NAME;  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_UNQUOTED_NAME;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_UNQUOTED_NAME;  }	  if(c    ==    '.'    ||    c    ==    ',')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
711	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_BLOCK)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
712	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_BLOCK)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
713	[BUG]  [BUGGY]  if(c  <  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
714	[BUG]  [BUGGY]  if(c  >=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  >=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  >=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
715	[BUG]  [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
716	[BUG]  [BUGGY]  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
717	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  ||  c  ==  'n'  ||  c  ==  't')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  if(c    ==    ':')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
718	[BUG]  [BUGGY]  char  c  =  nextNonWhitespace(true,  isLiteral((  char)c));  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  char  c  =  nextNonWhitespace(true,  isLiteral((  char)c));  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	char  c  =  nextNonWhitespace(true,  isLiteral((  char)c));	  char    c    =    nextNonWhitespace(true);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
719	[BUG]  [BUGGY]  if(c!=  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  '.')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    return    PEEKED_UNQUOTED_NAME;    }    else    if(peekStack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
720	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ':')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    return    PEEKED_UNQUOTED_NAME;    }    else    if(peekStack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
721	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    return    PEEKED_UNQUOTED_NAME;    }    else    if(peekStack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
722	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(isLenient((  char)c))  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
723	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(isLiteral((    char)c))    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
724	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
725	[BUG]  [BUGGY]  if(c!=  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  '.')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
726	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
727	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
728	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(node  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(node  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  ':')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(node  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
729	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'a'  &&  c  <  =  'z')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  'a'  &&  c  <  =  'z')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  'a'  &&  c  <  =  'z')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(c  ==  'n')  {	  if(c    ==    '.')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
730	[BUG]  [BUGGY]  if(c  <  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DIGIT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
731	[BUG]  [BUGGY]  if(c  <  =  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    NUMBER_CHAR_DIGIT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
732	[BUG]  [BUGGY]  if(c  <  NUMBER_CHAR_DECIMAL  ||  c  >  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  NUMBER_CHAR_DECIMAL  ||  c  >  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  NUMBER_CHAR_DECIMAL  ||  c  >  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_DIGIT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
733	[BUG]  [BUGGY]  if(c  <  =  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_DIGIT)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_DIGIT)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
734	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_ARRAY)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_ARRAY)  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
735	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
736	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
737	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
738	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  JsonScope.NONEMPTY_LONG)  {	  if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
739	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  return  PEEKED_BUFFERED;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  return  PEEKED_BUFFERED;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  return  PEEKED_BUFFERED;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
740	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  return  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  return  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  return  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
741	[BUG]  [BUGGY]  if(c  <  =  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_EXP_SIGN)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT    ||    c    ==    NUMBER_CHAR_EXP_SIGN)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
742	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  ==  'r')  {  return  PEEKED_UNQUOTED_NAME;  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  'n'  ||  c  ==  'r')  {  return  PEEKED_UNQUOTED_NAME;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  'n'  ||  c  ==  'r')  {  return  PEEKED_UNQUOTED_NAME;  }	  if(c    ==    'n'    ||    c    ==    'r')    {    return    PEEKED_UNQUOTED_NAME;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
743	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  }  [CE]  'else'  without  'if'  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_STRING)    {    pos--;    }    	non-compiled	[CE]  'else'  without  'if'	86	None	replace
744	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  pos--;  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  pos--;  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_STRING)    {    pos--;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
745	[BUG]  [BUGGY]  if(c!=  '.')  {  [CE]  illegal  start  of  expression  [FE]            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  '.')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  '.')  {	  if(c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
746	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '@')  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  '@')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  '@')  {	  if(c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
747	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  '/')  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  '/')  {	  if(c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
748	[BUG]  [BUGGY]  if(c  <  =  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
749	[BUG]  [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c!=  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
750	[BUG]  [BUGGY]  if(c  <  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [CE]  illegal  start  of  expression  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
751	[BUG]  [BUGGY]  if(c  <  =  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [CE]  illegal  start  of  expression  [FE]                                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
752	[BUG]  [BUGGY]  if(c  ==  ':'  <  =  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  ':'  <  =  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  ':'  <  =  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string!  If(isLiteral((  char)c))  {	  if(c    ==    ':'    <    =    '-')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
753	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  'else'  without  'if'  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  'else'  without  'if'	34	None	replace
754	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  'else'  without  'if'  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  'else'  without  'if'	34	None	replace
755	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  'else'  without  'if'  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  'else'  without  'if'	34	None	replace
756	[BUG]  [BUGGY]  if(c  <  =  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  NUMBER_CHAR_DIGIT  ||  c  ==  NUMBER_CHAR_DECIMAL)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DIGIT    ||    c    ==    NUMBER_CHAR_DECIMAL)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
757	[BUG]  [BUGGY]  if(c  ==  '+'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '+'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '+'  ||  c  ==  '-')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    'e'    ||    c    ==    'E')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
758	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.'  ||  c  ==  'e')  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {	  if(c    ==    'e'    ||    c    ==    'E')    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
759	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(nonWhitespace(true));  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos  =  nextNonWhitespace(nonWhitespace(true));  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos  =  nextNonWhitespace(nonWhitespace(true));	  int    pos--;    	non-compiled	[CE]  	28	None	replace
760	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(nonWhitespace(false));  [CE]  'else'  without  'if'  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos  =  nextNonWhitespace(nonWhitespace(false));  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos  =  nextNonWhitespace(nonWhitespace(false));	  int    pos--;    	non-compiled	[CE]  'else'  without  'if'	28	None	replace
761	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(stackSize  -  1);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos  =  nextNonWhitespace(stackSize  -  1);  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos  =  nextNonWhitespace(stackSize  -  1);	  int    pos--;    	non-compiled	[CE]  	28	None	replace
762	[BUG]  [BUGGY]  int  pos  =  stack.length  -  1;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  int  pos  =  stack.length  -  1;  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	int  pos  =  stack.length  -  1;	  int    pos--;    	non-compiled	[CE]  	28	None	replace
763	[BUG]  [BUGGY]  Integer  c  =  nextNonWhitespace(false,  isLiteral((  char)c));  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  Integer  c  =  nextNonWhitespace(false,  isLiteral((  char)c));  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	Integer  c  =  nextNonWhitespace(false,  isLiteral((  char)c));	  Integer    c    =    nextNonWhitespace(false);    	non-compiled	[CE]  	51	None	replace
764	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c!=  JsonScope.NONEMPTY_LONG)  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c!=  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c!=  JsonScope.NONEMPTY_LONG)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
765	[BUG]  [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {	  pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(c    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  	125	None	replace
766	[BUG]  [BUGGY]  if(c  <  =  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  <  =  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  <  =  NUMBER_CHAR_DECIMAL  ||  c  ==  NUMBER_CHAR_EXP_E)  {  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if(isLiteral((  char)c))  {  }	  if(c    ==    NUMBER_CHAR_DECIMAL    ||    c    ==    NUMBER_CHAR_EXP_E)    {    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    if(isLiteral((    char)c))    {    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
767	[BUG]  [BUGGY]  if(c  ==  '.')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  '.')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  '.')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  	32	None	replace
768	[BUG]  [BUGGY]  if(c  ==  'n')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();      [BUGGY]  if(c  ==  'n')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {  [BUGGY]      if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	513	514	3	replace	if(c  ==  'n')  {  int  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  If(isLiteral((  char)c))  {	  int    pos--;    //    Don't    consume    the    first    character    in    an    unquoted    string.    If(isLiteral((    char)c))    {    	non-compiled	[CE]  	32	None	replace
