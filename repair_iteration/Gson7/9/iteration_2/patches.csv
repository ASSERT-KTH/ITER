bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(p  >=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  >=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  >=  PEEKED_DOUBLE_QUOTED)  {	  if(peekedNumberLength    >=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	48	None	replace
2	[BUG]  [BUGGY]  if(pos!=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos!=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos!=  PEEKED_DOUBLE_QUOTED)  {	  if(peekedNumberLength    >=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	48	None	replace
3	[BUG]  [BUGGY]  if(pos  >  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >  PEEKED_DOUBLE_QUOTED)  {	  if(peekedNumberLength    >=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	48	None	replace
4	[BUG]  [BUGGY]  int  buffer  =  stack.peek()  -  1;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.peek()  -  1;  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.peek()  -  1;	  int    buffer    =    stack.peek();    	non-compiled	[CE]  	73	None	replace
5	[BUG]  [BUGGY]  int  buffer  =  pathIndices.peek();  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  pathIndices.peek();  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  pathIndices.peek();	  int    buffer    =    stack.peek();    	non-compiled	[CE]  	73	None	replace
6	[BUG]  [BUGGY]  int  buffer  =  peekedLong.peek();  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  peekedLong.peek();  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  peekedLong.peek();	  int    buffer    =    stack.peek();    	non-compiled	[CE]  	73	None	replace
7	[BUG]  [BUGGY]  int  buffer  =  stack.length();  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.length();  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.length();	  int    buffer    =    stack.peek();    	non-compiled	[CE]  	73	None	replace
8	[BUG]  [BUGGY]  int  buffer  =  stack.size()  -  1;  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.size()  -  1;  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.size()  -  1;	  int    buffer    =    stack.peek();    	non-compiled	[CE]  	73	None	replace
9	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(path));  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(path));  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(path));	  IntBuffer    buffer    =    new    IntBuffer(Peekes.parseInt(peeked));    	non-compiled	[CE]  	43	None	replace
10	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(peeked)+  1);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(peeked)+  1);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(peeked)+  1);	  IntBuffer    buffer    =    new    IntBuffer(Peekes.parseInt(peeked));    	non-compiled	[CE]  	43	None	replace
11	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(peekedLong));  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(peekedLong));  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(peekedLong));	  IntBuffer    buffer    =    new    IntBuffer(Peekes.parseInt(peeked));    	non-compiled	[CE]  	43	None	replace
12	[BUG]  [BUGGY]  if(p  >  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  >  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  >  PEEKED_DOUBLE_QUOTED)  {	  if(peekedNumberLength    >    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	22	None	replace
13	[BUG]  [BUGGY]  if(pos  >  0  ||  peekedNumberLength  >  0)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >  0  ||  peekedNumberLength  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >  0  ||  peekedNumberLength  >  0)  {	  if(peekedNumberLength    >    0    ||    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	16	None	replace
14	[BUG]  [BUGGY]  if(buffer.length()  >  0  ||  peekedNumberLength  >  0)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(buffer.length()  >  0  ||  peekedNumberLength  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(buffer.length()  >  0  ||  peekedNumberLength  >  0)  {	  if(peekedNumberLength    >    0    ||    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	16	None	replace
15	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length()  ==  0  ||  peekedNumberLength  >  0)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(buffer!=  null  ||  buffer.length()  ==  0  ||  peekedNumberLength  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(buffer!=  null  ||  buffer.length()  ==  0  ||  peekedNumberLength  >  0)  {	  if(peekedNumberLength    >    0    ||    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	16	None	replace
16	[BUG]  [BUGGY]  if(pos  <  =  0  ||  peekedNumberLength  >  0)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  <  =  0  ||  peekedNumberLength  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  <  =  0  ||  peekedNumberLength  >  0)  {	  if(peekedNumberLength    >    0    ||    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	16	None	replace
17	[BUG]  [BUGGY]  if(pos  <  0  ||  peekedNumberLength  >  0)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  <  0  ||  peekedNumberLength  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  <  0  ||  peekedNumberLength  >  0)  {	  if(peekedNumberLength    >    0    ||    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	16	None	replace
18	[BUG]  [BUGGY]  if(pos  >  0  &&  peekedNumber.length()  >  0)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >  0  &&  peekedNumber.length()  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >  0  &&  peekedNumber.length()  >  0)  {	  if(peekedNumberLength    >    0    &&    peekedNumber.length()    >    0)    {    	non-compiled	[CE]  	19	None	replace
19	[BUG]  [BUGGY]  if(buffer.length()  >  0  ||  peekedNumberLength  >  0  ||  peekedNumber.length()  >  0)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(buffer.length()  >  0  ||  peekedNumberLength  >  0  ||  peekedNumber.length()  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(buffer.length()  >  0  ||  peekedNumberLength  >  0  ||  peekedNumber.length()  >  0)  {	  if(peekedNumberLength    >    0    &&    peekedNumber.length()    >    0)    {    	non-compiled	[CE]  	19	None	replace
20	[BUG]  [BUGGY]  if(peekedNumberLength  >  0  ||  peekedNumber.length()  >  0)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  0  ||  peekedNumber.length()  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  0  ||  peekedNumber.length()  >  0)  {	  if(peekedNumberLength    >    0    &&    peekedNumber.length()    >    0)    {    	non-compiled	[CE]  	19	None	replace
21	[BUG]  [BUGGY]  if(pos  >  0  ||  peekedNumberLength  >  0  ||  peekedNumber.length()  >  0)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >  0  ||  peekedNumberLength  >  0  ||  peekedNumber.length()  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >  0  ||  peekedNumberLength  >  0  ||  peekedNumber.length()  >  0)  {	  if(peekedNumberLength    >    0    &&    peekedNumber.length()    >    0)    {    	non-compiled	[CE]  	19	None	replace
22	[BUG]  [BUGGY]  if(pos  >  0  &&  peekedNumberLength  >  0)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >  0  &&  peekedNumberLength  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >  0  &&  peekedNumberLength  >  0)  {	  if(peekedNumberLength    >    0    &&    peekedNumber.length()    >    0)    {    	non-compiled	[CE]  	19	None	replace
23	[BUG]  [BUGGY]  if(buffer.length()  >  0  &&  peekedNumberLength  >  0)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(buffer.length()  >  0  &&  peekedNumberLength  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(buffer.length()  >  0  &&  peekedNumberLength  >  0)  {	  if(peekedNumberLength    >    0    &&    peekedNumber.length()    >    0)    {    	non-compiled	[CE]  	19	None	replace
24	[BUG]  [BUGGY]  if(peekedNumberLength  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_DOUBLE_QUOTED    ||    peekedNumberLength    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	50	None	replace
25	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_DOUBLE_QUOTED    ||    peekedNumberLength    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	50	None	replace
26	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_DOUBLE_QUOTED    ||    peekedNumberLength    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	50	None	replace
27	[BUG]  [BUGGY]  if(peekedNumberLength  ==  PEEKED_SINGLE_QUOTED  ||  peekedNumberLength  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  PEEKED_SINGLE_QUOTED  ||  peekedNumberLength  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  PEEKED_SINGLE_QUOTED  ||  peekedNumberLength  ==  PEEKED_DOUBLE_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_DOUBLE_QUOTED    ||    peekedNumberLength    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	50	None	replace
28	[BUG]  [BUGGY]  if(pos  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_DOUBLE_QUOTED    ||    peekedNumberLength    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	50	None	replace
29	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(peekedString)+  1);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(peekedString)+  1);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(peekedString)+  1);	  IntBuffer    buffer    =    new    IntBuffer(Peekes.parseInt(peekedString));    	non-compiled	[CE]  	42	None	replace
30	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(pathNames));  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(pathNames));  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(pathNames));	  IntBuffer    buffer    =    new    IntBuffer(Peekes.parseInt(peekedString));    	non-compiled	[CE]  	42	None	replace
31	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(pathNames[peekedString]));  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(pathNames[peekedString]));  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(pathNames[peekedString]));	  IntBuffer    buffer    =    new    IntBuffer(Peekes.parseInt(peekedString));    	non-compiled	[CE]  	42	None	replace
32	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(peekedString),  peekedNumberLength);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(peekedString),  peekedNumberLength);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(peekedString),  peekedNumberLength);	  IntBuffer    buffer    =    new    IntBuffer(Peekes.parseInt(peekedString));    	non-compiled	[CE]  	42	None	replace
33	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(peekedString),  0);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(peekedString),  0);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(peekedString),  0);	  IntBuffer    buffer    =    new    IntBuffer(Peekes.parseInt(peekedString));    	non-compiled	[CE]  	42	None	replace
34	[BUG]  [BUGGY]  if(pos  <  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  <  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  <  PEEKED_SINGLE_QUOTED)  {	  if(pos    >    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	31	None	replace
35	[BUG]  [BUGGY]  if(pos  <  =  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  <  =  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  <  =  PEEKED_SINGLE_QUOTED)  {	  if(pos    >    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	31	None	replace
36	[BUG]  [BUGGY]  if(p  >  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  >  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  >  PEEKED_SINGLE_QUOTED)  {	  if(peekedNumberLength    >    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	12	None	replace
37	[BUG]  [BUGGY]  if(PeekedNumberLength  >  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(PeekedNumberLength  >  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(PeekedNumberLength  >  PEEKED_SINGLE_QUOTED)  {	  if(PeekedNumberLength    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	25	None	replace
38	[BUG]  [BUGGY]  if(PeekedNumberLength  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(PeekedNumberLength  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(PeekedNumberLength  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(PeekedNumberLength    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	25	None	replace
39	[BUG]  [BUGGY]  if(PeekedNumberLength  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(PeekedNumberLength  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(PeekedNumberLength  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  if(PeekedNumberLength    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	25	None	replace
40	[BUG]  [BUGGY]  int  buffer  =  nextInt(pathNames[stackSize  -  1]);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  nextInt(pathNames[stackSize  -  1]);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  nextInt(pathNames[stackSize  -  1]);	  int    buffer    =    nextInt(pathNames[pos    -    1]);    	non-compiled	[CE]  	74	None	replace
41	[BUG]  [BUGGY]  int  buffer  =  nextInt(pathNames[pos  -  1]  +  1);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  nextInt(pathNames[pos  -  1]  +  1);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  nextInt(pathNames[pos  -  1]  +  1);	  int    buffer    =    nextInt(pathNames[pos    -    1]);    	non-compiled	[CE]  	74	None	replace
42	[BUG]  [BUGGY]  int  buffer  =  nextInt(pathNames[peekedLong  -  1]);  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  nextInt(pathNames[peekedLong  -  1]);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  nextInt(pathNames[peekedLong  -  1]);	  int    buffer    =    nextInt(pathNames[pos    -    1]);    	non-compiled	[CE]  	74	None	replace
43	[BUG]  [BUGGY]  int  buffer  =  nextInt(pathNames[pos  -  1]  +  PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  nextInt(pathNames[pos  -  1]  +  PEEKED_DOUBLE_QUOTED);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  nextInt(pathNames[pos  -  1]  +  PEEKED_DOUBLE_QUOTED);	  int    buffer    =    nextInt(pathNames[pos    -    1]);    	non-compiled	[CE]  	74	None	replace
44	[BUG]  [BUGGY]  int  buffer  =  nextInt(pathNames[pos  -  1]  +  PEEKED_SINGLE_QUOTED);  [CE]  [FE]                                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  nextInt(pathNames[pos  -  1]  +  PEEKED_SINGLE_QUOTED);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  nextInt(pathNames[pos  -  1]  +  PEEKED_SINGLE_QUOTED);	  int    buffer    =    nextInt(pathNames[pos    -    1]);    	non-compiled	[CE]  	74	None	replace
45	[BUG]  [BUGGY]  int  buffer  =  nextInt(pathNames[pos  -  1],  peeked);  [CE]  [FE]                                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  nextInt(pathNames[pos  -  1],  peeked);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  nextInt(pathNames[pos  -  1],  peeked);	  int    buffer    =    nextInt(pathNames[pos    -    1]);    	non-compiled	[CE]  	74	None	replace
46	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {	  if(pos    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	14	None	replace
47	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  if(pos    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	14	None	replace
48	[BUG]  [BUGGY]  if(pos  >  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >  NUMBER_CHAR_EXP_SIGN)  {	  if(peekedNumberLength    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	34	None	replace
49	[BUG]  [BUGGY]  if(pos  <  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  <  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  <  NUMBER_CHAR_EXP_SIGN)  {	  if(peekedNumberLength    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	34	None	replace
50	[BUG]  [BUGGY]  if(PeekedNumberLength  >  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(PeekedNumberLength  >  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(PeekedNumberLength  >  NUMBER_CHAR_EXP_SIGN)  {	  if(peekedNumberLength    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	34	None	replace
51	[BUG]  [BUGGY]  if(pos  <  =  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  <  =  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  <  =  NUMBER_CHAR_EXP_SIGN)  {	  if(peekedNumberLength    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	34	None	replace
52	[BUG]  [BUGGY]  int  buffer  =(int)Math.floor(pathNames[pos  -  1]);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =(int)Math.floor(pathNames[pos  -  1]);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =(int)Math.floor(pathNames[pos  -  1]);	  int    buffer    =(int)Math.floor(peekedLong,    pathNames[pos    -    1]);    	non-compiled	[CE]  	45	None	replace
53	[BUG]  [BUGGY]  int  buffer  =(int)Math.floor(buffer,  pathNames[pos  -  1]);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =(int)Math.floor(buffer,  pathNames[pos  -  1]);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =(int)Math.floor(buffer,  pathNames[pos  -  1]);	  int    buffer    =(int)Math.floor(peekedLong,    pathNames[pos    -    1]);    	non-compiled	[CE]  	45	None	replace
54	[BUG]  [BUGGY]  char  buffer  =(char)Math.floor(peekedLong,  pathNames[pos  -  1]);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  char  buffer  =(char)Math.floor(peekedLong,  pathNames[pos  -  1]);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	char  buffer  =(char)Math.floor(peekedLong,  pathNames[pos  -  1]);	  int    buffer    =(int)Math.floor(peekedLong,    pathNames[pos    -    1]);    	non-compiled	[CE]  	45	None	replace
55	[BUG]  [BUGGY]  long  buffer  =(long)Math.floor(peekedLong,  pathNames[pos  -  1]);  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  long  buffer  =(long)Math.floor(peekedLong,  pathNames[pos  -  1]);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	long  buffer  =(long)Math.floor(peekedLong,  pathNames[pos  -  1]);	  int    buffer    =(int)Math.floor(peekedLong,    pathNames[pos    -    1]);    	non-compiled	[CE]  	45	None	replace
56	[BUG]  [BUGGY]  float  buffer  =(float)Math.floor(peekedLong,  pathNames[pos  -  1]);  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  float  buffer  =(float)Math.floor(peekedLong,  pathNames[pos  -  1]);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	float  buffer  =(float)Math.floor(peekedLong,  pathNames[pos  -  1]);	  int    buffer    =(int)Math.floor(peekedLong,    pathNames[pos    -    1]);    	non-compiled	[CE]  	45	None	replace
57	[BUG]  [BUGGY]  int  buffer  =  stack.getBounds(0,  stackSize  -  1);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.getBounds(0,  stackSize  -  1);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.getBounds(0,  stackSize  -  1);	  int    buffer    =    stack.getBounds(0,    stack.length    -    1);    	non-compiled	[CE]  	72	None	replace
58	[BUG]  [BUGGY]  int  buffer  =  stack.getBounds(0,  stack.length  -  2);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.getBounds(0,  stack.length  -  2);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.getBounds(0,  stack.length  -  2);	  int    buffer    =    stack.getBounds(0,    stack.length    -    1);    	non-compiled	[CE]  	72	None	replace
59	[BUG]  [BUGGY]  int  buffer  =  stack.getBounds(1,  stack.length  -  1);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.getBounds(1,  stack.length  -  1);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.getBounds(1,  stack.length  -  1);	  int    buffer    =    stack.getBounds(0,    stack.length    -    1);    	non-compiled	[CE]  	72	None	replace
60	[BUG]  [BUGGY]  int  buffer  =  stack.getBounds(0,  stackLength  -  1);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.getBounds(0,  stackLength  -  1);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.getBounds(0,  stackLength  -  1);	  int    buffer    =    stack.getBounds(0,    stack.length    -    1);    	non-compiled	[CE]  	72	None	replace
61	[BUG]  [BUGGY]  int  buffer  =  stack.getBounds(0,  stack.length  -  3);  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.getBounds(0,  stack.length  -  3);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.getBounds(0,  stack.length  -  3);	  int    buffer    =    stack.getBounds(0,    stack.length    -    1);    	non-compiled	[CE]  	72	None	replace
62	[BUG]  [BUGGY]  if(pos  ==  PEEKED_BUFFER)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  ==  PEEKED_BUFFER)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  ==  PEEKED_BUFFER)  {	  if(peekedNumberLength    ==    PEEKED_BUFFER)    {    	non-compiled	[CE]  	39	None	replace
63	[BUG]  [BUGGY]  if(peekedNumberLength!=  PEEKED_BUFFER)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength!=  PEEKED_BUFFER)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength!=  PEEKED_BUFFER)  {	  if(peekedNumberLength    ==    PEEKED_BUFFER)    {    	non-compiled	[CE]  	39	None	replace
64	[BUG]  [BUGGY]  if(peekedNumberLength  >  PEEKED_BUFFER)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  PEEKED_BUFFER)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  PEEKED_BUFFER)  {	  if(peekedNumberLength    ==    PEEKED_BUFFER)    {    	non-compiled	[CE]  	39	None	replace
65	[BUG]  [BUGGY]  if(peekedNumberLength  ==  PEEKED_BUFFER  ||  peekedNumberLength  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  PEEKED_BUFFER  ||  peekedNumberLength  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  PEEKED_BUFFER  ||  peekedNumberLength  ==  PEEKED_DOUBLE_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_BUFFER)    {    	non-compiled	[CE]  	39	None	replace
66	[BUG]  [BUGGY]  if(peekedNumberLength  >=  PEEKED_BUFFER)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >=  PEEKED_BUFFER)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >=  PEEKED_BUFFER)  {	  if(peekedNumberLength    ==    PEEKED_BUFFER)    {    	non-compiled	[CE]  	39	None	replace
67	[BUG]  [BUGGY]  if(pos  >=  PEEKED_BUFFER)  {  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >=  PEEKED_BUFFER)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >=  PEEKED_BUFFER)  {	  if(peekedNumberLength    ==    PEEKED_BUFFER)    {    	non-compiled	[CE]  	39	None	replace
68	[BUG]  [BUGGY]  if(pos  >  0  &&  buffer.charAt(peekedNumberLength  -  1)!=  ''')  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >  0  &&  buffer.charAt(peekedNumberLength  -  1)!=  ''')  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >  0  &&  buffer.charAt(peekedNumberLength  -  1)!=  ''')  {	  if(peekedNumberLength    >    0    &&    buffer.charAt(peekedNumberLength    -    1)!=    ''')    {    	non-compiled	[CE]  	61	None	replace
69	[BUG]  [BUGGY]  if(peekedNumberLength  >  0  &&  buffer.charAt(pos  -  1)!=  ''')  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  0  &&  buffer.charAt(pos  -  1)!=  ''')  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  0  &&  buffer.charAt(pos  -  1)!=  ''')  {	  if(peekedNumberLength    >    0    &&    buffer.charAt(peekedNumberLength    -    1)!=    ''')    {    	non-compiled	[CE]  	61	None	replace
70	[BUG]  [BUGGY]  if(pos  >  0  ||  buffer.charAt(peekedNumberLength  -  1)!=  ''')  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >  0  ||  buffer.charAt(peekedNumberLength  -  1)!=  ''')  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >  0  ||  buffer.charAt(peekedNumberLength  -  1)!=  ''')  {	  if(peekedNumberLength    >    0    &&    buffer.charAt(peekedNumberLength    -    1)!=    ''')    {    	non-compiled	[CE]  	61	None	replace
71	[BUG]  [BUGGY]  if(peekedNumberLength  >  0  ||  buffer.charAt(peekedNumberLength  -  1)!=  ''')  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  0  ||  buffer.charAt(peekedNumberLength  -  1)!=  ''')  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  0  ||  buffer.charAt(peekedNumberLength  -  1)!=  ''')  {	  if(peekedNumberLength    >    0    &&    buffer.charAt(peekedNumberLength    -    1)!=    ''')    {    	non-compiled	[CE]  	61	None	replace
72	[BUG]  [BUGGY]  if(pos!=  PEEKED_DECIMAL)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos!=  PEEKED_DECIMAL)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos!=  PEEKED_DECIMAL)  {	  if(peekedNumberLength!=    PEEKED_DECIMAL)    {    	non-compiled	[CE]  	68	None	replace
73	[BUG]  [BUGGY]  if(pos  >=  PEEKED_DECIMAL)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >=  PEEKED_DECIMAL)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >=  PEEKED_DECIMAL)  {	  if(peekedNumberLength!=    PEEKED_DECIMAL)    {    	non-compiled	[CE]  	68	None	replace
74	[BUG]  [BUGGY]  if(peekedNumberLength!=  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength!=  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength!=  NUMBER_CHAR_DECIMAL)  {	  if(peekedNumberLength!=    PEEKED_DECIMAL)    {    	non-compiled	[CE]  	68	None	replace
75	[BUG]  [BUGGY]  if(peekedNumberLength  >  PEEKED_DECIMAL)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  PEEKED_DECIMAL)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  PEEKED_DECIMAL)  {	  if(peekedNumberLength!=    PEEKED_DECIMAL)    {    	non-compiled	[CE]  	68	None	replace
76	[BUG]  [BUGGY]  if(pos  ==  PEEKED_DECIMAL)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  ==  PEEKED_DECIMAL)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  ==  PEEKED_DECIMAL)  {	  if(peekedNumberLength!=    PEEKED_DECIMAL)    {    	non-compiled	[CE]  	68	None	replace
77	[BUG]  [BUGGY]  if(pos!=  PEEKED_EXP_SIGN)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos!=  PEEKED_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos!=  PEEKED_EXP_SIGN)  {	  if(peekedNumberLength!=    PEEKED_EXP_SIGN)    {    	non-compiled	[CE]  	5	None	replace
78	[BUG]  [BUGGY]  if(pos  >=  PEEKED_EXP_SIGN)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >=  PEEKED_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >=  PEEKED_EXP_SIGN)  {	  if(peekedNumberLength!=    PEEKED_EXP_SIGN)    {    	non-compiled	[CE]  	5	None	replace
79	[BUG]  [BUGGY]  if(pos  <  =  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  <  =  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  <  =  PEEKED_DOUBLE_QUOTED)  {	  if(pos    >=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	24	None	replace
80	[BUG]  [BUGGY]  if(pos  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  ==  NUMBER_CHAR_DECIMAL)  {	  if(peekedNumberLength    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	54	None	replace
81	[BUG]  [BUGGY]  if(peekedNumberLength  >  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  NUMBER_CHAR_DECIMAL)  {	  if(peekedNumberLength    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	54	None	replace
82	[BUG]  [BUGGY]  if(peekedNumberLength  ==  NUMBER_CHAR_DECIMAL  ||  peekedNumberLength  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  NUMBER_CHAR_DECIMAL  ||  peekedNumberLength  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  NUMBER_CHAR_DECIMAL  ||  peekedNumberLength  ==  NUMBER_CHAR_EXP_DIGIT)  {	  if(peekedNumberLength    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	54	None	replace
83	[BUG]  [BUGGY]  if(PeekedNumberLength  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(PeekedNumberLength  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(PeekedNumberLength  ==  NUMBER_CHAR_DECIMAL)  {	  if(peekedNumberLength    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	54	None	replace
84	[BUG]  [BUGGY]  if(peekedNumberLength  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  NUMBER_CHAR_EXP_DIGIT)  {	  if(peekedNumberLength    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	54	None	replace
85	[BUG]  [BUGGY]  if(peekedNumberLength  <  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  <  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  <  PEEKED_SINGLE_QUOTED)  {	  if(peekedNumberLength    <    =    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	75	None	replace
86	[BUG]  [BUGGY]  if(p  <  =  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  <  =  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  <  =  PEEKED_SINGLE_QUOTED)  {	  if(peekedNumberLength    <    =    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	75	None	replace
87	[BUG]  [BUGGY]  Integer  buf  =  Integer.parseInt(peekedInt);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  Integer.parseInt(peekedInt);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  Integer.parseInt(peekedInt);	  Integer    buf    =    Integer.parseInt(peekedLong);    	non-compiled	[CE]  	28	None	replace
88	[BUG]  [BUGGY]  Integer  buf  =  Integer.parseInt(buffer,peekedLong);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  Integer.parseInt(buffer,peekedLong);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  Integer.parseInt(buffer,peekedLong);	  Integer    buf    =    Integer.parseInt(peekedLong);    	non-compiled	[CE]  	28	None	replace
89	[BUG]  [BUGGY]  Integer  buf  =  Integer.parseInt(buffer);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  Integer.parseInt(buffer);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  Integer.parseInt(buffer);	  Integer    buf    =    Integer.parseInt(peekedLong);    	non-compiled	[CE]  	28	None	replace
90	[BUG]  [BUGGY]  Integer  buf  =  Integer.parseInt(path);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  Integer.parseInt(path);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  Integer.parseInt(path);	  Integer    buf    =    Integer.parseInt(peekedLong);    	non-compiled	[CE]  	28	None	replace
91	[BUG]  [BUGGY]  Integer  buf  =  Integer.parseInt(result);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  Integer.parseInt(result);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  Integer.parseInt(result);	  Integer    buf    =    Integer.parseInt(peekedLong);    	non-compiled	[CE]  	28	None	replace
92	[BUG]  [BUGGY]  if(pos  >  1)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >  1)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >  1)  {	  if(peekedNumberLength    >    1)    {    	non-compiled	[CE]  	65	None	replace
93	[BUG]  [BUGGY]  if(peekedNumberLength  >  1  &&  peekedNumber  <  pathNames.length)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  1  &&  peekedNumber  <  pathNames.length)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  1  &&  peekedNumber  <  pathNames.length)  {	  if(peekedNumberLength    >    1)    {    	non-compiled	[CE]  	65	None	replace
94	[BUG]  [BUGGY]  if(peekedNumberLength  >  1  &&  peekedNumberLength  >  0)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  1  &&  peekedNumberLength  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  1  &&  peekedNumberLength  >  0)  {	  if(peekedNumberLength    >    1)    {    	non-compiled	[CE]  	65	None	replace
95	[BUG]  [BUGGY]  if(PeekedNumberLength  >  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(PeekedNumberLength  >  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(PeekedNumberLength  >  PEEKED_DOUBLE_QUOTED)  {	  if(PeekedNumberLength    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	30	None	replace
96	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_NUMBER_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_NUMBER_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_NUMBER_QUOTED)  {	  if(PeekedNumberLength    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	30	None	replace
97	[BUG]  [BUGGY]  if(p!=  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p!=  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p!=  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p!=    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	9	None	replace
98	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p!=    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	9	None	replace
99	[BUG]  [BUGGY]  if(pos  <  =  PEEKED_PREFIX)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  <  =  PEEKED_PREFIX)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  <  =  PEEKED_PREFIX)  {	  if(pos    <    PEEKED_PREFIX)    {    	non-compiled	[CE]  	77	None	replace
100	[BUG]  [BUGGY]  if(p  <  PEEKED_PREFIX)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  <  PEEKED_PREFIX)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  <  PEEKED_PREFIX)  {	  if(pos    <    PEEKED_PREFIX)    {    	non-compiled	[CE]  	77	None	replace
101	[BUG]  [BUGGY]  if(p  <  =  PEEKED_PREFIX)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  <  =  PEEKED_PREFIX)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  <  =  PEEKED_PREFIX)  {	  if(pos    <    PEEKED_PREFIX)    {    	non-compiled	[CE]  	77	None	replace
102	[BUG]  [BUGGY]  if(pos  <  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  <  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  <  PEEKED_DOUBLE_QUOTED)  {	  if(pos    <    PEEKED_PREFIX)    {    	non-compiled	[CE]  	77	None	replace
103	[BUG]  [BUGGY]  if(p  ==  PEEKED_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	20	None	replace
104	[BUG]  [BUGGY]  if(p  ==  PEEKED_NUMBER_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_NUMBER_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_NUMBER_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	20	None	replace
105	[BUG]  [BUGGY]  if(p  ==  PEEKED_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	20	None	replace
106	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_E  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_E  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  NUMBER_CHAR_EXP_E  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	20	None	replace
107	[BUG]  [BUGGY]  if(peekedNumberLength  <  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  <  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  <  NUMBER_CHAR_EXP_SIGN)  {	  if(peekedNumberLength    <    =    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	53	None	replace
108	[BUG]  [BUGGY]  if(PeekedNumberLength  <  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(PeekedNumberLength  <  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(PeekedNumberLength  <  NUMBER_CHAR_EXP_SIGN)  {	  if(peekedNumberLength    <    =    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	53	None	replace
109	[BUG]  [BUGGY]  int  buffer  =  pathIndices.size();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  pathIndices.size();  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  pathIndices.size();	  int    buffer    =    stack.size();    	non-compiled	[CE]  	41	None	replace
110	[BUG]  [BUGGY]  int  buffer  =  stack.size()  +  1;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.size()  +  1;  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.size()  +  1;	  int    buffer    =    stack.size();    	non-compiled	[CE]  	41	None	replace
111	[BUG]  [BUGGY]  int  buffer  =  stack.size()  -  2;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.size()  -  2;  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.size()  -  2;	  int    buffer    =    stack.size();    	non-compiled	[CE]  	41	None	replace
112	[BUG]  [BUGGY]  if(pos  >  PEEKED_EXP_SIGN)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >  PEEKED_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >  PEEKED_EXP_SIGN)  {	  if(peekedNumberLength    >    PEEKED_EXP_SIGN)    {    	non-compiled	[CE]  	7	None	replace
113	[BUG]  [BUGGY]  if(pos  <  PEEKED_EXP_SIGN)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  <  PEEKED_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  <  PEEKED_EXP_SIGN)  {	  if(peekedNumberLength    >    PEEKED_EXP_SIGN)    {    	non-compiled	[CE]  	7	None	replace
114	[BUG]  [BUGGY]  if(pos  <  =  PEEKED_EXP_SIGN)  {  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  <  =  PEEKED_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  <  =  PEEKED_EXP_SIGN)  {	  if(peekedNumberLength    >    PEEKED_EXP_SIGN)    {    	non-compiled	[CE]  	7	None	replace
115	[BUG]  [BUGGY]  if(peekedNumberLength  >  PEEKED_SIGN)  {  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  PEEKED_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  PEEKED_SIGN)  {	  if(peekedNumberLength    >    PEEKED_EXP_SIGN)    {    	non-compiled	[CE]  	7	None	replace
116	[BUG]  [BUGGY]  if(PeekedNumberLength  >  PEEKED_PREFIX)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(PeekedNumberLength  >  PEEKED_PREFIX)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(PeekedNumberLength  >  PEEKED_PREFIX)  {	  if(PeekedNumberLength!=    PEEKED_PREFIX)    {    	non-compiled	[CE]  	52	None	replace
117	[BUG]  [BUGGY]  int  buffer  =  stack.getLength()  -  1;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.getLength()  -  1;  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.getLength()  -  1;	  int    buffer    =    stack.getLength();    	non-compiled	[CE]  	71	None	replace
118	[BUG]  [BUGGY]  int  buffer  =  stack.getLength()  +  1;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.getLength()  +  1;  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.getLength()  +  1;	  int    buffer    =    stack.getLength();    	non-compiled	[CE]  	71	None	replace
119	[BUG]  [BUGGY]  int  buffer  =  pathIndices.getLength();  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  pathIndices.getLength();  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  pathIndices.getLength();	  int    buffer    =    stack.getLength();    	non-compiled	[CE]  	71	None	replace
120	[BUG]  [BUGGY]  int  buffer  =  stack.getChars(0,  0);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.getChars(0,  0);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.getChars(0,  0);	  int    buffer    =    stack.getLength();    	non-compiled	[CE]  	71	None	replace
121	[BUG]  [BUGGY]  int  buffer  =  stack.getLength()  -  2;  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.getLength()  -  2;  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.getLength()  -  2;	  int    buffer    =    stack.getLength();    	non-compiled	[CE]  	71	None	replace
122	[BUG]  [BUGGY]  if(p  ==  PEEKED_PREFIX)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_PREFIX)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_PREFIX)  {	  if(pos!=    PEEKED_PREFIX)    {    	non-compiled	[CE]  	1	None	replace
123	[BUG]  [BUGGY]  if(p  ==  PEEKED_EXP_SIGN)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_EXP_SIGN)  {	  if(pos    ==    PEEKED_EXP_SIGN)    {    	non-compiled	[CE]  	4	None	replace
124	[BUG]  [BUGGY]  if(pos  ==  NUMBER_CHAR_EXP_SIGN  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  ==  NUMBER_CHAR_EXP_SIGN  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  ==  NUMBER_CHAR_EXP_SIGN  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {	  if(pos    ==    PEEKED_EXP_SIGN)    {    	non-compiled	[CE]  	4	None	replace
125	[BUG]  [BUGGY]  if(pos  ==  NUMBER_CHAR_EXP_SIGN  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  ==  NUMBER_CHAR_EXP_SIGN  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  ==  NUMBER_CHAR_EXP_SIGN  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(pos    ==    PEEKED_EXP_SIGN)    {    	non-compiled	[CE]  	4	None	replace
126	[BUG]  [BUGGY]  if(PeekedNumberLength!=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(PeekedNumberLength!=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(PeekedNumberLength!=  NUMBER_CHAR_EXP_SIGN)  {	  if(PeekedNumberLength    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	36	None	replace
127	[BUG]  [BUGGY]  if(pos  <  =  0)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  <  =  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  <  =  0)  {	  if(peekedNumberLength    <    =    0)    {    	non-compiled	[CE]  	64	None	replace
128	[BUG]  [BUGGY]  if(peekedNumberLength  <  =  1)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  <  =  1)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  <  =  1)  {	  if(peekedNumberLength    <    =    0)    {    	non-compiled	[CE]  	64	None	replace
129	[BUG]  [BUGGY]  if(PeekedNumberLength  <  =  0)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(PeekedNumberLength  <  =  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(PeekedNumberLength  <  =  0)  {	  if(peekedNumberLength    <    =    0)    {    	non-compiled	[CE]  	64	None	replace
130	[BUG]  [BUGGY]  if(p  >=  PEEKED_PREFIX)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  >=  PEEKED_PREFIX)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  >=  PEEKED_PREFIX)  {	  if(pos    >=    PEEKED_PREFIX)    {    	non-compiled	[CE]  	2	None	replace
131	[BUG]  [BUGGY]  if(pos  >=  0)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >=  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >=  0)  {	  if(peekedNumberLength    >=    0)    {    	non-compiled	[CE]  	62	None	replace
132	[BUG]  [BUGGY]  if(peekedNumberLength!=  0)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength!=  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength!=  0)  {	  if(peekedNumberLength    >=    0)    {    	non-compiled	[CE]  	62	None	replace
133	[BUG]  [BUGGY]  int  pos  =  stack.size()  -  1;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  pos  =  stack.size()  -  1;  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  pos  =  stack.size()  -  1;	  int    pos    =    stack.size();    	non-compiled	[CE]  	70	None	replace
134	[BUG]  [BUGGY]  int  pos  =  pathIndices.size();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  pos  =  pathIndices.size();  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  pos  =  pathIndices.size();	  int    pos    =    stack.size();    	non-compiled	[CE]  	70	None	replace
135	[BUG]  [BUGGY]  int  pos  =  stack.size()  +  1;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  pos  =  stack.size()  +  1;  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  pos  =  stack.size()  +  1;	  int    pos    =    stack.size();    	non-compiled	[CE]  	70	None	replace
136	[BUG]  [BUGGY]  int  pos  =  buffer.size();  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  pos  =  buffer.size();  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  pos  =  buffer.size();	  int    pos    =    stack.size();    	non-compiled	[CE]  	70	None	replace
137	[BUG]  [BUGGY]  int  pos  =  stack.size()  -  4;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  pos  =  stack.size()  -  4;  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  pos  =  stack.size()  -  4;	  int    pos    =    stack.size();    	non-compiled	[CE]  	70	None	replace
138	[BUG]  [BUGGY]  int  pos  =  peekedLong.size();  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  pos  =  peekedLong.size();  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  pos  =  peekedLong.size();	  int    pos    =    stack.size();    	non-compiled	[CE]  	70	None	replace
139	[BUG]  [BUGGY]  if(pos  ==  0)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  ==  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  ==  0)  {	  if(peekedNumberLength    ==    0)    {    	non-compiled	[CE]  	63	None	replace
140	[BUG]  [BUGGY]  if(peekedLength  >  0)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedLength  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedLength  >  0)  {	  if(pos    >    0)    {    	non-compiled	[CE]  	15	None	replace
141	[BUG]  [BUGGY]  if(buffer!=  null  ||  peekedNumberLength  >  0)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(buffer!=  null  ||  peekedNumberLength  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(buffer!=  null  ||  peekedNumberLength  >  0)  {	  if(pos    >    0)    {    	non-compiled	[CE]  	15	None	replace
142	[BUG]  [BUGGY]  if(pos!=  0)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos!=  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos!=  0)  {	  if(pos    >    0)    {    	non-compiled	[CE]  	15	None	replace
143	[BUG]  [BUGGY]  if(pos  <  0)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  <  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  <  0)  {	  if(pos    >    0)    {    	non-compiled	[CE]  	15	None	replace
144	[BUG]  [BUGGY]  if(pos  ==  PEEKED_SUBSELECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  ==  PEEKED_SUBSELECT)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  ==  PEEKED_SUBSELECT)  {	  if(peekedNumberLength    ==    PEEKED_SUBSELECT)    {    	non-compiled	[CE]  	58	None	replace
145	[BUG]  [BUGGY]  if(peekedNumberLength  ==  PEEKED_SUBSELECT  ||  peekedNumberLength  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  PEEKED_SUBSELECT  ||  peekedNumberLength  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  PEEKED_SUBSELECT  ||  peekedNumberLength  ==  PEEKED_DOUBLE_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_SUBSELECT)    {    	non-compiled	[CE]  	58	None	replace
146	[BUG]  [BUGGY]  if(peekedNumberLength!=  PEEKED_SUBSELECT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength!=  PEEKED_SUBSELECT)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength!=  PEEKED_SUBSELECT)  {	  if(peekedNumberLength    ==    PEEKED_SUBSELECT)    {    	non-compiled	[CE]  	58	None	replace
147	[BUG]  [BUGGY]  if(peekedNumberLength  ==  PEEKED_SUBSELECT  ||  peekedNumberLength  ==  PEEKED_DOUBLE_QUOTE)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  PEEKED_SUBSELECT  ||  peekedNumberLength  ==  PEEKED_DOUBLE_QUOTE)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  PEEKED_SUBSELECT  ||  peekedNumberLength  ==  PEEKED_DOUBLE_QUOTE)  {	  if(peekedNumberLength    ==    PEEKED_SUBSELECT)    {    	non-compiled	[CE]  	58	None	replace
148	[BUG]  [BUGGY]  if(peekedNumberLength  >  PEEKED_SUBSELECT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  PEEKED_SUBSELECT)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  PEEKED_SUBSELECT)  {	  if(peekedNumberLength    ==    PEEKED_SUBSELECT)    {    	non-compiled	[CE]  	58	None	replace
149	[BUG]  [BUGGY]  Integer  buf  =  Integer.parseInt(PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  Integer.parseInt(PEEKED_DOUBLE_QUOTED);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  Integer.parseInt(PEEKED_DOUBLE_QUOTED);	  Integer    buf    =    Integer.parseInt(peekedString);    	non-compiled	[CE]  	26	None	replace
150	[BUG]  [BUGGY]  Integer  buf  =  Integer.parseInt(pathNames);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  Integer.parseInt(pathNames);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  Integer.parseInt(pathNames);	  Integer    buf    =    Integer.parseInt(peekedString);    	non-compiled	[CE]  	26	None	replace
151	[BUG]  [BUGGY]  Integer  buf  =  Integer.parseInt(buffer,peekedString);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  Integer.parseInt(buffer,peekedString);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  Integer.parseInt(buffer,peekedString);	  Integer    buf    =    Integer.parseInt(peekedString);    	non-compiled	[CE]  	26	None	replace
152	[BUG]  [BUGGY]  if(peekedNumberLength  <  PEEKED_EXP_SIGN)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  <  PEEKED_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  <  PEEKED_EXP_SIGN)  {	  if(peekedNumberLength    <    =    PEEKED_EXP_SIGN)    {    	non-compiled	[CE]  	59	None	replace
153	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(pos    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	32	None	replace
154	[BUG]  [BUGGY]  if(pos  ==  NUMBER_CHAR_EXP_SIGN  ||  pos  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  ==  NUMBER_CHAR_EXP_SIGN  ||  pos  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  ==  NUMBER_CHAR_EXP_SIGN  ||  pos  ==  NUMBER_CHAR_EXP_E)  {	  if(pos    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	32	None	replace
155	[BUG]  [BUGGY]  if(p  ==  PEEKED_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_QUOTED)    {    	non-compiled	[CE]  	57	None	replace
156	[BUG]  [BUGGY]  if(pos  ==  PEEKED_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  ==  PEEKED_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  ==  PEEKED_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_QUOTED)    {    	non-compiled	[CE]  	57	None	replace
157	[BUG]  [BUGGY]  if(peekedNumberLength  >  PEEKED_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  PEEKED_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  PEEKED_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_QUOTED)    {    	non-compiled	[CE]  	57	None	replace
158	[BUG]  [BUGGY]  if(p!=  PEEKED_QUOTED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p!=  PEEKED_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p!=  PEEKED_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_QUOTED)    {    	non-compiled	[CE]  	57	None	replace
159	[BUG]  [BUGGY]  if(peekedNumberLength  >  0  &&  peekedNumberLength  <  =  0)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  0  &&  peekedNumberLength  <  =  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  0  &&  peekedNumberLength  <  =  0)  {	  if(peekedNumberLength    >    0    &&    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	60	None	replace
160	[BUG]  [BUGGY]  if(pos  >=  0  &&  peekedNumberLength  >  0)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >=  0  &&  peekedNumberLength  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >=  0  &&  peekedNumberLength  >  0)  {	  if(peekedNumberLength    >    0    &&    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	60	None	replace
161	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED  ||  peekedNumberLength  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED  ||  peekedNumberLength  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED  ||  peekedNumberLength  ==  PEEKED_DOUBLE_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_DOUBLE_QUOTED    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	49	None	replace
162	[BUG]  [BUGGY]  if(p  ==  PEEKED_NUMBER_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_NUMBER_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_NUMBER_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_DOUBLE_QUOTED    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	49	None	replace
163	[BUG]  [BUGGY]  if(pos  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_DOUBLE_QUOTED    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	49	None	replace
164	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_LENGTH)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_LENGTH)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_LENGTH)  {	  if(peekedNumberLength    ==    PEEKED_DOUBLE_QUOTED    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	49	None	replace
165	[BUG]  [BUGGY]  if(pos  ==  PEEKED_SIGN)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  ==  PEEKED_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  ==  PEEKED_SIGN)  {	  if(peekedNumberLength    ==    PEEKED_SIGN)    {    	non-compiled	[CE]  	6	None	replace
166	[BUG]  [BUGGY]  if(peekedNumberLength!=  PEEKED_SIGN)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength!=  PEEKED_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength!=  PEEKED_SIGN)  {	  if(peekedNumberLength    ==    PEEKED_SIGN)    {    	non-compiled	[CE]  	6	None	replace
167	[BUG]  [BUGGY]  if(peekedNumberLength  >=  PEEKED_SIGN)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >=  PEEKED_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >=  PEEKED_SIGN)  {	  if(peekedNumberLength    ==    PEEKED_SIGN)    {    	non-compiled	[CE]  	6	None	replace
168	[BUG]  [BUGGY]  if(PeekedNumberLength  ==  PEEKED_SIGN)  {  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(PeekedNumberLength  ==  PEEKED_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(PeekedNumberLength  ==  PEEKED_SIGN)  {	  if(peekedNumberLength    ==    PEEKED_SIGN)    {    	non-compiled	[CE]  	6	None	replace
169	[BUG]  [BUGGY]  if(pos  >=  0  ||  peekedNumberLength  >  0)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >=  0  ||  peekedNumberLength  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >=  0  ||  peekedNumberLength  >  0)  {	  if(peedNumberLength    >    0    ||    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	17	None	replace
170	[BUG]  [BUGGY]  if(peekedNumberLength  >  0  ||  peekedNumberLength  <  =  0)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  0  ||  peekedNumberLength  <  =  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  0  ||  peekedNumberLength  <  =  0)  {	  if(peedNumberLength    >    0    ||    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	17	None	replace
171	[BUG]  [BUGGY]  if(pos  ==  0  ||  peekedNumberLength  >  0)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  ==  0  ||  peekedNumberLength  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  ==  0  ||  peekedNumberLength  >  0)  {	  if(peedNumberLength    >    0    ||    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	17	None	replace
172	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BOOLEAN_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BOOLEAN_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BOOLEAN_QUOTED)  {	  if(p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	8	None	replace
173	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_SIZE  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_SIZE  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  NUMBER_CHAR_EXP_SIZE  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  if(p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	8	None	replace
174	[BUG]  [BUGGY]  if(p  <  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  <  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  <  PEEKED_DOUBLE_QUOTED)  {	  if(peekedNumberLength    <    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	76	None	replace
175	[BUG]  [BUGGY]  if(pos  >  0  &&  peekedNumber.charAt(peekedNumberLength  -  1)!=  '-')  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >  0  &&  peekedNumber.charAt(peekedNumberLength  -  1)!=  '-')  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >  0  &&  peekedNumber.charAt(peekedNumberLength  -  1)!=  '-')  {	  if(peekedNumberLength    >    0    &&    peekedNumber.charAt(peekedNumberLength    -    1)!=    '-')    {    	non-compiled	[CE]  	67	None	replace
176	[BUG]  [BUGGY]  if(peekedNumberLength  >  0  ||  peekedNumber.charAt(peekedNumberLength  -  1)!=  '-')  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  0  ||  peekedNumber.charAt(peekedNumberLength  -  1)!=  '-')  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  0  ||  peekedNumber.charAt(peekedNumberLength  -  1)!=  '-')  {	  if(peekedNumberLength    >    0    &&    peekedNumber.charAt(peekedNumberLength    -    1)!=    '-')    {    	non-compiled	[CE]  	67	None	replace
177	[BUG]  [BUGGY]  if(pos  >  0  ||  peekedNumber.charAt(peekedNumberLength  -  1)!=  '-')  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >  0  ||  peekedNumber.charAt(peekedNumberLength  -  1)!=  '-')  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >  0  ||  peekedNumber.charAt(peekedNumberLength  -  1)!=  '-')  {	  if(peekedNumberLength    >    0    &&    peekedNumber.charAt(peekedNumberLength    -    1)!=    '-')    {    	non-compiled	[CE]  	67	None	replace
178	[BUG]  [BUGGY]  if(pos!=  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos!=  NUMBER_CHAR_EXP_E)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos!=  NUMBER_CHAR_EXP_E)  {	  if(peekedNumberLength!=    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	51	None	replace
179	[BUG]  [BUGGY]  if(pos  >=  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >=  NUMBER_CHAR_EXP_E)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >=  NUMBER_CHAR_EXP_E)  {	  if(peekedNumberLength!=    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	51	None	replace
180	[BUG]  [BUGGY]  if(peekedNumberLength  >  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  NUMBER_CHAR_EXP_E)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  NUMBER_CHAR_EXP_E)  {	  if(peekedNumberLength!=    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	51	None	replace
181	[BUG]  [BUGGY]  if(PeekedNumberLength!=  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(PeekedNumberLength!=  NUMBER_CHAR_EXP_E)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(PeekedNumberLength!=  NUMBER_CHAR_EXP_E)  {	  if(peekedNumberLength!=    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	51	None	replace
182	[BUG]  [BUGGY]  if(peekedNumberLength  >=  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >=  NUMBER_CHAR_EXP_E)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >=  NUMBER_CHAR_EXP_E)  {	  if(peekedNumberLength!=    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	51	None	replace
183	[BUG]  [BUGGY]  if(pos  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  ==  NUMBER_CHAR_EXP_E)  {	  if(peekedNumberLength!=    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	51	None	replace
184	[BUG]  [BUGGY]  if(PeekedNumberLength  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(PeekedNumberLength  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(PeekedNumberLength  ==  NUMBER_CHAR_EXP_E)  {	  if(peekedNumberLength    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	55	None	replace
185	[BUG]  [BUGGY]  if(peekedNumberLength  <  PEEKED_PREFIX)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  <  PEEKED_PREFIX)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  <  PEEKED_PREFIX)  {	  if(peekedNumberLength    <    =    PEEKED_PREFIX)    {    	non-compiled	[CE]  	56	None	replace
186	[BUG]  [BUGGY]  if(pos  >>  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >>  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >>  NUMBER_CHAR_EXP_SIGN)  {	  if(pos    >=    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	35	None	replace
187	[BUG]  [BUGGY]  Integer  buf  =  new  Integer(0);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  new  Integer(0);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  new  Integer(0);	  Integer    buf    =    new    Integer(peekedLong.length());    	non-compiled	[CE]  	29	None	replace
188	[BUG]  [BUGGY]  Integer  buf  =  new  Integer(pathNames.length());  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  new  Integer(pathNames.length());  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  new  Integer(pathNames.length());	  Integer    buf    =    new    Integer(peekedLong.length());    	non-compiled	[CE]  	29	None	replace
189	[BUG]  [BUGGY]  Integer  buf  =  new  Integer(peekedLong.length()  -  1);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  new  Integer(peekedLong.length()  -  1);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  new  Integer(peekedLong.length()  -  1);	  Integer    buf    =    new    Integer(peekedLong.length());    	non-compiled	[CE]  	29	None	replace
190	[BUG]  [BUGGY]  Integer  buf  =  new  Integer(buffer,  peekedLong.length());  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  new  Integer(buffer,  peekedLong.length());  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  new  Integer(buffer,  peekedLong.length());	  Integer    buf    =    new    Integer(peekedLong.length());    	non-compiled	[CE]  	29	None	replace
191	[BUG]  [BUGGY]  Integer  buf  =  new  Integer(path.length());  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  new  Integer(path.length());  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  new  Integer(path.length());	  Integer    buf    =    new    Integer(peekedLong.length());    	non-compiled	[CE]  	29	None	replace
192	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(PEEKED_LONG);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(PEEKED_LONG);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(PEEKED_LONG);	  IntBuffer    buffer    =    new    IntBuffer(peekedLong);    	non-compiled	[CE]  	46	None	replace
193	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(PEEKED_DOUBLE_QUOTED);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(PEEKED_DOUBLE_QUOTED);	  IntBuffer    buffer    =    new    IntBuffer(peekedLong);    	non-compiled	[CE]  	46	None	replace
194	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(peekedLong,  peekedNumberLength);  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(peekedLong,  peekedNumberLength);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(peekedLong,  peekedNumberLength);	  IntBuffer    buffer    =    new    IntBuffer(peekedLong);    	non-compiled	[CE]  	46	None	replace
195	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(pathNames.length);  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(pathNames.length);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(pathNames.length);	  IntBuffer    buffer    =    new    IntBuffer(peekedLong);    	non-compiled	[CE]  	46	None	replace
196	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(peekedLong.length);  [CE]  [FE]                                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(peekedLong.length);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(peekedLong.length);	  IntBuffer    buffer    =    new    IntBuffer(peekedLong);    	non-compiled	[CE]  	46	None	replace
197	[BUG]  [BUGGY]  int  buffer  =  stack.get(peekedNumber);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.get(peekedNumber);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.get(peekedNumber);	  int    buffer    =    stack.get(peekedLong);    	non-compiled	[CE]  	69	None	replace
198	[BUG]  [BUGGY]  int  buffer  =  pathIndices.get(peekedLong);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  pathIndices.get(peekedLong);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  pathIndices.get(peekedLong);	  int    buffer    =    stack.get(peekedLong);    	non-compiled	[CE]  	69	None	replace
199	[BUG]  [BUGGY]  int  buffer  =  stack.get(PEEKED_LONG);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.get(PEEKED_LONG);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.get(PEEKED_LONG);	  int    buffer    =    stack.get(peekedLong);    	non-compiled	[CE]  	69	None	replace
200	[BUG]  [BUGGY]  int  buffer  =  stack.get(peekedNumberLength);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.get(peekedNumberLength);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.get(peekedNumberLength);	  int    buffer    =    stack.get(peekedLong);    	non-compiled	[CE]  	69	None	replace
201	[BUG]  [BUGGY]  int  buffer  =  stack.get(result);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.get(result);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.get(result);	  int    buffer    =    stack.get(peekedLong);    	non-compiled	[CE]  	69	None	replace
202	[BUG]  [BUGGY]  Integer  buf  =  Integer.parseInt(peekedDigits);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  Integer.parseInt(peekedDigits);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  Integer.parseInt(peekedDigits);	  Integer    buf    =    Integer.parseInt(peeked);    	non-compiled	[CE]  	27	None	replace
203	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_BUFFER)  {	  if(p!=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	23	None	replace
204	[BUG]  [BUGGY]  Integer  buf  =  Integer.parseInt(pathNames[pos]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  Integer.parseInt(pathNames[pos]);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  Integer.parseInt(pathNames[pos]);	  Integer    buf    =    Integer.parseInt(peekedLong);    	non-compiled	[CE]  	28	None	replace
205	[BUG]  [BUGGY]  int  buffer  =  stack.get(peekedNumberLength  -  1);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.get(peekedNumberLength  -  1);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.get(peekedNumberLength  -  1);	  int    buffer    =    stack.size();    	non-compiled	[CE]  	41	None	replace
206	[BUG]  [BUGGY]  if(peekedNumberLength  <  =  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  <  =  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  <  =  PEEKED_DOUBLE_QUOTED)  {	  if(peekedNumberLength    <    =    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	75	None	replace
207	[BUG]  [BUGGY]  if(peekedNumberLength  ==  PEEKED_DECIMAL)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  PEEKED_DECIMAL)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  PEEKED_DECIMAL)  {	  if(peekedNumberLength!=    PEEKED_DECIMAL)    {    	non-compiled	[CE]  	68	None	replace
208	[BUG]  [BUGGY]  if(peekedNumberLength!=  NUMBER_CHAR_DIGIT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength!=  NUMBER_CHAR_DIGIT)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength!=  NUMBER_CHAR_DIGIT)  {	  if(peekedNumberLength!=    PEEKED_DECIMAL)    {    	non-compiled	[CE]  	68	None	replace
209	[BUG]  [BUGGY]  Integer  buf  =  Integer.parseInt(pathNames[peekedString]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  Integer.parseInt(pathNames[peekedString]);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  Integer.parseInt(pathNames[peekedString]);	  Integer    buf    =    Integer.parseInt(peekedString);    	non-compiled	[CE]  	26	None	replace
210	[BUG]  [BUGGY]  int  buffer  =  nextInt(pathNames[pos  -  1]  +  PEEKED_NONE);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  nextInt(pathNames[pos  -  1]  +  PEEKED_NONE);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  nextInt(pathNames[pos  -  1]  +  PEEKED_NONE);	  int    buffer    =    nextInt(pathNames[pos    -    1]);    	non-compiled	[CE]  	74	None	replace
211	[BUG]  [BUGGY]  int  buffer  =  nextInt(pathNames[peekedLength  -  1]);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  nextInt(pathNames[peekedLength  -  1]);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  nextInt(pathNames[peekedLength  -  1]);	  int    buffer    =    nextInt(pathNames[pos    -    1]);    	non-compiled	[CE]  	74	None	replace
212	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(pathNames[i]));  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(pathNames[i]));  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(pathNames[i]));	  IntBuffer    buffer    =    new    IntBuffer(Peekes.parseInt(result));    	non-compiled	[CE]  	44	None	replace
213	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(pathNames.parseInt(result));  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(pathNames.parseInt(result));  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(pathNames.parseInt(result));	  IntBuffer    buffer    =    new    IntBuffer(Peekes.parseInt(result));    	non-compiled	[CE]  	44	None	replace
214	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(pathNames,  result));  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(pathNames,  result));  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(pathNames,  result));	  IntBuffer    buffer    =    new    IntBuffer(Peekes.parseInt(result));    	non-compiled	[CE]  	44	None	replace
215	[BUG]  [BUGGY]  if(peekedNumberLength  ==  NUMBER_CHAR_DIGIT)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  NUMBER_CHAR_DIGIT)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  NUMBER_CHAR_DIGIT)  {	  if(peekedNumberLength    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	54	None	replace
216	[BUG]  [BUGGY]  if(peekedNumberLength  <  =  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  <  =  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  <  =  NUMBER_CHAR_DECIMAL)  {	  if(peekedNumberLength    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	54	None	replace
217	[BUG]  [BUGGY]  if(peekedNumberLength!=  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength!=  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength!=  NUMBER_CHAR_EXP_DIGIT)  {	  if(peekedNumberLength    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	54	None	replace
218	[BUG]  [BUGGY]  if(p  ==  PEEKED_NUMBER_LENGTH)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_NUMBER_LENGTH)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_NUMBER_LENGTH)  {	  if(p!=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	23	None	replace
219	[BUG]  [BUGGY]  if(p  ==  PEEKED_NUMBER_QUOTED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_NUMBER_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_NUMBER_QUOTED)  {	  if(p!=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	23	None	replace
220	[BUG]  [BUGGY]  if(p  ==  PEEKED_NUMBER_LONG)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_NUMBER_LONG)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_NUMBER_LONG)  {	  if(p!=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	23	None	replace
221	[BUG]  [BUGGY]  if(peekedNumberLength  >=  PEEKED_SUBSELECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >=  PEEKED_SUBSELECT)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >=  PEEKED_SUBSELECT)  {	  if(peekedNumberLength    ==    PEEKED_SUBSELECT)    {    	non-compiled	[CE]  	58	None	replace
222	[BUG]  [BUGGY]  if(peekedNumberLength  >=  0  &&  buffer.charAt(peekedNumberLength  -  1)!=  ''')  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >=  0  &&  buffer.charAt(peekedNumberLength  -  1)!=  ''')  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >=  0  &&  buffer.charAt(peekedNumberLength  -  1)!=  ''')  {	  if(peekedNumberLength    >    0    &&    buffer.charAt(peekedNumberLength    -    1)!=    ''')    {    	non-compiled	[CE]  	61	None	replace
223	[BUG]  [BUGGY]  Integer  buf  =  Integer.parseInt(buffer,peeked);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  Integer.parseInt(buffer,peeked);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  Integer.parseInt(buffer,peeked);	  Integer    buf    =    Integer.parseInt(peeked);    	non-compiled	[CE]  	27	None	replace
224	[BUG]  [BUGGY]  Integer  buf  =  Integer.parseInt(peekedBuffer);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  Integer.parseInt(peekedBuffer);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  Integer.parseInt(peekedBuffer);	  Integer    buf    =    Integer.parseInt(peeked);    	non-compiled	[CE]  	27	None	replace
225	[BUG]  [BUGGY]  if(peekedNumberLength  >  0  &&  pathNames.charAt(peekedNumberLength  -  1)!=  '-')  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  0  &&  pathNames.charAt(peekedNumberLength  -  1)!=  '-')  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  0  &&  pathNames.charAt(peekedNumberLength  -  1)!=  '-')  {	  if(peekedNumberLength    >    0    &&    peekedNumber.charAt(peekedNumberLength    -    1)!=    '-')    {    	non-compiled	[CE]  	67	None	replace
226	[BUG]  [BUGGY]  if(peekedNumberLength  >  0  &&  peekedNumber.charAt(peekedNumberLength  -  1)  ==  '-')  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  0  &&  peekedNumber.charAt(peekedNumberLength  -  1)  ==  '-')  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  0  &&  peekedNumber.charAt(peekedNumberLength  -  1)  ==  '-')  {	  if(peekedNumberLength    >    0    &&    peekedNumber.charAt(peekedNumberLength    -    1)!=    '-')    {    	non-compiled	[CE]  	67	None	replace
227	[BUG]  [BUGGY]  if(peekedNumberLength  >=  0  ||  peekedNumberLength  >  0)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >=  0  ||  peekedNumberLength  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >=  0  ||  peekedNumberLength  >  0)  {	  if(peekedNumberLength    >    0    ||    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	16	None	replace
228	[BUG]  [BUGGY]  if(peekedNumberLength  <  =  0  ||  peekedNumberLength  >  0)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  <  =  0  ||  peekedNumberLength  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  <  =  0  ||  peekedNumberLength  >  0)  {	  if(peekedNumberLength    >    0    ||    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	16	None	replace
229	[BUG]  [BUGGY]  if(peekedNumberLength  ==  0  ||  peekedNumberLength  >  0)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  0  ||  peekedNumberLength  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  0  ||  peekedNumberLength  >  0)  {	  if(peekedNumberLength    >    0    ||    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	16	None	replace
230	[BUG]  [BUGGY]  if(PeekedNumberLength  >=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(PeekedNumberLength  >=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(PeekedNumberLength  >=  NUMBER_CHAR_EXP_SIGN)  {	  if(peekedNumberLength    >=    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	78	None	replace
231	[BUG]  [BUGGY]  if(peekedNumberLength  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  PEEKED_BOOLEAN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  PEEKED_BOOLEAN)  {	  if(peekedNumberLength    ==    PEEKED_QUOTED)    {    	non-compiled	[CE]  	57	None	replace
232	[BUG]  [BUGGY]  if(peekedNumberLength  <  PEEKED_BUFFER)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  <  PEEKED_BUFFER)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  <  PEEKED_BUFFER)  {	  if(peekedNumberLength    <    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	76	None	replace
233	[BUG]  [BUGGY]  if(peekedNumberLength  <  PEEKED_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  <  PEEKED_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  <  PEEKED_QUOTED)  {	  if(peekedNumberLength    <    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	76	None	replace
234	[BUG]  [BUGGY]  int  buffer  =  stack.pop();  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.pop();  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.pop();	  int    buffer    =    stack.peek();    	non-compiled	[CE]  	73	None	replace
235	[BUG]  [BUGGY]  int  buffer  =  stack.get(peek);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.get(peek);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.get(peek);	  int    buffer    =    stack.peek();    	non-compiled	[CE]  	73	None	replace
236	[BUG]  [BUGGY]  if(peekedNumberLength  <  =  PEEKED_SIGN)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  <  =  PEEKED_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  <  =  PEEKED_SIGN)  {	  if(peekedNumberLength    ==    PEEKED_SIGN)    {    	non-compiled	[CE]  	6	None	replace
237	[BUG]  [BUGGY]  if(peekedNumberLength  >  buffer.length)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  buffer.length)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  buffer.length)  {	  if(peekedNumberLength    >    1)    {    	non-compiled	[CE]  	65	None	replace
238	[BUG]  [BUGGY]  if(peekedNumberLength  <  1)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  <  1)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  <  1)  {	  if(peekedNumberLength    >    1)    {    	non-compiled	[CE]  	65	None	replace
239	[BUG]  [BUGGY]  if(peekedNumberLength  >=  1)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >=  1)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >=  1)  {	  if(peekedNumberLength    >    1)    {    	non-compiled	[CE]  	65	None	replace
240	[BUG]  [BUGGY]  if(peekedNumberLength  ==  1)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  1)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  1)  {	  if(peekedNumberLength    >    1)    {    	non-compiled	[CE]  	65	None	replace
241	[BUG]  [BUGGY]  if(peekedNumberLength  >=  0  &&  peekedNumberLength  >  0)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >=  0  &&  peekedNumberLength  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >=  0  &&  peekedNumberLength  >  0)  {	  if(peekedNumberLength    >    0    &&    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	60	None	replace
242	[BUG]  [BUGGY]  if(peekedNumberLength  ==  0  &&  peekedNumberLength  >  0)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  0  &&  peekedNumberLength  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  0  &&  peekedNumberLength  >  0)  {	  if(peekedNumberLength    >    0    &&    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	60	None	replace
243	[BUG]  [BUGGY]  if(peekedNumberLength  >  buffer.length  ||  peekedNumberLength  >  buffer.length)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  buffer.length  ||  peekedNumberLength  >  buffer.length)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  buffer.length  ||  peekedNumberLength  >  buffer.length)  {	  if(peedNumberLength    >    0    ||    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	17	None	replace
244	[BUG]  [BUGGY]  if(peekedNumberLength  >  0  ||  peekedNumberLength  >=  0)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  0  ||  peekedNumberLength  >=  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  0  ||  peekedNumberLength  >=  0)  {	  if(peedNumberLength    >    0    ||    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	17	None	replace
245	[BUG]  [BUGGY]  if(peekedLong  >  0)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedLong  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedLong  >  0)  {	  if(pos    >    0)    {    	non-compiled	[CE]  	15	None	replace
246	[BUG]  [BUGGY]  int  buffer  =  stack.get(peekedLength);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.get(peekedLength);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.get(peekedLength);	  int    buffer    =    stack.get(peekedLong);    	non-compiled	[CE]  	69	None	replace
247	[BUG]  [BUGGY]  if(peekedNumberLength  >=  PEEKED_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >=  PEEKED_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >=  PEEKED_QUOTED)  {	  if(peekedNumberLength    >=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	48	None	replace
248	[BUG]  [BUGGY]  if(peekedNumberLength  ==  PEEKED_STRING)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  PEEKED_STRING)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  PEEKED_STRING)  {	  if(PeekedNumberLength    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	30	None	replace
249	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(pathNames[pos]));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(pathNames[pos]));  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(pathNames[pos]));	  IntBuffer    buffer    =    new    IntBuffer(Peekes.parseInt(peekedString));    	non-compiled	[CE]  	42	None	replace
250	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(pathNames.parseInt(peekedString));  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(pathNames.parseInt(peekedString));  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(pathNames.parseInt(peekedString));	  IntBuffer    buffer    =    new    IntBuffer(Peekes.parseInt(peekedString));    	non-compiled	[CE]  	42	None	replace
251	[BUG]  [BUGGY]  if(piedNumberLength  >  0)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(piedNumberLength  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(piedNumberLength  >  0)  {	  if(peekedNumberLength    >=    0)    {    	non-compiled	[CE]  	62	None	replace
252	[BUG]  [BUGGY]  if(peekedNumberLength  <  0)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  <  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  <  0)  {	  if(peekedNumberLength    <    =    0)    {    	non-compiled	[CE]  	64	None	replace
253	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED  ||  peeredNumberLength  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED  ||  peeredNumberLength  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED  ||  peeredNumberLength  ==  PEEKED_DOUBLE_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_DOUBLE_QUOTED    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	49	None	replace
254	[BUG]  [BUGGY]  if(peekedNumberLength  ==  NUMBER_CHAR  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  NUMBER_CHAR  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  NUMBER_CHAR  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_DOUBLE_QUOTED    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	49	None	replace
255	[BUG]  [BUGGY]  int  pos  =  stack.size()  -  2;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  pos  =  stack.size()  -  2;  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  pos  =  stack.size()  -  2;	  int    pos    =    stack.size();    	non-compiled	[CE]  	70	None	replace
256	[BUG]  [BUGGY]  if(peekedNumberLength  <  =  PEEKED_BUFFER)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  <  =  PEEKED_BUFFER)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  <  =  PEEKED_BUFFER)  {	  if(peekedNumberLength    ==    PEEKED_BUFFER)    {    	non-compiled	[CE]  	39	None	replace
257	[BUG]  [BUGGY]  if(peekedNumberLength  ==  PEEKED_BACKSLASH)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  PEEKED_BACKSLASH)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  PEEKED_BACKSLASH)  {	  if(peekedNumberLength    ==    PEEKED_BUFFER)    {    	non-compiled	[CE]  	39	None	replace
258	[BUG]  [BUGGY]  if(peekedNumberLength  ==  0  &&  peekedNumber.length()  >  0)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  0  &&  peekedNumber.length()  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  0  &&  peekedNumber.length()  >  0)  {	  if(peekedNumberLength    >    0    &&    peekedNumber.length()    >    0)    {    	non-compiled	[CE]  	19	None	replace
259	[BUG]  [BUGGY]  if(peekedNumberLength  >=  0  &&  peekedNumber.length()  >  0)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >=  0  &&  peekedNumber.length()  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >=  0  &&  peekedNumber.length()  >  0)  {	  if(peekedNumberLength    >    0    &&    peekedNumber.length()    >    0)    {    	non-compiled	[CE]  	19	None	replace
260	[BUG]  [BUGGY]  if(peekedNumberLength  >  0  &&  peekedNumber.length()  ==  0)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  0  &&  peekedNumber.length()  ==  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  0  &&  peekedNumber.length()  ==  0)  {	  if(peekedNumberLength    >    0    &&    peekedNumber.length()    >    0)    {    	non-compiled	[CE]  	19	None	replace
261	[BUG]  [BUGGY]  if(peekedLength  <  PEEKED_PREFIX)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedLength  <  PEEKED_PREFIX)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedLength  <  PEEKED_PREFIX)  {	  if(pos    <    PEEKED_PREFIX)    {    	non-compiled	[CE]  	77	None	replace
262	[BUG]  [BUGGY]  float  buffer  =  stack.getBounds(0,  stack.length  -  1);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  float  buffer  =  stack.getBounds(0,  stack.length  -  1);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	float  buffer  =  stack.getBounds(0,  stack.length  -  1);	  int    buffer    =    stack.getBounds(0,    stack.length    -    1);    	non-compiled	[CE]  	72	None	replace
263	[BUG]  [BUGGY]  if(PeekedNumberLength!=  PEEKED_EXP_SIGN)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(PeekedNumberLength!=  PEEKED_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(PeekedNumberLength!=  PEEKED_EXP_SIGN)  {	  if(peekedNumberLength!=    PEEKED_EXP_SIGN)    {    	non-compiled	[CE]  	5	None	replace
264	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(pathNames.parseInt(peeked));  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(pathNames.parseInt(peeked));  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(pathNames.parseInt(peeked));	  IntBuffer    buffer    =    new    IntBuffer(Peekes.parseInt(peeked));    	non-compiled	[CE]  	43	None	replace
265	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(IntBuffer.parseInt(pathNames));  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(IntBuffer.parseInt(pathNames));  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(IntBuffer.parseInt(pathNames));	  IntBuffer    buffer    =    new    IntBuffer(Peekes.parseInt(peeked));    	non-compiled	[CE]  	43	None	replace
266	[BUG]  [BUGGY]  int  buffer  =(int)Math.floor(pathNames,  pathNames[pos  -  1]);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =(int)Math.floor(pathNames,  pathNames[pos  -  1]);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =(int)Math.floor(pathNames,  pathNames[pos  -  1]);	  int    buffer    =(int)Math.floor(peekedLong,    pathNames[pos    -    1]);    	non-compiled	[CE]  	45	None	replace
267	[BUG]  [BUGGY]  int  buffer  =(int)Math.floor(pathNames[pos  -  1],  negative);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =(int)Math.floor(pathNames[pos  -  1],  negative);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =(int)Math.floor(pathNames[pos  -  1],  negative);	  int    buffer    =(int)Math.floor(peekedLong,    pathNames[pos    -    1]);    	non-compiled	[CE]  	45	None	replace
268	[BUG]  [BUGGY]  if(p  ==  PEEKED_NUMBER_LENGTH  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_NUMBER_LENGTH  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_NUMBER_LENGTH  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(pos    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	21	None	replace
269	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(peekedNumberLength);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(peekedNumberLength);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(peekedNumberLength);	  IntBuffer    buffer    =    new    IntBuffer(peekedLong);    	non-compiled	[CE]  	46	None	replace
270	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(peekedNumber);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(peekedNumber);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(peekedNumber);	  IntBuffer    buffer    =    new    IntBuffer(peekedLong);    	non-compiled	[CE]  	46	None	replace
271	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(peekedLong  +  1);  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(peekedLong  +  1);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(peekedLong  +  1);	  IntBuffer    buffer    =    new    IntBuffer(peekedLong);    	non-compiled	[CE]  	46	None	replace
272	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(PEEKED_NONE);  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(PEEKED_NONE);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(PEEKED_NONE);	  IntBuffer    buffer    =    new    IntBuffer(peekedLong);    	non-compiled	[CE]  	46	None	replace
273	[BUG]  [BUGGY]  if(peekedNumberLength  <  =  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  <  =  NUMBER_CHAR_EXP_E)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  <  =  NUMBER_CHAR_EXP_E)  {	  if(peekedNumberLength    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	55	None	replace
274	[BUG]  [BUGGY]  if(peekedNumberLength  ==  NUMBER_CHAR_EXP_S)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  NUMBER_CHAR_EXP_S)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  NUMBER_CHAR_EXP_S)  {	  if(peekedNumberLength    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	55	None	replace
275	[BUG]  [BUGGY]  if(p  ==  PEEKED_LONG)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_LONG)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_LONG)  {	  if(p!=    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	9	None	replace
276	[BUG]  [BUGGY]  if(peekedNumberLength  ==  PEEKED_SINGLE_QUOTED  ||  peeredNumberLength  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  PEEKED_SINGLE_QUOTED  ||  peeredNumberLength  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  PEEKED_SINGLE_QUOTED  ||  peeredNumberLength  ==  PEEKED_DOUBLE_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_DOUBLE_QUOTED    ||    peekedNumberLength    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	50	None	replace
277	[BUG]  [BUGGY]  if(peekedNumberLength  ==  PEEKED_PREFIX  ||  peekedNumberLength  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  PEEKED_PREFIX  ||  peekedNumberLength  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  PEEKED_PREFIX  ||  peekedNumberLength  ==  PEEKED_SINGLE_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_DOUBLE_QUOTED    ||    peekedNumberLength    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	50	None	replace
278	[BUG]  [BUGGY]  int  buffer  =  stack.getChars(0,  peekedNumberLength);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.getChars(0,  peekedNumberLength);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.getChars(0,  peekedNumberLength);	  int    buffer    =    stack.getLength();    	non-compiled	[CE]  	71	None	replace
279	[BUG]  [BUGGY]  int  buffer  =  stack.getColumnNumber();  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.getColumnNumber();  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.getColumnNumber();	  int    buffer    =    stack.getLength();    	non-compiled	[CE]  	71	None	replace
280	[BUG]  [BUGGY]  int  buffer  =  stack.getBounds();  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.getBounds();  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.getBounds();	  int    buffer    =    stack.getLength();    	non-compiled	[CE]  	71	None	replace
281	[BUG]  [BUGGY]  Integer  buf  =  new  Integer(peekedLong.length()  +  1);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  new  Integer(peekedLong.length()  +  1);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  new  Integer(peekedLong.length()  +  1);	  Integer    buf    =    new    Integer(peekedLong.length());    	non-compiled	[CE]  	29	None	replace
282	[BUG]  [BUGGY]  Integer  buf  =  new  Integer(peekedString.length());  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  new  Integer(peekedString.length());  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  new  Integer(peekedString.length());	  Integer    buf    =    new    Integer(peekedLong.length());    	non-compiled	[CE]  	29	None	replace
283	[BUG]  [BUGGY]  Integer  buf  =  new  Integer(peekedNumber.length());  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  new  Integer(peekedNumber.length());  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  new  Integer(peekedNumber.length());	  Integer    buf    =    new    Integer(peekedLong.length());    	non-compiled	[CE]  	29	None	replace
284	[BUG]  [BUGGY]  if(peekedNumberLength!=  PEEKED_QUOTED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength!=  PEEKED_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength!=  PEEKED_QUOTED)  {	  if(peekedNumberLength!=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	47	None	replace
285	[BUG]  [BUGGY]  if(pos  +=  peekedNumberLength  >  0  ||  peekedNumberLength  >  0)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  +=  peekedNumberLength  >  0  ||  peekedNumberLength  >  0)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  +=  peekedNumberLength  >  0  ||  peekedNumberLength  >  0)  {	  if(peekedNumberLength    >    0    ||    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	16	None	replace
286	[BUG]  [BUGGY]  Integer  buf  =  new  Integer(pathNames.length);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  new  Integer(pathNames.length);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  new  Integer(pathNames.length);	  Integer    buf    =    new    Integer(peekedLong.length());    	non-compiled	[CE]  	29	None	replace
287	[BUG]  [BUGGY]  Integer  buf  =  new  Integer(buffer.length());  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  new  Integer(buffer.length());  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  new  Integer(buffer.length());	  Integer    buf    =    new    Integer(peekedLong.length());    	non-compiled	[CE]  	29	None	replace
288	[BUG]  [BUGGY]  if(peekedNumberLength  <  PEEKED_BOOLEAN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  <  PEEKED_BOOLEAN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  <  PEEKED_BOOLEAN)  {	  if(peekedNumberLength    <    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	76	None	replace
289	[BUG]  [BUGGY]  int  buffer  =(int)Math.floor(pathNames[pos  -  1,  pathNames[pos  -  1]);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =(int)Math.floor(pathNames[pos  -  1,  pathNames[pos  -  1]);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =(int)Math.floor(pathNames[pos  -  1,  pathNames[pos  -  1]);	  int    buffer    =(int)Math.floor(peekedLong,    pathNames[pos    -    1]);    	non-compiled	[CE]  	45	None	replace
290	[BUG]  [BUGGY]  if(pos  >  0  ||  peekedNumberLength  >  10)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >  0  ||  peekedNumberLength  >  10)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >  0  ||  peekedNumberLength  >  10)  {	  if(peedNumberLength    >    0    ||    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	17	None	replace
291	[BUG]  [BUGGY]  if(peekedNumberLength  >=  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >=  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >=  NUMBER_CHAR_DECIMAL)  {	  if(peekedNumberLength    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	54	None	replace
292	[BUG]  [BUGGY]  if(pos  >=  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >=  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >=  NUMBER_CHAR_DECIMAL)  {	  if(peekedNumberLength    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	54	None	replace
293	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_BOOLEAN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_BOOLEAN)  {	  if(p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	8	None	replace
294	[BUG]  [BUGGY]  int  buffer  =  stack.get(p);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.get(p);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.get(p);	  int    buffer    =    stack.size();    	non-compiled	[CE]  	41	None	replace
295	[BUG]  [BUGGY]  int  buffer  =  stack.getBounds(0,  0,  0);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.getBounds(0,  0,  0);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.getBounds(0,  0,  0);	  int    buffer    =    stack.size();    	non-compiled	[CE]  	41	None	replace
296	[BUG]  [BUGGY]  int  buffer  =  stack.getBounds(0,  0);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.getBounds(0,  0);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.getBounds(0,  0);	  int    buffer    =    stack.size();    	non-compiled	[CE]  	41	None	replace
297	[BUG]  [BUGGY]  if(peekedNumberLength  ==  NUMBER_CHAR_EXP_SIGIT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  NUMBER_CHAR_EXP_SIGIT)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  NUMBER_CHAR_EXP_SIGIT)  {	  if(peekedNumberLength    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	55	None	replace
298	[BUG]  [BUGGY]  if(peekedLength  >  PEEKED_PREFIX)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedLength  >  PEEKED_PREFIX)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedLength  >  PEEKED_PREFIX)  {	  if(pos    >    PEEKED_PREFIX)    {    	non-compiled	[CE]  	40	None	replace
299	[BUG]  [BUGGY]  int  buffer  =  stack.getBounds2D();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.getBounds2D();  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.getBounds2D();	  int    buffer    =    stack.getLength();    	non-compiled	[CE]  	71	None	replace
300	[BUG]  [BUGGY]  int  buffer  =  stack.getBuffer();  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.getBuffer();  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.getBuffer();	  int    buffer    =    stack.getLength();    	non-compiled	[CE]  	71	None	replace
301	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(peekedString),  pos);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(peekedString),  pos);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(peekedString),  pos);	  IntBuffer    buffer    =    new    IntBuffer(Peekes.parseInt(peekedString));    	non-compiled	[CE]  	42	None	replace
302	[BUG]  [BUGGY]  int  pos  =  stack.getLength();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  pos  =  stack.getLength();  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  pos  =  stack.getLength();	  int    pos    =    stack.size();    	non-compiled	[CE]  	70	None	replace
303	[BUG]  [BUGGY]  int  pos  =  stack.getPosition();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  pos  =  stack.getPosition();  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  pos  =  stack.getPosition();	  int    pos    =    stack.size();    	non-compiled	[CE]  	70	None	replace
304	[BUG]  [BUGGY]  if(pos  +  1  >=  peekedNumberLength)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  +  1  >=  peekedNumberLength)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  +  1  >=  peekedNumberLength)  {	  if(peekedNumberLength    >=    0)    {    	non-compiled	[CE]  	62	None	replace
305	[BUG]  [BUGGY]  if(pos  +  1  >=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  +  1  >=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  +  1  >=  NUMBER_CHAR_EXP_SIGN)  {	  if(pos    >=    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	35	None	replace
306	[BUG]  [BUGGY]  if(pos  +  1  <  =  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  +  1  <  =  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  +  1  <  =  NUMBER_CHAR_EXP_SIGN)  {	  if(pos    >=    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	35	None	replace
307	[BUG]  [BUGGY]  int  buffer  =  stack.get(peekedLong  -  1);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.get(peekedLong  -  1);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.get(peekedLong  -  1);	  int    buffer    =    stack.get(peekedLong);    	non-compiled	[CE]  	69	None	replace
308	[BUG]  [BUGGY]  int  buffer  =  stack.remove(peekedLong);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  stack.remove(peekedLong);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  stack.remove(peekedLong);	  int    buffer    =    stack.get(peekedLong);    	non-compiled	[CE]  	69	None	replace
309	[BUG]  [BUGGY]  if(pos  ==  PEEKED_PREFIX  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  ==  PEEKED_PREFIX  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  ==  PEEKED_PREFIX  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {	  if(pos    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  	38	None	replace
310	[BUG]  [BUGGY]  if(pos  ==  PEEKED_PREFIX  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  ==  PEEKED_PREFIX  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  ==  PEEKED_PREFIX  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(pos    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  	38	None	replace
311	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(pathIndices,  result));  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(pathIndices,  result));  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(Peekes.parseInt(pathIndices,  result));	  IntBuffer    buffer    =    new    IntBuffer(Peekes.parseInt(result));    	non-compiled	[CE]  	44	None	replace
312	[BUG]  [BUGGY]  if(pos  >=  PEEKED_SIGN)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >=  PEEKED_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >=  PEEKED_SIGN)  {	  if(pos    ==    PEEKED_EXP_SIGN)    {    	non-compiled	[CE]  	4	None	replace
313	[BUG]  [BUGGY]  if(peekedNumberLength  >  PEEKED_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  PEEKED_CHAR_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  PEEKED_CHAR_EXP_SIGN)  {	  if(peekedNumberLength    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	34	None	replace
314	[BUG]  [BUGGY]  if(pos  +=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  +=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  +=  NUMBER_CHAR_EXP_SIGN)  {	  if(peekedNumberLength    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	34	None	replace
315	[BUG]  [BUGGY]  if(pos  +=  peekedNumberLength  >  1)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  +=  peekedNumberLength  >  1)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  +=  peekedNumberLength  >  1)  {	  if(peekedNumberLength    >    1)    {    	non-compiled	[CE]  	65	None	replace
316	[BUG]  [BUGGY]  if(pos  +  1  <  =  peekedNumberLength)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  +  1  <  =  peekedNumberLength)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  +  1  <  =  peekedNumberLength)  {	  if(peekedNumberLength    >    1)    {    	non-compiled	[CE]  	65	None	replace
317	[BUG]  [BUGGY]  if(pos  >  0  ||  peekedNumberLength  >  0  ||  peekedNumber.charAt(peekedNumberLength  -  1)!=  '-')  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >  0  ||  peekedNumberLength  >  0  ||  peekedNumber.charAt(peekedNumberLength  -  1)!=  '-')  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >  0  ||  peekedNumberLength  >  0  ||  peekedNumber.charAt(peekedNumberLength  -  1)!=  '-')  {	  if(peekedNumberLength    >    0    &&    peekedNumber.charAt(peekedNumberLength    -    1)!=    '-')    {    	non-compiled	[CE]  	67	None	replace
318	[BUG]  [BUGGY]  if(pos  >=  0  &&  peekedNumberLength  >  0  &&  peekedNumber.charAt(peekedNumberLength  -  1)!=  '-')  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >=  0  &&  peekedNumberLength  >  0  &&  peekedNumber.charAt(peekedNumberLength  -  1)!=  '-')  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >=  0  &&  peekedNumberLength  >  0  &&  peekedNumber.charAt(peekedNumberLength  -  1)!=  '-')  {	  if(peekedNumberLength    >    0    &&    peekedNumber.charAt(peekedNumberLength    -    1)!=    '-')    {    	non-compiled	[CE]  	67	None	replace
319	[BUG]  [BUGGY]  if(peekedNumberLength  >  0  &&  peekedNumber.charAt(0)  ==  '-')  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  0  &&  peekedNumber.charAt(0)  ==  '-')  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  0  &&  peekedNumber.charAt(0)  ==  '-')  {	  if(peekedNumberLength    >    0    &&    peekedNumber.charAt(peekedNumberLength    -    1)!=    '-')    {    	non-compiled	[CE]  	67	None	replace
320	[BUG]  [BUGGY]  if(pos  >  0  &&  peekedNumber.charAt(peekedNumberLength  -  1)  ==  '-')  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >  0  &&  peekedNumber.charAt(peekedNumberLength  -  1)  ==  '-')  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >  0  &&  peekedNumber.charAt(peekedNumberLength  -  1)  ==  '-')  {	  if(peekedNumberLength    >    0    &&    peekedNumber.charAt(peekedNumberLength    -    1)!=    '-')    {    	non-compiled	[CE]  	67	None	replace
321	[BUG]  [BUGGY]  if(p  >=  PEEKED_BUFFER)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  >=  PEEKED_BUFFER)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  >=  PEEKED_BUFFER)  {	  if(p    >=    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	13	None	replace
322	[BUG]  [BUGGY]  if(peekedNumberLength!=  PEEKED_PREFIX  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength!=  PEEKED_PREFIX  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength!=  PEEKED_PREFIX  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(PeekedNumberLength!=    PEEKED_PREFIX)    {    	non-compiled	[CE]  	52	None	replace
323	[BUG]  [BUGGY]  if(PeekedNumberLength  ==  PEEKED_PREFIX)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(PeekedNumberLength  ==  PEEKED_PREFIX)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(PeekedNumberLength  ==  PEEKED_PREFIX)  {	  if(PeekedNumberLength!=    PEEKED_PREFIX)    {    	non-compiled	[CE]  	52	None	replace
324	[BUG]  [BUGGY]  Integer  buf  =  Integer.parseInt(p);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  Integer  buf  =  Integer.parseInt(p);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	Integer  buf  =  Integer.parseInt(p);	  Integer    buf    =    Integer.parseInt(peeked);    	non-compiled	[CE]  	27	None	replace
325	[BUG]  [BUGGY]  int  buffer  =  nextInt(pathNames[pos  -  1]  +  1,  pathIndices[stackSize  -  1]);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  int  buffer  =  nextInt(pathNames[pos  -  1]  +  1,  pathIndices[stackSize  -  1]);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	int  buffer  =  nextInt(pathNames[pos  -  1]  +  1,  pathIndices[stackSize  -  1]);	  int    buffer    =    nextInt(pathNames[pos    -    1]);    	non-compiled	[CE]  	74	None	replace
326	[BUG]  [BUGGY]  if(peekedNumberLength  ==  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  ==  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  ==  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_DOUBLE_QUOTED    ||    peekedNumberLength    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	50	None	replace
327	[BUG]  [BUGGY]  if(peekedNumberLength  >=  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >=  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >=  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_DOUBLE_QUOTED    ||    peekedNumberLength    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	50	None	replace
328	[BUG]  [BUGGY]  if(pos  >  0  &&  buffer.charAt(peekedNumberLength  -  1)!=  '')  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  >  0  &&  buffer.charAt(peekedNumberLength  -  1)!=  '')  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  >  0  &&  buffer.charAt(peekedNumberLength  -  1)!=  '')  {	  if(peekedNumberLength    >    0    &&    buffer.charAt(peekedNumberLength    -    1)!=    ''')    {    	non-compiled	[CE]  	61	None	replace
329	[BUG]  [BUGGY]  if(pos  <  =  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(pos  <  =  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(pos  <  =  NUMBER_CHAR_EXP_DIGIT)  {	  if(pos!=    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	37	None	replace
330	[BUG]  [BUGGY]  if(p!=  PEEKED_BUFFER)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p!=  PEEKED_BUFFER)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p!=  PEEKED_BUFFER)  {	  if(p!=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	23	None	replace
331	[BUG]  [BUGGY]  if(p  ==  PEEKED_DECIMAL)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_DECIMAL)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_DECIMAL)  {	  if(p!=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	23	None	replace
332	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_NUMBER_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_NUMBER_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_NUMBER_QUOTED)  {	  if(peekedNumberLength    ==    PEEKED_DOUBLE_QUOTED    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	49	None	replace
333	[BUG]  [BUGGY]  if(p  <  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(p  <  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(p  <  PEEKED_SINGLE_QUOTED)  {	  if(pos    >    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	31	None	replace
334	[BUG]  [BUGGY]  if(peekedNumberLength  >  0  ||  peekedNumberLength  >  Long.MAX_VALUE)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  0  ||  peekedNumberLength  >  Long.MAX_VALUE)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  0  ||  peekedNumberLength  >  Long.MAX_VALUE)  {	  if(peedNumberLength    >    0)    {    	non-compiled	[CE]  	18	None	replace
335	[BUG]  [BUGGY]  if(peekedNumberLength  >  0  ||  peekedNumberLength  <  2)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  0  ||  peekedNumberLength  <  2)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  0  ||  peekedNumberLength  <  2)  {	  if(peedNumberLength    >    0)    {    	non-compiled	[CE]  	18	None	replace
336	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(peekedLong  -  1);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(peekedLong  -  1);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(peekedLong  -  1);	  IntBuffer    buffer    =    new    IntBuffer(peekedLong);    	non-compiled	[CE]  	46	None	replace
337	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(peekedLong,  pos);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(peekedLong,  pos);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(peekedLong,  pos);	  IntBuffer    buffer    =    new    IntBuffer(peekedLong);    	non-compiled	[CE]  	46	None	replace
338	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(peekedLong,  pathIndices.length);  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(peekedLong,  pathIndices.length);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(peekedLong,  pathIndices.length);	  IntBuffer    buffer    =    new    IntBuffer(peekedLong);    	non-compiled	[CE]  	46	None	replace
339	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(pos);  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(pos);  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	IntBuffer  buffer  =  new  IntBuffer(pos);	  IntBuffer    buffer    =    new    IntBuffer(peekedLong);    	non-compiled	[CE]  	46	None	replace
340	[BUG]  [BUGGY]  if(peekedNumberLength  >  PEEKED_BACKSLASH)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }      [BUGGY]  if(peekedNumberLength  >  PEEKED_BACKSLASH)  {  [BUGGY]      peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3333333333333333	1179	1179	3	replace	if(peekedNumberLength  >  PEEKED_BACKSLASH)  {	  if(peekedNumberLength    >    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	22	None	replace
