bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BUFFERED)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	1	None	replace
2	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	1	None	replace
3	[BUG]  [BUGGY]  }  else  if(pos  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(pos  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(pos  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	1	None	replace
4	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  pos  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  pos  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  pos  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	1	None	replace
5	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(p!=  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(p!=  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	1	None	replace
6	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	5	None	replace
9	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_OBJECT)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_OBJECT)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_OBJECT)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	2	None	replace
10	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_ARRAY)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_ARRAY)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_ARRAY)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	2	None	replace
11	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_VALUE)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_VALUE)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_VALUE)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	2	None	replace
12	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(pos,  PEEKED_SINGLE_QUOTED?  '''  :' "');  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  peekedString  =  nextQuotedValue(pos,  PEEKED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	peekedString  =  nextQuotedValue(pos,  PEEKED_SINGLE_QUOTED?  '''  :' "');	      	non-compiled	[CE]  	4	None	replace
13	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  for(int  p  =  0;  p  <  pathIndices.length;  p++)  {  peekedString  =  new  String(buffer,  pos,  p);  }  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  if(peekedString  ==  null)  {  for(int  p  =  0;  p  <  pathIndices.length;  p++)  {  peekedString  =  new  String(buffer,  pos,  p);  }  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	if(peekedString  ==  null)  {  for(int  p  =  0;  p  <  pathIndices.length;  p++)  {  peekedString  =  new  String(buffer,  pos,  p);  }	      	non-compiled	[CE]  	4	None	replace
14	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  ++i)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  }  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  ++i)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  }  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  ++i)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  }	      	non-compiled	[CE]  	4	None	replace
15	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  ++i)  {  peekedString  =  new  String(buffer,  pos);  }  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  ++i)  {  peekedString  =  new  String(buffer,  pos);  }  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  ++i)  {  peekedString  =  new  String(buffer,  pos);  }	      	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  }  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  }  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  }	      	non-compiled	[CE]  	4	None	replace
17	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  ++i)  {  peekedString  =  new  String(buffer,  pos  +  1);  }  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  ++i)  {  peekedString  =  new  String(buffer,  pos  +  1);  }  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  ++i)  {  peekedString  =  new  String(buffer,  pos  +  1);  }	      	non-compiled	[CE]  	4	None	replace
18	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(pos    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	3	None	replace
19	[BUG]  [BUGGY]  }  else  if(pos  <  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(pos  <  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(pos  <  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(pos    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	3	None	replace
20	[BUG]  [BUGGY]  }  else  if(pos  <  =  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(pos  <  =  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(pos  <  =  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(pos    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	3	None	replace
21	[BUG]  [BUGGY]  }  else  if(pos  >=  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(pos  >=  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(pos  >=  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(pos    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	3	None	replace
22	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	2	None	replace
23	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_JECT)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_JECT)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_JECT)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	2	None	replace
24	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	2	None	replace
25	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(p!=  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(p!=  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(pos    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	3	None	replace
26	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(peekedString);  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  peekedString  =  nextQuotedValue(peekedString);  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	peekedString  =  nextQuotedValue(peekedString);	      	non-compiled	[CE]  	4	None	replace
27	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(pos  +  1);  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  peekedString  =  nextQuotedValue(pos  +  1);  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	peekedString  =  nextQuotedValue(pos  +  1);	      	non-compiled	[CE]  	4	None	replace
28	[BUG]  [BUGGY]  pos  =  nextQuotedValue(peekedString);  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  pos  =  nextQuotedValue(peekedString);  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	pos  =  nextQuotedValue(peekedString);	      	non-compiled	[CE]  	4	None	replace
29	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(p);  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  peekedString  =  nextQuotedValue(p);  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	peekedString  =  nextQuotedValue(p);	      	non-compiled	[CE]  	4	None	replace
30	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(pos);  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  peekedString  =  nextQuotedValue(pos);  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	peekedString  =  nextQuotedValue(pos);	      	non-compiled	[CE]  	4	None	replace
31	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(pos  +  ''');  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  peekedString  =  nextQuotedValue(pos  +  ''');  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	peekedString  =  nextQuotedValue(pos  +  ''');	      	non-compiled	[CE]  	4	None	replace
32	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	5	None	replace
33	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "')  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "')  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "')  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	5	None	replace
34	[BUG]  [BUGGY]  }  else  if(pos  >=  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(pos  >=  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(pos  >=  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	1	None	replace
35	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  if(peekedString  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  if(peekedString  ==  null)  {  if(peekedString  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	if(peekedString  ==  null)  {  if(peekedString  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	4	None	replace
36	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  if(peekedString  ==  null)  {  return  PEEKED_BUFFERED;  }  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  if(peekedString  ==  null)  {  if(peekedString  ==  null)  {  return  PEEKED_BUFFERED;  }  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	if(peekedString  ==  null)  {  if(peekedString  ==  null)  {  return  PEEKED_BUFFERED;  }	      	non-compiled	[CE]  	4	None	replace
37	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  if(peekedString  ==  null)  {  return  PEEKED_NULL;  }  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  if(peekedString  ==  null)  {  if(peekedString  ==  null)  {  return  PEEKED_NULL;  }  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	if(peekedString  ==  null)  {  if(peekedString  ==  null)  {  return  PEEKED_NULL;  }	      	non-compiled	[CE]  	4	None	replace
38	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  if(peekedString  ==  null)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  if(peekedString  ==  null)  {  if(peekedString  ==  null)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	if(peekedString  ==  null)  {  if(peekedString  ==  null)  {  throw  new  NumberFormatException( " ");  }	      	non-compiled	[CE]  	4	None	replace
39	[BUG]  [BUGGY]  }  else  if(pos  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(pos  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(pos  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	2	None	replace
40	[BUG]  [BUGGY]  }  else  if(pos  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;    [BUGGY]  }  else  if(pos  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4082482904638631	954	954	3	replace	}  else  if(pos  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	5	None	replace
