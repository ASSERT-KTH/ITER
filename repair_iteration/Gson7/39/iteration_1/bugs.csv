bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit;  i++)  {  [CE]  [FE]    JsonSyntaxException  [CONTEXT]  private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  [BUGGY]  for(int  i  =  0;  i  <  limit;  i++)  {  [BUGGY]  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit;  i++)  {	for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  	non-compiled	[CE]  	77	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit.length;  i++)  {  [CE]  [FE]      JsonSyntaxException  [CONTEXT]  private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  [BUGGY]  for(int  i  =  0;  i  <  limit.length;  i++)  {  [BUGGY]  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit.length;  i++)  {	for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  	non-compiled	[CE]  	77	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]        JsonSyntaxException  [CONTEXT]  private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  [BUGGY]  for(int  i  =  1;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  1;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {	for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  	non-compiled	[CE]  	77	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit  +  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]          JsonSyntaxException  [CONTEXT]  private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  [BUGGY]  for(int  i  =  0;  i  <  limit  +  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit  +  NON_EXECUTE_PREFIX.length;  i++)  {	for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  	non-compiled	[CE]  	77	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  -  1;  i++)  {  [CE]  [FE]            JsonSyntaxException  [CONTEXT]  private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  -  1;  i++)  {  [BUGGY]  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  -  1;  i++)  {	for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  	non-compiled	[CE]  	77	None	replace
6	[BUG]  [BUGGY]    [CE]  [FE]              JsonSyntaxException  [CONTEXT]  private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  [BUGGY]    [BUGGY]  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	  	for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  	non-compiled	[CE]  	77	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  buffer.length;  i++)  {  [CE]  [FE]    JsonSyntaxException  [CONTEXT]  private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  [BUGGY]  for(int  i  =  0;  i  <  buffer.length;  i++)  {  [BUGGY]  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  buffer.length;  i++)  {	for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  	non-compiled	[CE]  	77	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  [CE]  [FE]      JsonSyntaxException  [CONTEXT]  private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  [BUGGY]  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {	for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  	non-compiled	[CE]  	77	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  1;  i++)  {  [CE]  [FE]        JsonSyntaxException  [CONTEXT]  private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  1;  i++)  {  [BUGGY]  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  1;  i++)  {	for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  	non-compiled	[CE]  	77	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  limit!=  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]          JsonSyntaxException  [CONTEXT]  private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  limit!=  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  limit!=  NON_EXECUTE_PREFIX.length;  i++)  {	for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  	non-compiled	[CE]  	77	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {  [CE]  [FE]    JsonSyntaxException  [CONTEXT]  private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {  [BUGGY]  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {	for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  	non-compiled	[CE]  	77	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  limit;  i++)  {  [CE]  [FE]      JsonSyntaxException  [CONTEXT]  private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  limit;  i++)  {  [BUGGY]  if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  limit;  i++)  {	for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  	non-compiled	[CE]  	77	None	replace
