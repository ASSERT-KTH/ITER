bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit.length  -  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limit.length  -  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit.length  -  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    limit.length;    i++)    {    	non-compiled	[CE]  	2	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limit.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {	  for(int    i    =    0;    i    <    limit.length;    i++)    {    	non-compiled	[CE]  	2	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limit.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {	  for(int    i    =    0;    i    <    limit.length;    i++)    {    	non-compiled	[CE]  	2	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit.length  -  1;  i++)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limit.length  -  1;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    limit.length;    i++)    {    	non-compiled	[CE]  	2	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX.length);    i++)    {    	non-compiled	[CE]  	11	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  pos  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  pos  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  pos  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX.length);    i++)    {    	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit  +  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limit  +  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit  +  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX.length);    i++)    {    	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  1;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  1;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX.length);    i++)    {    	non-compiled	[CE]  	11	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit  ||!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limit  ||!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit  ||!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX.length);    i++)    {    	non-compiled	[CE]  	11	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  limit  >=  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  limit  >=  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  limit  >=  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&    limit!=    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	10	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  buffer[pos  +  NON_EXECUTE_PREFIX.length]!=  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  buffer[pos  +  NON_EXECUTE_PREFIX.length]!=  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  buffer[pos  +  NON_EXECUTE_PREFIX.length]!=  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&    limit!=    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	10	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  buffer[pos]!=  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  buffer[pos]!=  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  buffer[pos]!=  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&    limit!=    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	10	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  limit  ==  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  limit  ==  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  limit  ==  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&    limit!=    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	10	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  limit  >  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  limit  >  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  limit  >  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&    limit!=    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	10	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit  &&  NON_EXECUTE_PREFIX.length!=  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limit  &&  NON_EXECUTE_PREFIX.length!=  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit  &&  NON_EXECUTE_PREFIX.length!=  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&    limit!=    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	10	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  2;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  2;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    1;    i    <    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	3	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  limit;  i++)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  1;  i  <  limit;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  1;  i  <  limit;  i++)  {	  for(int    i    =    1;    i    <    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	3	None	replace
18	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  For(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	For(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    1;    i    <    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	3	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  limit.length;  i++)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  1;  i  <  limit.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  1;  i  <  limit.length;  i++)  {	  for(int    i    =    1;    i    <    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	3	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  buffer.length;  i++)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  1;  i  <  buffer.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  1;  i  <  buffer.length;  i++)  {	  for(int    i    =    0;    i    <    buffer.length;    i++)    {    	non-compiled	[CE]  	7	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  buffer.length  -  1;  i++)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  buffer.length  -  1;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  buffer.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    buffer.length;    i++)    {    	non-compiled	[CE]  	7	None	replace
22	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	6	None	replace
23	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	6	None	replace
24	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  	6	None	replace
25	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  return;  }  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  return;  }  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  return;  }	      	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  throwOnEof;  }	      	non-compiled	[CE]  	6	None	replace
27	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  	6	None	replace
28	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  return;  }  [CE]  [FE]                              JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  return;  }  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  return;  }	      	non-compiled	[CE]  	6	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit  -  1;  i++)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limit  -  1;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit  -  1;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    -    1;    i++)    {    	non-compiled	[CE]  	5	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  -  2;  i++)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  -  2;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    -    1;    i++)    {    	non-compiled	[CE]  	5	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit  &&  i  <  NON_EXECUTE_PREFIX.length  -  1;  i++)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limit  &&  i  <  NON_EXECUTE_PREFIX.length  -  1;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit  &&  i  <  NON_EXECUTE_PREFIX.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    -    1;    i++)    {    	non-compiled	[CE]  	5	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit  &&  NON_EXECUTE_PREFIX.length  -  1;  i++)  {  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limit  &&  NON_EXECUTE_PREFIX.length  -  1;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit  &&  NON_EXECUTE_PREFIX.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    -    1;    i++)    {    	non-compiled	[CE]  	5	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit  +  NON_EXECUTE_PREFIX.length  -  1;  i++)  {  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limit  +  NON_EXECUTE_PREFIX.length  -  1;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit  +  NON_EXECUTE_PREFIX.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    -    1;    i++)    {    	non-compiled	[CE]  	5	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit  +  1;  i++)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limit  +  1;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit  +  1;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    +    1;    i++)    {    	non-compiled	[CE]  	9	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit  +  NON_EXECUTE_PREFIX.length  +  1;  i++)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limit  +  NON_EXECUTE_PREFIX.length  +  1;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit  +  NON_EXECUTE_PREFIX.length  +  1;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    +    1;    i++)    {    	non-compiled	[CE]  	9	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  1);  i++)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  1);  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  1);  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    +    1;    i++)    {    	non-compiled	[CE]  	9	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  1))  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  1))  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  1))  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    +    1;    i++)    {    	non-compiled	[CE]  	9	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  buffer.length  +  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  buffer.length  +  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  buffer.length  +  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    limit    +    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	4	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  pos  +  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  pos  +  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  pos  +  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    limit    +    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	4	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  buf.length  +  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  buf.length  +  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  buf.length  +  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    limit    +    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	4	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  size  +  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  size  +  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  size  +  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    limit    +    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	4	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  buf.length;  i++)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  buf.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  buf.length;  i++)  {	  for(int    i    =    0;    i    <    limit;    i++)    {    	non-compiled	[CE]  	1	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  size;  i++)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  size;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  size;  i++)  {	  for(int    i    =    0;    i    <    limit;    i++)    {    	non-compiled	[CE]  	1	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  limit  <  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  limit  <  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  limit  <  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    +    limit;    i++)    {    	non-compiled	[CE]  	12	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  2;  i++)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  2;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  2;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    +    limit;    i++)    {    	non-compiled	[CE]  	12	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit.length  +  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limit.length  +  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit.length  +  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    +    limit;    i++)    {    	non-compiled	[CE]  	12	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX[i]))    {    	non-compiled	[CE]  	8	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  pos  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  pos  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  pos  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX[i]))    {    	non-compiled	[CE]  	8	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[pos]))  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[pos]))  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[pos]))  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX[i]))    {    	non-compiled	[CE]  	8	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit  +  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limit  +  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit  +  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX[i]))    {    	non-compiled	[CE]  	8	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit  ||!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limit  ||!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit  ||!fillBuffer(NON_EXECUTE_PREFIX[i]))  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX[i]))    {    	non-compiled	[CE]  	8	None	replace
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_FREFIX.length;  i++)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_FREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_FREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    limit;    i++)    {    	non-compiled	[CE]  	1	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIXS.length;  i++)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIXS.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIXS.length;  i++)  {	  for(int    i    =    0;    i    <    limit;    i++)    {    	non-compiled	[CE]  	1	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX.length);    i++)    {    	non-compiled	[CE]  	11	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length,  limit);  i++)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length,  limit);  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length,  limit);  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX.length);    i++)    {    	non-compiled	[CE]  	11	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX.length);    i++)    {    	non-compiled	[CE]  	11	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  limit);  i++)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  limit);  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  limit);  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX.length);    i++)    {    	non-compiled	[CE]  	11	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    limit    +    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	4	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  4;  i++)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  4;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  4;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    +    limit;    i++)    {    	non-compiled	[CE]  	12	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  10;  i++)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  10;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  +  10;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    +    limit;    i++)    {    	non-compiled	[CE]  	12	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  -  limit;  i++)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  -  limit;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  -  limit;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    +    limit;    i++)    {    	non-compiled	[CE]  	12	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.buffer.length;  i++)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  this.buffer.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  this.buffer.length;  i++)  {	  for(int    i    =    0;    i    <    limit.length;    i++)    {    	non-compiled	[CE]  	2	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  STRICT_PREFIX.length;  i++)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  STRICT_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  STRICT_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    limit.length;    i++)    {    	non-compiled	[CE]  	2	None	replace
64	[BUG]  [BUGGY]  int  i  =  stack.size();  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  int  i  =  stack.size();  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	int  i  =  stack.size();	      	non-compiled	[CE]  	6	None	replace
65	[BUG]  [BUGGY]  int  i  =  nextNonWhitespace(false);  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  int  i  =  nextNonWhitespace(false);  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	int  i  =  nextNonWhitespace(false);	      	non-compiled	[CE]  	6	None	replace
66	[BUG]  [BUGGY]  int  i  =  nextNonWhitespace(false,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  int  i  =  nextNonWhitespace(false,  NON_EXECUTE_PREFIX.length);  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	int  i  =  nextNonWhitespace(false,  NON_EXECUTE_PREFIX.length);	      	non-compiled	[CE]  	6	None	replace
67	[BUG]  [BUGGY]  int  i  =(int)Math.floor(limit  +  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  int  i  =(int)Math.floor(limit  +  NON_EXECUTE_PREFIX.length);  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	int  i  =(int)Math.floor(limit  +  NON_EXECUTE_PREFIX.length);	      	non-compiled	[CE]  	6	None	replace
68	[BUG]  [BUGGY]  int  i  =  nextPosition(nonEXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  int  i  =  nextPosition(nonEXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	int  i  =  nextPosition(nonEXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);	      	non-compiled	[CE]  	6	None	replace
69	[BUG]  [BUGGY]  int  i  =  nextPosition(nonEXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                            JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  int  i  =  nextPosition(nonEXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	int  i  =  nextPosition(nonEXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);	      	non-compiled	[CE]  	6	None	replace
70	[BUG]  [BUGGY]  int  i  =  nextNonWhitespace(false,  NON_EXECUTE_PREFIX);  [CE]  [FE]                              JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  int  i  =  nextNonWhitespace(false,  NON_EXECUTE_PREFIX);  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	int  i  =  nextNonWhitespace(false,  NON_EXECUTE_PREFIX);	      	non-compiled	[CE]  	6	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  length;  i++)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  length;  i++)  {	  for(int    i    =    0;    i    <    buffer.length;    i++)    {    	non-compiled	[CE]  	7	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0,  limit  =  NON_EXECUTE_PREFIX.length;  i  <  limit;  i++)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0,  limit  =  NON_EXECUTE_PREFIX.length;  i  <  limit;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0,  limit  =  NON_EXECUTE_PREFIX.length;  i  <  limit;  i++)  {	  for(int    i    =    1;    i    <    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	3	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  -  4;  i++)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  -  4;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  -  4;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    -    1;    i++)    {    	non-compiled	[CE]  	5	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  -  10;  i++)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  -  10;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  -  10;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    -    1;    i++)    {    	non-compiled	[CE]  	5	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  -  6;  i++)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  -  6;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  -  6;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    -    1;    i++)    {    	non-compiled	[CE]  	5	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[pos  +  i]))  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[pos  +  i]))  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[pos  +  i]))  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX[i]))    {    	non-compiled	[CE]  	8	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[pos  +  1]))  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[pos  +  1]))  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[pos  +  1]))  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX[i]))    {    	non-compiled	[CE]  	8	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[pos++]))  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[pos++]))  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[pos++]))  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX[i]))    {    	non-compiled	[CE]  	8	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  buffer.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  buffer.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  buffer.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX[i]))    {    	non-compiled	[CE]  	8	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  pos  >=  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  pos  >=  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  pos  >=  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&    limit!=    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	10	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  buffer[i]!=  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  buffer[i]!=  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  buffer[i]!=  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&    limit!=    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	10	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&    limit!=    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	10	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length  -  1))  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length  -  1))  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length  -  1))  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    -    1;    i++)    {    	non-compiled	[CE]  	5	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length  -  1))  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length  -  1))  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length  -  1))  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    -    1;    i++)    {    	non-compiled	[CE]  	5	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  pos  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length  -  1))  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  pos  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length  -  1))  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  pos  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length  -  1))  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    -    1;    i++)    {    	non-compiled	[CE]  	5	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  i  <  limit;  i++)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  i  <  limit;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  i  <  limit;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    +    limit;    i++)    {    	non-compiled	[CE]  	12	None	replace
87	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  ++i)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  ++i)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  ++i)  {	  for(int    i    =    0;    i    <    limit;    i++)    {    	non-compiled	[CE]  	1	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.size();  i++)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.size();  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.size();  i++)  {	  for(int    i    =    0;    i    <    limit;    i++)    {    	non-compiled	[CE]  	1	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIXL.length;  i++)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIXL.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIXL.length;  i++)  {	  for(int    i    =    0;    i    <    limit;    i++)    {    	non-compiled	[CE]  	1	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit.length  &&!fillBuffer(NON_EXECUTE_PREFIX);  i++)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limit.length  &&!fillBuffer(NON_EXECUTE_PREFIX);  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit.length  &&!fillBuffer(NON_EXECUTE_PREFIX);  i++)  {	  for(int    i    =    0;    i    <    limit.length;    i++)    {    	non-compiled	[CE]  	2	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0,  limit  =  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0,  limit  =  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0,  limit  =  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    1;    i    <    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	3	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  pos!=  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  pos!=  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  pos!=  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&    limit!=    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	10	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  pos  ==  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  pos  ==  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&  pos  ==  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&    limit!=    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	10	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limit  *  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limit  *  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limit  *  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    limit    +    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	4	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count  +  NON_EXECUTE_PREFIX.length;  i++)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  count  +  NON_EXECUTE_PREFIX.length;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  count  +  NON_EXECUTE_PREFIX.length;  i++)  {	  for(int    i    =    0;    i    <    limit    +    NON_EXECUTE_PREFIX.length;    i++)    {    	non-compiled	[CE]  	4	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]))  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX[i]))    {    	non-compiled	[CE]  	8	None	replace
97	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	6	None	replace
98	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length)  {  return;  }  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length)  {  return;  }  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length)  {  return;  }	      	non-compiled	[CE]  	6	None	replace
99	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  	6	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  limits;  i++)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  limits;  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  limits;  i++)  {	  for(int    i    =    0;    i    <    buffer.length;    i++)    {    	non-compiled	[CE]  	7	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX.length);    i++)    {    	non-compiled	[CE]  	11	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length  -  limit);  i++)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }    [BUGGY]  for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length  -  limit);  i++)  {  [BUGGY]    if  (buffer[pos  +  i]  !=  NON_EXECUTE_PREFIX[i])  {  return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1582	1582	3	replace	for(int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length  -  limit);  i++)  {	  for(int    i    =    0;    i    <    NON_EXECUTE_PREFIX.length    &&!fillBuffer(NON_EXECUTE_PREFIX.length);    i++)    {    	non-compiled	[CE]  	11	None	replace
