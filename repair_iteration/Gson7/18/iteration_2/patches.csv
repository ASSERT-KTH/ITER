bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  peekedLong  =  p.getIntValue();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  p.getIntValue();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  p.getIntValue();	  int    peekedLong    =    peeked.getIntValue();    	non-compiled	[CE]  	102	None	replace
2	[BUG]  [BUGGY]  int  peekedLong  =  pathNames.getIntValue();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  pathNames.getIntValue();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  pathNames.getIntValue();	  int    peekedLong    =    peeked.getIntValue();    	non-compiled	[CE]  	102	None	replace
3	[BUG]  [BUGGY]  int  peekedLong  =  PEEKED_BUFFERED.getIntValue();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  PEEKED_BUFFERED.getIntValue();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  PEEKED_BUFFERED.getIntValue();	  int    peekedLong    =    peeked.getIntValue();    	non-compiled	[CE]  	102	None	replace
4	[BUG]  [BUGGY]  int  peekedLong  =  pathNames[peeked.getIntValue()  ];  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  pathNames[peeked.getIntValue()  ];  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  pathNames[peeked.getIntValue()  ];	  int    peekedLong    =    peeked.getIntValue();    	non-compiled	[CE]  	102	None	replace
5	[BUG]  [BUGGY]  int  peekedLong  =  pathNames[peeked].getIntValue();  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  pathNames[peeked].getIntValue();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  pathNames[peeked].getIntValue();	  int    peekedLong    =    peeked.getIntValue();    	non-compiled	[CE]  	102	None	replace
6	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(p    ==    0    ||    peekedLong!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	52	None	replace
7	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    ==    0    ||    peekedLong!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	52	None	replace
8	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedLong  >=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  peekedLong  >=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  peekedLong  >=  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    ==    0    ||    peekedLong!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	52	None	replace
9	[BUG]  [BUGGY]  if(p  ==  0  &&  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  &&  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  &&  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    ==    0    ||    peekedLong!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	52	None	replace
10	[BUG]  [BUGGY]  if(p  >=  0  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  0  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  0  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    ==    0    ||    peekedLong!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	52	None	replace
11	[BUG]  [BUGGY]  if(p  >=  0  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  0  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  0  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    ==    0    ||    peekedLong!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	52	None	replace
12	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	79	None	replace
13	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	79	None	replace
14	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOOLEAN_QUOTED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOOLEAN_QUOTED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOOLEAN_QUOTED)  {	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	79	None	replace
15	[BUG]  [BUGGY]  intpeekedLong  =  stack.size()  -  1;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  intpeekedLong  =  stack.size()  -  1;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	intpeekedLong  =  stack.size()  -  1;	  intpeekedLong    =    stack.size();    	non-compiled	[CE]  	87	None	replace
16	[BUG]  [BUGGY]  intpeekedLong  =  peeked.size();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  intpeekedLong  =  peeked.size();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	intpeekedLong  =  peeked.size();	  intpeekedLong    =    stack.size();    	non-compiled	[CE]  	87	None	replace
17	[BUG]  [BUGGY]  intpeekedLong  =  stack.size()  +  1;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  intpeekedLong  =  stack.size()  +  1;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	intpeekedLong  =  stack.size()  +  1;	  intpeekedLong    =    stack.size();    	non-compiled	[CE]  	87	None	replace
18	[BUG]  [BUGGY]  intpeekedLong  =  stack.size()  -  4;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  intpeekedLong  =  stack.size()  -  4;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	intpeekedLong  =  stack.size()  -  4;	  intpeekedLong    =    stack.size();    	non-compiled	[CE]  	87	None	replace
19	[BUG]  [BUGGY]  if(p  <  0  ||  peekedLong  ==  null)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  0  ||  peekedLong  ==  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  0  ||  peekedLong  ==  null)  {	  if(p    >    0    ||    peekedLong    ==    null)    {    	non-compiled	[CE]  	44	None	replace
20	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedLong  ==  null)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  peekedLong  ==  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  peekedLong  ==  null)  {	  if(p    >    0    ||    peekedLong    ==    null)    {    	non-compiled	[CE]  	44	None	replace
21	[BUG]  [BUGGY]  if(p  >=  0  ||  peekedLong  ==  null)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  0  ||  peekedLong  ==  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  0  ||  peekedLong  ==  null)  {	  if(p    >    0    ||    peekedLong    ==    null)    {    	non-compiled	[CE]  	44	None	replace
22	[BUG]  [BUGGY]  if(p  >  0  &&  peekedLong  ==  null)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >  0  &&  peekedLong  ==  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >  0  &&  peekedLong  ==  null)  {	  if(p    >    0    ||    peekedLong    ==    null)    {    	non-compiled	[CE]  	44	None	replace
23	[BUG]  [BUGGY]  if(p  <  =  0  ||  peekedLong  ==  null)  {  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  0  ||  peekedLong  ==  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  0  ||  peekedLong  ==  null)  {	  if(p    >    0    ||    peekedLong    ==    null)    {    	non-compiled	[CE]  	44	None	replace
24	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  >=  PEEKED_BUFFER)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  >=  PEEKED_BUFFER)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p  >=  PEEKED_BUFFER)  {	  if(p!=    PEEKED_BUFFER)    {    	non-compiled	[CE]  	71	None	replace
25	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p!=  PEEKED_BUFFER)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p!=  PEEKED_BUFFER)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p!=  PEEKED_BUFFER)  {	  if(p!=    PEEKED_BUFFER)    {    	non-compiled	[CE]  	71	None	replace
26	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_BUFFER)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_BUFFER)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_BUFFER)  {	  if(p!=    PEEKED_BUFFER)    {    	non-compiled	[CE]  	71	None	replace
27	[BUG]  [BUGGY]  if(p  >=  PEEKED_EOF)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  PEEKED_EOF)  {	  if(p!=    PEEKED_BUFFER)    {    	non-compiled	[CE]  	71	None	replace
28	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_DECIMAL  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_DECIMAL  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_DECIMAL  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	73	None	replace
29	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_DECIMAL)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	73	None	replace
30	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_DECIMAL)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	73	None	replace
31	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
32	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
33	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  ==  result)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  ==  result)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  ==  result)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
34	[BUG]  [BUGGY]  if(p  ==  PEEKED_END)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_END)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_END)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
35	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ".intValue());  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ".intValue());  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ".intValue());  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
36	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  >=  result)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  >=  result)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  >=  result)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
37	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ".doubleValue());  }  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ".doubleValue());  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ".doubleValue());  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
38	[BUG]  [BUGGY]  intpeekedLong  =  stack.size()  >  1;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  intpeekedLong  =  stack.size()  >  1;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	intpeekedLong  =  stack.size()  >  1;	  intpeekedLong    =    stack.size()    >    0;    	non-compiled	[CE]  	88	None	replace
39	[BUG]  [BUGGY]  intpeekedLong  =  peeked.size()  >  0;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  intpeekedLong  =  peeked.size()  >  0;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	intpeekedLong  =  peeked.size()  >  0;	  intpeekedLong    =    stack.size()    >    0;    	non-compiled	[CE]  	88	None	replace
40	[BUG]  [BUGGY]  intpeekedLong  =  stack.size()  <  0;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  intpeekedLong  =  stack.size()  <  0;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	intpeekedLong  =  stack.size()  <  0;	  intpeekedLong    =    stack.size()    >    0;    	non-compiled	[CE]  	88	None	replace
41	[BUG]  [BUGGY]  int  peekedLong  =  p.getInt();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  p.getInt();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  p.getInt();	  int    peekedLong    =    peeked.getInt();    	non-compiled	[CE]  	101	None	replace
42	[BUG]  [BUGGY]  int  peekedLong  =  pathNames.getInt();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  pathNames.getInt();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  pathNames.getInt();	  int    peekedLong    =    peeked.getInt();    	non-compiled	[CE]  	101	None	replace
43	[BUG]  [BUGGY]  int  peekedLong  =  pathIndices.getInt();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  pathIndices.getInt();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  pathIndices.getInt();	  int    peekedLong    =    peeked.getInt();    	non-compiled	[CE]  	101	None	replace
44	[BUG]  [BUGGY]  int  peekedLong  =  pathIndices[peeked.getInt();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  pathIndices[peeked.getInt();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  pathIndices[peeked.getInt();	  int    peekedLong    =    peeked.getInt();    	non-compiled	[CE]  	101	None	replace
45	[BUG]  [BUGGY]  int  peekedLong  =  PEEKED_BUFFERED.getInt();  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  PEEKED_BUFFERED.getInt();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  PEEKED_BUFFERED.getInt();	  int    peekedLong    =    peeked.getInt();    	non-compiled	[CE]  	101	None	replace
46	[BUG]  [BUGGY]  int  peekedLong  =  pathIndices[peeked].getInt();  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  pathIndices[peeked].getInt();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  pathIndices[peeked].getInt();	  int    peekedLong    =    peeked.getInt();    	non-compiled	[CE]  	101	None	replace
47	[BUG]  [BUGGY]  int  peekedLong  =  pathNames[peeked.getInt();  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  pathNames[peeked.getInt();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  pathNames[peeked.getInt();	  int    peekedLong    =    peeked.getInt();    	non-compiled	[CE]  	101	None	replace
48	[BUG]  [BUGGY]  if(p  ==  peekedLong)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  peekedLong)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  peekedLong)  {	  if(p    >=    result)    {    	non-compiled	[CE]  	91	None	replace
49	[BUG]  [BUGGY]  if(peekedLong  >=  result)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  >=  result)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  >=  result)  {	  if(p    >=    result)    {    	non-compiled	[CE]  	91	None	replace
50	[BUG]  [BUGGY]  if(p  >=  PEEKED_BOOLEAN)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  PEEKED_BOOLEAN)  {	  if(peekedLong    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	108	None	replace
51	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedLong!=  PEEKED_BUFFERED)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  peekedLong!=  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  peekedLong!=  PEEKED_BUFFERED)  {	  if(p    ==    0    ||    peekedLong!=    PEEKED_EOF)    {    	non-compiled	[CE]  	55	None	replace
52	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedLong  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  peekedLong  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  peekedLong  ==  PEEKED_BUFFERED)  {	  if(p    ==    0    ||    peekedLong!=    PEEKED_EOF)    {    	non-compiled	[CE]  	55	None	replace
53	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedLong  >=  PEEKED_BUFFERED)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  peekedLong  >=  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  peekedLong  >=  PEEKED_BUFFERED)  {	  if(p    ==    0    ||    peekedLong!=    PEEKED_EOF)    {    	non-compiled	[CE]  	55	None	replace
54	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedLong!=  PEEKED_FALSE)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  peekedLong!=  PEEKED_FALSE)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  peekedLong!=  PEEKED_FALSE)  {	  if(p    ==    0    ||    peekedLong!=    PEEKED_EOF)    {    	non-compiled	[CE]  	55	None	replace
55	[BUG]  [BUGGY]  if(p  >=  0  ||  peekedLong  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  0  ||  peekedLong  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  0  ||  peekedLong  ==  PEEKED_BUFFERED)  {	  if(p    ==    0    ||    peekedLong!=    PEEKED_EOF)    {    	non-compiled	[CE]  	55	None	replace
56	[BUG]  [BUGGY]  if(p  >=  0  ||  peekedLong!=  PEEKED_BUFFERED)  {  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  0  ||  peekedLong!=  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  0  ||  peekedLong!=  PEEKED_BUFFERED)  {	  if(p    ==    0    ||    peekedLong!=    PEEKED_EOF)    {    	non-compiled	[CE]  	55	None	replace
57	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOOLEAN_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOOLEAN_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOOLEAN_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(p    ==    PEEKED_BOOLEAN_QUOTED_NAME)    {    	non-compiled	[CE]  	19	None	replace
58	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_BOOLEAN_QUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_BOOLEAN_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_BOOLEAN_QUOTED_NAME)  {	  if(p    ==    PEEKED_BOOLEAN_QUOTED_NAME)    {    	non-compiled	[CE]  	19	None	replace
59	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOOLEAN_QUOTED_NAME  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOOLEAN_QUOTED_NAME  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOOLEAN_QUOTED_NAME  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    PEEKED_BOOLEAN_QUOTED_NAME)    {    	non-compiled	[CE]  	19	None	replace
60	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(p    ==    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	16	None	replace
61	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	16	None	replace
62	[BUG]  [BUGGY]  if(p  ==  PEEKED_GLOBAL  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_GLOBAL  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_GLOBAL  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    PEEKED_GLOBAL    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	61	None	replace
63	[BUG]  [BUGGY]  if(p  ==  PEEKED_GLOBAL  ||  p  ==  PEEKED_EOF)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_GLOBAL  ||  p  ==  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_GLOBAL  ||  p  ==  PEEKED_EOF)  {	  if(p    ==    PEEKED_GLOBAL    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	61	None	replace
64	[BUG]  [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_GLOBAL)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_GLOBAL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_GLOBAL)  {	  if(p    ==    PEEKED_GLOBAL    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	61	None	replace
65	[BUG]  [BUGGY]  if(p  ==  PEEKED_GLOBAL  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_GLOBAL  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_GLOBAL  ||  p  ==  PEEKED_BOOLEAN)  {	  if(p    ==    PEEKED_GLOBAL    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	61	None	replace
66	[BUG]  [BUGGY]  int  peekedLong  =(int)p  +  1;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =(int)p  +  1;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =(int)p  +  1;	  int    peekedLong    =(int)p;    	non-compiled	[CE]  	103	None	replace
67	[BUG]  [BUGGY]  float  peekedLong  =(float)p;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  float  peekedLong  =(float)p;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	float  peekedLong  =(float)p;	  int    peekedLong    =(int)p;    	non-compiled	[CE]  	103	None	replace
68	[BUG]  [BUGGY]  int  peekedLong  =(int)p  -  1;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =(int)p  -  1;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =(int)p  -  1;	  int    peekedLong    =(int)p;    	non-compiled	[CE]  	103	None	replace
69	[BUG]  [BUGGY]  long  peekedLong  =(long)p;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  long  peekedLong  =(long)p;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	long  peekedLong  =(long)p;	  int    peekedLong    =(int)p;    	non-compiled	[CE]  	103	None	replace
70	[BUG]  [BUGGY]  char  peekedLong  =(char)p;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  char  peekedLong  =(char)p;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	char  peekedLong  =(char)p;	  int    peekedLong    =(int)p;    	non-compiled	[CE]  	103	None	replace
71	[BUG]  [BUGGY]  if(p  <  =  0  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  0  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  0  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    <    =    0)    {    	non-compiled	[CE]  	39	None	replace
72	[BUG]  [BUGGY]  if(p  <  =  0  ||  peekedLong  ==  PEEKED_NULL)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  0  ||  peekedLong  ==  PEEKED_NULL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  0  ||  peekedLong  ==  PEEKED_NULL)  {	  if(p    <    =    0)    {    	non-compiled	[CE]  	39	None	replace
73	[BUG]  [BUGGY]  if(p  <  =  0  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  0  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  0  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    <    =    0)    {    	non-compiled	[CE]  	39	None	replace
74	[BUG]  [BUGGY]  if(p  <  =  0  ||  peekedLong!=  PEEKED_NULL)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  0  ||  peekedLong!=  PEEKED_NULL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  0  ||  peekedLong!=  PEEKED_NULL)  {	  if(p    <    =    0)    {    	non-compiled	[CE]  	39	None	replace
75	[BUG]  [BUGGY]  if(peedLong  ==  0)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peedLong  ==  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peedLong  ==  0)  {	  if(peekedLong    ==    0)    {    	non-compiled	[CE]  	89	None	replace
76	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BOTH)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BOTH)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BOTH)  {	  if(p    ==    PEEKED_BOTH)    {    	non-compiled	[CE]  	31	None	replace
77	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOTH  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOTH  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOTH  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    PEEKED_BOTH)    {    	non-compiled	[CE]  	31	None	replace
78	[BUG]  [BUGGY]  if(peekedLong  ==  result)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  ==  result)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  ==  result)  {	  if(peedLong    ==    null)    {    	non-compiled	[CE]  	75	None	replace
79	[BUG]  [BUGGY]  if(p  >  PEEKED_FALSE)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >  PEEKED_FALSE)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >  PEEKED_FALSE)  {	  if(p    >=    PEEKED_FALSE)    {    	non-compiled	[CE]  	38	None	replace
80	[BUG]  [BUGGY]  if(p  <  0  ||  peekedLong!=  null)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  0  ||  peekedLong!=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  0  ||  peekedLong!=  null)  {	  if(p    >    0    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	43	None	replace
81	[BUG]  [BUGGY]  if(p  >=  0  ||  peekedLong!=  null)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  0  ||  peekedLong!=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  0  ||  peekedLong!=  null)  {	  if(p    >    0    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	43	None	replace
82	[BUG]  [BUGGY]  if(p  >  0  &&  peekedLong!=  null)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >  0  &&  peekedLong!=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >  0  &&  peekedLong!=  null)  {	  if(p    >    0    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	43	None	replace
83	[BUG]  [BUGGY]  if(p  <  =  0  ||  peekedLong!=  null)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  0  ||  peekedLong!=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  0  ||  peekedLong!=  null)  {	  if(p    >    0    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	43	None	replace
84	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	20	None	replace
85	[BUG]  [BUGGY]  if(p  ==  PEEKED_BEGIN_OBJECT  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BEGIN_OBJECT  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BEGIN_OBJECT  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	20	None	replace
86	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_FRACTION_DIGIT)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	20	None	replace
87	[BUG]  [BUGGY]  if(p  <  =  PEEKED_FALSE)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_FALSE)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_FALSE)  {	  if(p!=    PEEKED_EOF)    {    	non-compiled	[CE]  	10	None	replace
88	[BUG]  [BUGGY]  if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_EOF)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_EOF)  {	  if(p    ==    PEEKED_BLOCK    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	84	None	replace
89	[BUG]  [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BLOCK)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BLOCK)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BLOCK)  {	  if(p    ==    PEEKED_BLOCK    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	84	None	replace
90	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_BLOCK)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_BLOCK)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_BLOCK)  {	  if(p    ==    PEEKED_BLOCK    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	84	None	replace
91	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BLOCK)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BLOCK)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BLOCK)  {	  if(p    ==    PEEKED_BLOCK    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	84	None	replace
92	[BUG]  [BUGGY]  if(p  <  =  1)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  1)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  1)  {	  if(p    ==    1)    {    	non-compiled	[CE]  	90	None	replace
93	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedLong  ==  0)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  peekedLong  ==  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  peekedLong  ==  0)  {	  if(p    ==    1)    {    	non-compiled	[CE]  	90	None	replace
94	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedLong!=  0)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  peekedLong!=  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  peekedLong!=  0)  {	  if(p    ==    1)    {    	non-compiled	[CE]  	90	None	replace
95	[BUG]  [BUGGY]  peekedLong  =  p;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  peekedLong  =  p;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	peekedLong  =  p;	  if(p    ==    PEEKED_NULL)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
96	[BUG]  [BUGGY]  peekedLong  =  p.nextInt();  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  peekedLong  =  p.nextInt();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	peekedLong  =  p.nextInt();	  if(p    ==    PEEKED_NULL)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
97	[BUG]  [BUGGY]  peekedLong  =  p.nextDouble();  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  peekedLong  =  p.nextDouble();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	peekedLong  =  p.nextDouble();	  if(p    ==    PEEKED_NULL)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
98	[BUG]  [BUGGY]  pendLong  =  p.nextInt();  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  pendLong  =  p.nextInt();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	pendLong  =  p.nextInt();	  if(p    ==    PEEKED_NULL)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
99	[BUG]  [BUGGY]  bucket  ==  null?  1  :  0;  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  bucket  ==  null?  1  :  0;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	bucket  ==  null?  1  :  0;	  if(p    ==    PEEKED_NULL)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
100	[BUG]  [BUGGY]  peekedLong  =  p.next();  [CE]  [FE]                                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  peekedLong  =  p.next();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	peekedLong  =  p.next();	  if(p    ==    PEEKED_NULL)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
101	[BUG]  [BUGGY]  peekedLong  =  true;  [CE]  [FE]                                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  peekedLong  =  true;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	peekedLong  =  true;	  if(p    ==    PEEKED_NULL)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
102	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedLong  ==  result)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  peekedLong  ==  result)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  peekedLong  ==  result)  {	  if(p    ==    0    ||    peekedLong!=    result)    {    	non-compiled	[CE]  	110	None	replace
103	[BUG]  [BUGGY]  if(peekedLong  ==  0  ||  peekedLong!=  result)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  ==  0  ||  peekedLong!=  result)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  ==  0  ||  peekedLong!=  result)  {	  if(p    ==    0    ||    peekedLong!=    result)    {    	non-compiled	[CE]  	110	None	replace
104	[BUG]  [BUGGY]  if(p  ==  0  &&  peekedLong!=  result)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  &&  peekedLong!=  result)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  &&  peekedLong!=  result)  {	  if(p    ==    0    ||    peekedLong!=    result)    {    	non-compiled	[CE]  	110	None	replace
105	[BUG]  [BUGGY]  int  peekedLong  =  p.length();  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  p.length();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  p.length();	  int    peekedLong    =    peeked.length();    	non-compiled	[CE]  	50	None	replace
106	[BUG]  [BUGGY]  int  peekedLong  =  pathNames.length();  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  pathNames.length();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  pathNames.length();	  int    peekedLong    =    peeked.length();    	non-compiled	[CE]  	50	None	replace
107	[BUG]  [BUGGY]  int  peekedLong  =  pathNames[peeked.length()  ];  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  pathNames[peeked.length()  ];  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  pathNames[peeked.length()  ];	  int    peekedLong    =    peeked.length();    	non-compiled	[CE]  	50	None	replace
108	[BUG]  [BUGGY]  int  peekedLong  =  path.length();  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  path.length();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  path.length();	  int    peekedLong    =    peeked.length();    	non-compiled	[CE]  	50	None	replace
109	[BUG]  [BUGGY]  int  peekedLong  =  PEEKED_BUFFERED.length();  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  PEEKED_BUFFERED.length();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  PEEKED_BUFFERED.length();	  int    peekedLong    =    peeked.length();    	non-compiled	[CE]  	50	None	replace
110	[BUG]  [BUGGY]  int  peekedLong  =  pathIndices.length();  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  pathIndices.length();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  pathIndices.length();	  int    peekedLong    =    peeked.length();    	non-compiled	[CE]  	50	None	replace
111	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_SIGN  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_SIGN  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_EXP_SIGN  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	72	None	replace
112	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	72	None	replace
113	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_DECIMAL  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_DECIMAL  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_DECIMAL  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	72	None	replace
114	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_SIGN)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_SIGN)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	72	None	replace
115	[BUG]  [BUGGY]  if(p!=  null)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  null)  {	  if(p    ==    null)    {    	non-compiled	[CE]  	14	None	replace
116	[BUG]  [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_FFERED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_FFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_FFERED)  {	  if(p    ==    PEEKED_FFERED    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	82	None	replace
117	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BOOLEAN)  {	  if(p    ==    PEEKED_FFERED    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	82	None	replace
118	[BUG]  [BUGGY]  if(p  ==  PEEKED_FFERED  ||  p  ==  PEEKED_EOF)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_FFERED  ||  p  ==  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_FFERED  ||  p  ==  PEEKED_EOF)  {	  if(p    ==    PEEKED_FFERED    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	82	None	replace
119	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedLong  >=  null)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  peekedLong  >=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  peekedLong  >=  null)  {	  if(p    ==    0    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	54	None	replace
120	[BUG]  [BUGGY]  if(p!=  0  ||  peekedLong  ==  null)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  0  ||  peekedLong  ==  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  0  ||  peekedLong  ==  null)  {	  if(p    ==    0    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	54	None	replace
121	[BUG]  [BUGGY]  if(p  <  0  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  0  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  0  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    <    0)    {    	non-compiled	[CE]  	42	None	replace
122	[BUG]  [BUGGY]  if(p  <  0  ||  peekedLong  ==  PEEKED_NULL)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  0  ||  peekedLong  ==  PEEKED_NULL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  0  ||  peekedLong  ==  PEEKED_NULL)  {	  if(p    <    0)    {    	non-compiled	[CE]  	42	None	replace
123	[BUG]  [BUGGY]  if(p  <  =  PEEKED_BLOCK)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_BLOCK)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_BLOCK)  {	  if(p    >=    PEEKED_BLOCK)    {    	non-compiled	[CE]  	3	None	replace
124	[BUG]  [BUGGY]  if(p  >  PEEKED_BLOCK)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >  PEEKED_BLOCK)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >  PEEKED_BLOCK)  {	  if(p    >=    PEEKED_BLOCK)    {    	non-compiled	[CE]  	3	None	replace
125	[BUG]  [BUGGY]  if(p  <  =  PEEKED_EOF)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_EOF)  {	  if(p    <    =    PEEKED_LONG)    {    	non-compiled	[CE]  	97	None	replace
126	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	85	None	replace
127	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_BOOLEAN)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	85	None	replace
128	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_BOOLEAN)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	85	None	replace
129	[BUG]  [BUGGY]  if(p  ==  PEEKED_OBJECT  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_OBJECT  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_OBJECT  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	85	None	replace
130	[BUG]  [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BOOLEAN)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	85	None	replace
131	[BUG]  [BUGGY]  if(p  ==  MIN_INCOMPLETE_INTEGER)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  MIN_INCOMPLETE_INTEGER)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  MIN_INCOMPLETE_INTEGER)  {	  if(p!=    peekedLong)    {    	non-compiled	[CE]  	35	None	replace
132	[BUG]  [BUGGY]  if(p  <  =  PEEKED_BUFFERED  ||  p  ==  PEEKED_EOF)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_BUFFERED  ||  p  ==  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_BUFFERED  ||  p  ==  PEEKED_EOF)  {	  if(p    <    =    PEEKED_LONG    ||    p    ==    PEEKED_EOF)    {    	non-compiled	[CE]  	96	None	replace
133	[BUG]  [BUGGY]  if(p  <  =  PEEKED_LONG  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_LONG  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_LONG  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    <    =    PEEKED_LONG    ||    p    ==    PEEKED_EOF)    {    	non-compiled	[CE]  	96	None	replace
134	[BUG]  [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    <    =    PEEKED_LONG    ||    p    ==    PEEKED_EOF)    {    	non-compiled	[CE]  	96	None	replace
135	[BUG]  [BUGGY]  if(peekedLong!=  NUMBER_CHAR_EXP_SIGN  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  NUMBER_CHAR_EXP_SIGN  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  NUMBER_CHAR_EXP_SIGN  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	116	None	replace
136	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	116	None	replace
137	[BUG]  [BUGGY]  if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_SIGN)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	116	None	replace
138	[BUG]  [BUGGY]  if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	116	None	replace
139	[BUG]  [BUGGY]  if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	116	None	replace
140	[BUG]  [BUGGY]  if(peekedLong!=  NUMBER_CHAR_SIGN  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  NUMBER_CHAR_SIGN  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  NUMBER_CHAR_SIGN  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	116	None	replace
141	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p!=  PEEKED_LONG)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p!=  PEEKED_LONG)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p!=  PEEKED_LONG)  {	  if(p!=    PEEKED_LONG)    {    	non-compiled	[CE]  	37	None	replace
142	[BUG]  [BUGGY]  parent  ==  null  ||  p  ==  PEEKED_NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  parent  ==  null  ||  p  ==  PEEKED_NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	parent  ==  null  ||  p  ==  PEEKED_NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	46	None	replace
143	[BUG]  [BUGGY]  bucket  ==  null  ||  p  ==  PEEKED_NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  bucket  ==  null  ||  p  ==  PEEKED_NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	bucket  ==  null  ||  p  ==  PEEKED_NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	46	None	replace
144	[BUG]  [BUGGY]  bucket  ==  null  ||  p  ==  PEEKED_BUFFERED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  bucket  ==  null  ||  p  ==  PEEKED_BUFFERED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	bucket  ==  null  ||  p  ==  PEEKED_BUFFERED)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	46	None	replace
145	[BUG]  [BUGGY]  bucket  ==  null  &&  p  ==  PEEKED_NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  bucket  ==  null  &&  p  ==  PEEKED_NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	bucket  ==  null  &&  p  ==  PEEKED_NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	46	None	replace
146	[BUG]  [BUGGY]  parent  ==  null  ||  p  ==  PEEKED_BUFFERED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  parent  ==  null  ||  p  ==  PEEKED_BUFFERED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	parent  ==  null  ||  p  ==  PEEKED_BUFFERED)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	46	None	replace
147	[BUG]  [BUGGY]  bucket  ==  null  &&  p  ==  PEEKED_BUFFERED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  bucket  ==  null  &&  p  ==  PEEKED_BUFFERED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	bucket  ==  null  &&  p  ==  PEEKED_BUFFERED)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	46	None	replace
148	[BUG]  [BUGGY]  parent  ==  null  ||  p  ==  PEEKED_NULL)  {  throw  new  IllegalArgumentException( " ".input);  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  parent  ==  null  ||  p  ==  PEEKED_NULL)  {  throw  new  IllegalArgumentException( " ".input);  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	parent  ==  null  ||  p  ==  PEEKED_NULL)  {  throw  new  IllegalArgumentException( " ".input);  }	  if(p    ==    PEEKED_NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	46	None	replace
149	[BUG]  [BUGGY]  int  peekedLong  =  p;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  p;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  p;	  int    peekedLong    =    getPeek();    	non-compiled	[CE]  	104	None	replace
150	[BUG]  [BUGGY]  int  peekedLong  =  getPeek()  +  1;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  getPeek()  +  1;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  getPeek()  +  1;	  int    peekedLong    =    getPeek();    	non-compiled	[CE]  	104	None	replace
151	[BUG]  [BUGGY]  int  peekedLong  =  getPeek()  -  1;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  getPeek()  -  1;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  getPeek()  -  1;	  int    peekedLong    =    getPeek();    	non-compiled	[CE]  	104	None	replace
152	[BUG]  [BUGGY]  int  peekedLong  =  getPeekOffset();  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  getPeekOffset();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  getPeekOffset();	  int    peekedLong    =    getPeek();    	non-compiled	[CE]  	104	None	replace
153	[BUG]  [BUGGY]  int  peekedLong  =  getInt();  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  getInt();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  getInt();	  int    peekedLong    =    getPeek();    	non-compiled	[CE]  	104	None	replace
154	[BUG]  [BUGGY]  if(p  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(p    >=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	27	None	replace
155	[BUG]  [BUGGY]  if(p  >  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(p    >=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	27	None	replace
156	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  >=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  >=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  >=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(p    >=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	27	None	replace
157	[BUG]  [BUGGY]  if(p  >=  PEEKED_BUFFERED)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  PEEKED_BUFFERED)  {	  if(p    >=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	27	None	replace
158	[BUG]  [BUGGY]  if(peekedLong  <  =  PEEKED_NULL)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  <  =  PEEKED_NULL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  <  =  PEEKED_NULL)  {	  if(peedLong    ==    result)    {    	non-compiled	[CE]  	118	None	replace
159	[BUG]  [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_FLOAT)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_FLOAT)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_FLOAT)  {	  if(p    ==    PEEKED_FLOAT    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	81	None	replace
160	[BUG]  [BUGGY]  if(p  ==  PEEKED_LOAD  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LOAD  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LOAD  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    PEEKED_EOF    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	7	None	replace
161	[BUG]  [BUGGY]  if(p!=  PEEKED_BACKSLASH)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  PEEKED_BACKSLASH)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  PEEKED_BACKSLASH)  {	  if(peekedLong!=    PEEKED_BACKSLASH)    {    	non-compiled	[CE]  	117	None	replace
162	[BUG]  [BUGGY]  if(p  ==  PEEKED_BACKSLASH)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BACKSLASH)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BACKSLASH)  {	  if(peekedLong!=    PEEKED_BACKSLASH)    {    	non-compiled	[CE]  	117	None	replace
163	[BUG]  [BUGGY]  if(p  >=  PEEKED_BACKSLASH)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  PEEKED_BACKSLASH)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  PEEKED_BACKSLASH)  {	  if(peekedLong!=    PEEKED_BACKSLASH)    {    	non-compiled	[CE]  	117	None	replace
164	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	9	None	replace
165	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  PEEKED_BUFFERED)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	9	None	replace
166	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	9	None	replace
167	[BUG]  [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	9	None	replace
168	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_BUCKET)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_BUCKET)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_BUCKET)  {	  if(p    ==    PEEKED_BUCKET)    {    	non-compiled	[CE]  	29	None	replace
169	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BUCKET)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BUCKET)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BUCKET)  {	  if(p    ==    PEEKED_BUCKET)    {    	non-compiled	[CE]  	29	None	replace
170	[BUG]  [BUGGY]  if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	115	None	replace
171	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	115	None	replace
172	[BUG]  [BUGGY]  if(p!=  PEEKED_DOUBLE_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  PEEKED_DOUBLE_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  PEEKED_DOUBLE_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	115	None	replace
173	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	115	None	replace
174	[BUG]  [BUGGY]  if(p  >=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	115	None	replace
175	[BUG]  [BUGGY]  if(p  >=  PEEKED_DOUBLE_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  PEEKED_DOUBLE_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  PEEKED_DOUBLE_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	115	None	replace
176	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	115	None	replace
177	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  peekedLong!=  null)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  peekedLong!=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  peekedLong!=  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	13	None	replace
178	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  null)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	13	None	replace
179	[BUG]  [BUGGY]  if(p  ==  PEEKED_LONG  ||  peekedLong!=  null)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LONG  ||  peekedLong!=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LONG  ||  peekedLong!=  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	13	None	replace
180	[BUG]  [BUGGY]  if(p  ==  PEEKED_FALSE  ||  peekedLong!=  null)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_FALSE  ||  peekedLong!=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_FALSE  ||  peekedLong!=  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	13	None	replace
181	[BUG]  [BUGGY]  if(p  ==  PEEKED_BEFORE  ||  peekedLong!=  null)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BEFORE  ||  peekedLong!=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BEFORE  ||  peekedLong!=  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	13	None	replace
182	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOTH  ||  peekedLong!=  null)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOTH  ||  peekedLong!=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOTH  ||  peekedLong!=  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	13	None	replace
183	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  peekedLong!=  null)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  peekedLong!=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOOLEAN  ||  peekedLong!=  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	13	None	replace
184	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	18	None	replace
185	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOOLEAN_QUOTED_NAME  ||  p  ==  PEEKED_BOOLEAN_QUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOOLEAN_QUOTED_NAME  ||  p  ==  PEEKED_BOOLEAN_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOOLEAN_QUOTED_NAME  ||  p  ==  PEEKED_BOOLEAN_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	18	None	replace
186	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	18	None	replace
187	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_EOF)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_EOF)  {	  if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_EOF)    {    	non-compiled	[CE]  	57	None	replace
188	[BUG]  [BUGGY]  if(p  ==  PEEKED_LOAD  ||  p  ==  PEEKED_EOF)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LOAD  ||  p  ==  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LOAD  ||  p  ==  PEEKED_EOF)  {	  if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_EOF)    {    	non-compiled	[CE]  	57	None	replace
189	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUCKET  ||  p  ==  PEEKED_EOF)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUCKET  ||  p  ==  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUCKET  ||  p  ==  PEEKED_EOF)  {	  if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_EOF)    {    	non-compiled	[CE]  	57	None	replace
190	[BUG]  [BUGGY]  if(p  ==  null  ||  peekedLong.length  <  =  0)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  null  ||  peekedLong.length  <  =  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  null  ||  peekedLong.length  <  =  0)  {	  if(peedLong!=    null    ||    peekedLong.length    <    =    0)    {    	non-compiled	[CE]  	94	None	replace
191	[BUG]  [BUGGY]  if(p!=  null  ||  peekedLong.length  <  =  0)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  null  ||  peekedLong.length  <  =  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  null  ||  peekedLong.length  <  =  0)  {	  if(peedLong!=    null    ||    peekedLong.length    <    =    0)    {    	non-compiled	[CE]  	94	None	replace
192	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  peekedLong.length  <  =  0)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  peekedLong.length  <  =  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  peekedLong.length  <  =  0)  {	  if(peedLong!=    null    ||    peekedLong.length    <    =    0)    {    	non-compiled	[CE]  	94	None	replace
193	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong.length  <  =  0)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong.length  <  =  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong.length  <  =  0)  {	  if(peedLong!=    null    ||    peekedLong.length    <    =    0)    {    	non-compiled	[CE]  	94	None	replace
194	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  peekedLong.length  <  =  0)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  peekedLong.length  <  =  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  peekedLong.length  <  =  0)  {	  if(peedLong!=    null    ||    peekedLong.length    <    =    0)    {    	non-compiled	[CE]  	94	None	replace
195	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED  ||  peekedLong.length  <  =  0)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED  ||  peekedLong.length  <  =  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED  ||  peekedLong.length  <  =  0)  {	  if(peedLong!=    null    ||    peekedLong.length    <    =    0)    {    	non-compiled	[CE]  	94	None	replace
196	[BUG]  [BUGGY]  if(p  >=  null  ||  peekedLong.length  <  =  0)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  null  ||  peekedLong.length  <  =  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  null  ||  peekedLong.length  <  =  0)  {	  if(peedLong!=    null    ||    peekedLong.length    <    =    0)    {    	non-compiled	[CE]  	94	None	replace
197	[BUG]  [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BUCKET)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BUCKET)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BUCKET)  {	  if(p    ==    PEEKED_BUCKET    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	60	None	replace
198	[BUG]  [BUGGY]  if(p  ==  PEEKED_OBJECT  ||  p  ==  PEEKED_BUCKET)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_OBJECT  ||  p  ==  PEEKED_BUCKET)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_OBJECT  ||  p  ==  PEEKED_BUCKET)  {	  if(p    ==    PEEKED_BUCKET    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	60	None	replace
199	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BUCKET)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BUCKET)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BUCKET)  {	  if(p    ==    PEEKED_BUCKET    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	60	None	replace
200	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BLOCK)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BLOCK)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BLOCK)  {	  if(p    ==    PEEKED_BLOCK)    {    	non-compiled	[CE]  	2	None	replace
201	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_BLOCK)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_BLOCK)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_BLOCK)  {	  if(p    ==    PEEKED_BLOCK)    {    	non-compiled	[CE]  	2	None	replace
202	[BUG]  [BUGGY]  if(p  >=  PEEKED_BOTH)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  PEEKED_BOTH)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  PEEKED_BOTH)  {	  if(peekedLong!=    PEEKED_BOTH)    {    	non-compiled	[CE]  	113	None	replace
203	[BUG]  [BUGGY]  if(p!=  PEEKED_BEFORE)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  PEEKED_BEFORE)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  PEEKED_BEFORE)  {	  if(peekedLong!=    PEEKED_BOTH)    {    	non-compiled	[CE]  	113	None	replace
204	[BUG]  [BUGGY]  if(p  >  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    >=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	25	None	replace
205	[BUG]  [BUGGY]  if(p!=  NUMBER_CHAR_QOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  NUMBER_CHAR_QOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  NUMBER_CHAR_QOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QOTED_NAME)    {    	non-compiled	[CE]  	65	None	replace
206	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QOTED_NAME)    {    	non-compiled	[CE]  	65	None	replace
207	[BUG]  [BUGGY]  if(p  >=  NUMBER_CHAR_QOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  NUMBER_CHAR_QOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  NUMBER_CHAR_QOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QOTED_NAME)    {    	non-compiled	[CE]  	65	None	replace
208	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    null)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	47	None	replace
209	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    null)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	47	None	replace
210	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  ==  null)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  ==  null)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  ==  null)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    null)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	47	None	replace
211	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ".intValue());  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ".intValue());  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ".intValue());  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    null)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	47	None	replace
212	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong  ==  null)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong  ==  null)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong  ==  null)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    null)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	47	None	replace
213	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ".doubleValue());  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ".doubleValue());  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ".doubleValue());  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    null)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	47	None	replace
214	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ".getMessage());  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ".getMessage());  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ".getMessage());  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    null)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	47	None	replace
215	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_BIGINT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_BIGINT)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_BIGINT)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BIGINT)    {    	non-compiled	[CE]  	62	None	replace
216	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_BIGINT)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_BIGINT)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_BIGINT)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BIGINT)    {    	non-compiled	[CE]  	62	None	replace
217	[BUG]  [BUGGY]  if(p  ==  PEEKED_BIGINT  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BIGINT  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BIGINT  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BIGINT)    {    	non-compiled	[CE]  	62	None	replace
218	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BIGINT)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BIGINT)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BIGINT)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BIGINT)    {    	non-compiled	[CE]  	62	None	replace
219	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOTH  ||  p  ==  PEEKED_BIGINT)  {  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOTH  ||  p  ==  PEEKED_BIGINT)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOTH  ||  p  ==  PEEKED_BIGINT)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BIGINT)    {    	non-compiled	[CE]  	62	None	replace
220	[BUG]  [BUGGY]  if(p  <  0  ||  peekedLong!=  PEEKED_NULL)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  0  ||  peekedLong!=  PEEKED_NULL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  0  ||  peekedLong!=  PEEKED_NULL)  {	  if(p    >=    0)    {    	non-compiled	[CE]  	41	None	replace
221	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_EOF)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_EOF)  {	  if(p    ==    PEEKED_BOOLEAN    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	98	None	replace
222	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_GLOBAL)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_GLOBAL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_GLOBAL)  {	  if(p    ==    PEEKED_BOOLEAN    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	98	None	replace
223	[BUG]  [BUGGY]  if(p!=  PEEKED_BUCKET)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  PEEKED_BUCKET)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  PEEKED_BUCKET)  {	  if(peekedLong!=    PEEKED_FALSE)    {    	non-compiled	[CE]  	68	None	replace
224	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  >=  PEEKED_FALSE)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  >=  PEEKED_FALSE)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p  >=  PEEKED_FALSE)  {	  if(p!=    PEEKED_FALSE)    {    	non-compiled	[CE]  	36	None	replace
225	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p!=  PEEKED_FALSE)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p!=  PEEKED_FALSE)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p!=  PEEKED_FALSE)  {	  if(p!=    PEEKED_FALSE)    {    	non-compiled	[CE]  	36	None	replace
226	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_FALSE)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_FALSE)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_FALSE)  {	  if(p!=    PEEKED_FALSE)    {    	non-compiled	[CE]  	36	None	replace
227	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	74	None	replace
228	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
229	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
230	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  ==  result)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  ==  result)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  ==  result)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
231	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_NULL)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_NULL)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_NULL)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
232	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ".intValue());  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ".intValue());  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ".intValue());  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
233	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  >=  result)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  >=  result)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  >=  result)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
234	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ".doubleValue());  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ".doubleValue());  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ".doubleValue());  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
235	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_EOF)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_EOF)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_EOF)    {    	non-compiled	[CE]  	23	None	replace
236	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOTH  ||  p  ==  PEEKED_BOTH)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOTH  ||  p  ==  PEEKED_BOTH)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOTH  ||  p  ==  PEEKED_BOTH)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_EOF)    {    	non-compiled	[CE]  	23	None	replace
237	[BUG]  [BUGGY]  pendLong  =  Math.min(peekedLong,  result);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  pendLong  =  Math.min(peekedLong,  result);  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	pendLong  =  Math.min(peekedLong,  result);	  if(p    ==    PEEKED_NULL)    {    if(peekedLong    ==    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
238	[BUG]  [BUGGY]  pendLong  =  Math.min(peekedLong,  p);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  pendLong  =  Math.min(peekedLong,  p);  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	pendLong  =  Math.min(peekedLong,  p);	  if(p    ==    PEEKED_NULL)    {    if(peekedLong    ==    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
239	[BUG]  [BUGGY]  pendInt(p);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  pendInt(p);  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	pendInt(p);	  if(p    ==    PEEKED_NULL)    {    if(peekedLong    ==    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
240	[BUG]  [BUGGY]  pendLong  =  Math.min(p,  peekedLong);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  pendLong  =  Math.min(p,  peekedLong);  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	pendLong  =  Math.min(p,  peekedLong);	  if(p    ==    PEEKED_NULL)    {    if(peekedLong    ==    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
241	[BUG]  [BUGGY]  if(p  <  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    <    =    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	119	None	replace
242	[BUG]  [BUGGY]  if(p!=  PEEKED_GLOBAL)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  PEEKED_GLOBAL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  PEEKED_GLOBAL)  {	  if(peekedLong!=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	111	None	replace
243	[BUG]  [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LONG  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	59	None	replace
244	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_LONG)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_LONG)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	59	None	replace
245	[BUG]  [BUGGY]  if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	59	None	replace
246	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p!=  PEEKED_BUFFERED)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p!=  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p!=  PEEKED_BUFFERED)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	59	None	replace
247	[BUG]  [BUGGY]  int  peekedLong  =  getPeekSize()  +  1;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  getPeekSize()  +  1;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  getPeekSize()  +  1;	  int    peekedLong    =    getPeekSize();    	non-compiled	[CE]  	86	None	replace
248	[BUG]  [BUGGY]  int  peekedLong  =  getPeekSize()  -  1;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  getPeekSize()  -  1;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  getPeekSize()  -  1;	  int    peekedLong    =    getPeekSize();    	non-compiled	[CE]  	86	None	replace
249	[BUG]  [BUGGY]  int  peekedLong  =  getPeekLength();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  getPeekLength();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  getPeekLength();	  int    peekedLong    =    getPeekSize();    	non-compiled	[CE]  	86	None	replace
250	[BUG]  [BUGGY]  int  peekedLong  =  getPeekSize()  +  p;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  getPeekSize()  +  p;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  getPeekSize()  +  p;	  int    peekedLong    =    getPeekSize();    	non-compiled	[CE]  	86	None	replace
251	[BUG]  [BUGGY]  if(p  ==  PEEKED_END_0  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_END_0  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_END_0  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	17	None	replace
252	[BUG]  [BUGGY]  if(p  ==  0  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	17	None	replace
253	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_NULL)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_NULL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_NULL)  {	  if(p    ==    PEEKED_NULL)    {    	non-compiled	[CE]  	11	None	replace
254	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_NULL)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_NULL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_NULL)  {	  if(p    ==    PEEKED_NULL)    {    	non-compiled	[CE]  	11	None	replace
255	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p!=  PEEKED_NULL)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p!=  PEEKED_NULL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p!=  PEEKED_NULL)  {	  if(p!=    PEEKED_NULL)    {    	non-compiled	[CE]  	33	None	replace
256	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  >=  PEEKED_NULL)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  >=  PEEKED_NULL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p  >=  PEEKED_NULL)  {	  if(p!=    PEEKED_NULL)    {    	non-compiled	[CE]  	33	None	replace
257	[BUG]  [BUGGY]  if(p  >=  PEEKED_LONG  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  PEEKED_LONG  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  PEEKED_LONG  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    >=    PEEKED_LONG    ||    p    ==    PEEKED_EOF)    {    	non-compiled	[CE]  	95	None	replace
258	[BUG]  [BUGGY]  if(p  >=  PEEKED_BUFFERED  ||  p  ==  PEEKED_EOF)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  PEEKED_BUFFERED  ||  p  ==  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  PEEKED_BUFFERED  ||  p  ==  PEEKED_EOF)  {	  if(p    >=    PEEKED_LONG    ||    p    ==    PEEKED_EOF)    {    	non-compiled	[CE]  	95	None	replace
259	[BUG]  [BUGGY]  if(p  >  PEEKED_LONG  ||  p  ==  PEEKED_EOF)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >  PEEKED_LONG  ||  p  ==  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >  PEEKED_LONG  ||  p  ==  PEEKED_EOF)  {	  if(p    >=    PEEKED_LONG    ||    p    ==    PEEKED_EOF)    {    	non-compiled	[CE]  	95	None	replace
260	[BUG]  [BUGGY]  if(p!=  PEEKED_LONG  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  PEEKED_LONG  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  PEEKED_LONG  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    >=    PEEKED_LONG    ||    p    ==    PEEKED_EOF)    {    	non-compiled	[CE]  	95	None	replace
261	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p!=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(p    ==    PEEKED_DOUBLE_QUOTED_NAME    ||    p    ==    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	21	None	replace
262	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_BOOLEAN_QUOTED_NAME)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_BOOLEAN_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_BOOLEAN_QUOTED_NAME)  {	  if(p    ==    PEEKED_DOUBLE_QUOTED_NAME    ||    p    ==    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	21	None	replace
263	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  peekedLong  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  peekedLong  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  peekedLong  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(p    ==    PEEKED_DOUBLE_QUOTED_NAME    ||    p    ==    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	21	None	replace
264	[BUG]  [BUGGY]  if(p!=  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(p    ==    PEEKED_DOUBLE_QUOTED_NAME    ||    p    ==    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	21	None	replace
265	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_BUFFERED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_BUFFERED_NAME)  {	  if(p    ==    PEEKED_DOUBLE_QUOTED_NAME    ||    p    ==    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	21	None	replace
266	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedLong!=  PEEKED_BOOLEAN)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  peekedLong!=  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  peekedLong!=  PEEKED_BOOLEAN)  {	  if(p    ==    0    ||    peekedLong!=    PEEKED_NULL)    {    	non-compiled	[CE]  	53	None	replace
267	[BUG]  [BUGGY]  if(p  ==  0  &&  peekedLong!=  PEEKED_NULL)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  &&  peekedLong!=  PEEKED_NULL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  &&  peekedLong!=  PEEKED_NULL)  {	  if(p    ==    0    ||    peekedLong!=    PEEKED_NULL)    {    	non-compiled	[CE]  	53	None	replace
268	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BOOLEAN)  {	  if(p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	69	None	replace
269	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_SIGN)  {	  if(p    ==    NUMBER_CHAR_QUOTED)    {    	non-compiled	[CE]  	8	None	replace
270	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_LONG)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_LONG)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_LONG)  {	  if(p    ==    NUMBER_CHAR_QUOTED)    {    	non-compiled	[CE]  	8	None	replace
271	[BUG]  [BUGGY]  if(p  <  =  PEEKED_LONG  ||  p  >  PEEKED_BUFFERED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_LONG  ||  p  >  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_LONG  ||  p  >  PEEKED_BUFFERED)  {	  if(p    <    =    PEEKED_LONG    ||    p    >    PEEKED_EOF)    {    	non-compiled	[CE]  	99	None	replace
272	[BUG]  [BUGGY]  if(p  <  =  PEEKED_BUFFERED  ||  p  >  PEEKED_EOF)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_BUFFERED  ||  p  >  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_BUFFERED  ||  p  >  PEEKED_EOF)  {	  if(p    <    =    PEEKED_LONG    ||    p    >    PEEKED_EOF)    {    	non-compiled	[CE]  	99	None	replace
273	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  <  =  PEEKED_LONG  ||  p  >  PEEKED_EOF)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  <  =  PEEKED_LONG  ||  p  >  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  <  =  PEEKED_LONG  ||  p  >  PEEKED_EOF)  {	  if(p    <    =    PEEKED_LONG    ||    p    >    PEEKED_EOF)    {    	non-compiled	[CE]  	99	None	replace
274	[BUG]  [BUGGY]  if(p  <  PEEKED_LONG  ||  p  >  PEEKED_BUFFERED)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  PEEKED_LONG  ||  p  >  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  PEEKED_LONG  ||  p  >  PEEKED_BUFFERED)  {	  if(p    <    =    PEEKED_LONG    ||    p    >    PEEKED_EOF)    {    	non-compiled	[CE]  	99	None	replace
275	[BUG]  [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  >  PEEKED_EOF)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  >  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  >  PEEKED_EOF)  {	  if(p    <    =    PEEKED_LONG    ||    p    >    PEEKED_EOF)    {    	non-compiled	[CE]  	99	None	replace
276	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  >  PEEKED_EOF)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  >  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  >  PEEKED_EOF)  {	  if(p    <    =    PEEKED_LONG    ||    p    >    PEEKED_EOF)    {    	non-compiled	[CE]  	99	None	replace
277	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p!=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(p!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	26	None	replace
278	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p!=  PEEKED_BUFFERED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p!=  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p!=  PEEKED_BUFFERED)  {	  if(p!=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	4	None	replace
279	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  >=  PEEKED_BUFFERED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  >=  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p  >=  PEEKED_BUFFERED)  {	  if(p!=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	4	None	replace
280	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(peekedLong    ==    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	63	None	replace
281	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(peekedLong    ==    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	63	None	replace
282	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  peekedLong  ==  null)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  peekedLong  ==  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  peekedLong  ==  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong    ==    null)    {    	non-compiled	[CE]  	15	None	replace
283	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  null)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong    ==    null)    {    	non-compiled	[CE]  	15	None	replace
284	[BUG]  [BUGGY]  if(p  ==  PEEKED_FALSE  ||  peekedLong  ==  null)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_FALSE  ||  peekedLong  ==  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_FALSE  ||  peekedLong  ==  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong    ==    null)    {    	non-compiled	[CE]  	15	None	replace
285	[BUG]  [BUGGY]  if(p  ==  PEEKED_BEFORE  ||  peekedLong  ==  null)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BEFORE  ||  peekedLong  ==  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BEFORE  ||  peekedLong  ==  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong    ==    null)    {    	non-compiled	[CE]  	15	None	replace
286	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOTH  ||  peekedLong  ==  null)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOTH  ||  peekedLong  ==  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOTH  ||  peekedLong  ==  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong    ==    null)    {    	non-compiled	[CE]  	15	None	replace
287	[BUG]  [BUGGY]  if(p  ==  PEEKED_LONG  ||  peekedLong  ==  null)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LONG  ||  peekedLong  ==  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LONG  ||  peekedLong  ==  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong    ==    null)    {    	non-compiled	[CE]  	15	None	replace
288	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  peekedLong  ==  null)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  peekedLong  ==  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOOLEAN  ||  peekedLong  ==  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong    ==    null)    {    	non-compiled	[CE]  	15	None	replace
289	[BUG]  [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p    ==    PEEKED_DOUBLE_QUOTED    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	83	None	replace
290	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  peekedLong  ==  PEEKED_LONG)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  peekedLong  ==  PEEKED_LONG)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED  ||  peekedLong  ==  PEEKED_LONG)  {	  if(p    ==    PEEKED_DOUBLE_QUOTED    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	83	None	replace
291	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  peekedLong  ==  PEEKED_BACKSLASH)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  peekedLong  ==  PEEKED_BACKSLASH)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  peekedLong  ==  PEEKED_BACKSLASH)  {	  if(peekedLong    ==    PEEKED_BACKSLASH)    {    	non-compiled	[CE]  	109	None	replace
292	[BUG]  [BUGGY]  if(p  ==  PEEKED_BACKSLASH  ||  peekedLong  ==  PEEKED_EOF)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BACKSLASH  ||  peekedLong  ==  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BACKSLASH  ||  peekedLong  ==  PEEKED_EOF)  {	  if(peekedLong    ==    PEEKED_BACKSLASH)    {    	non-compiled	[CE]  	109	None	replace
293	[BUG]  [BUGGY]  int  peekedLong  =  nextInt(p  +  1);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  nextInt(p  +  1);  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  nextInt(p  +  1);	  int    peekedLong    =    nextInt(p);    	non-compiled	[CE]  	100	None	replace
294	[BUG]  [BUGGY]  int  peekedLong  =  nextInt(p,  0);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  nextInt(p,  0);  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  nextInt(p,  0);	  int    peekedLong    =    nextInt(p);    	non-compiled	[CE]  	100	None	replace
295	[BUG]  [BUGGY]  int  peekedLong  =  nextInt(p  -  1);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  nextInt(p  -  1);  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  nextInt(p  -  1);	  int    peekedLong    =    nextInt(p);    	non-compiled	[CE]  	100	None	replace
296	[BUG]  [BUGGY]  int  peekedLong  =  nextInt(p,  PEEKED_BUFFERED);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  nextInt(p,  PEEKED_BUFFERED);  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  nextInt(p,  PEEKED_BUFFERED);	  int    peekedLong    =    nextInt(p);    	non-compiled	[CE]  	100	None	replace
297	[BUG]  [BUGGY]  int  peekedLong  =  nextInt();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  nextInt();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  nextInt();	  int    peekedLong    =    nextInt(p);    	non-compiled	[CE]  	100	None	replace
298	[BUG]  [BUGGY]  int  peekedLong  =  nextInt(p,  PEEKED_EOF);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  nextInt(p,  PEEKED_EOF);  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  nextInt(p,  PEEKED_EOF);	  int    peekedLong    =    nextInt(p);    	non-compiled	[CE]  	100	None	replace
299	[BUG]  [BUGGY]  if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_CHAR_FRACTION_DIGIT)  {	  if(p    ==    NUMBER_LONG)    {    	non-compiled	[CE]  	80	None	replace
300	[BUG]  [BUGGY]  if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(p    ==    NUMBER_LONG)    {    	non-compiled	[CE]  	80	None	replace
301	[BUG]  [BUGGY]  if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_CHAR_EXP_E)  {	  if(p    ==    NUMBER_LONG)    {    	non-compiled	[CE]  	80	None	replace
302	[BUG]  [BUGGY]  if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_CHAR_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_CHAR_SIGN)  {	  if(p    ==    NUMBER_LONG)    {    	non-compiled	[CE]  	80	None	replace
303	[BUG]  [BUGGY]  if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_CHAR_FALSE)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_CHAR_FALSE)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_CHAR_FALSE)  {	  if(p    ==    NUMBER_LONG)    {    	non-compiled	[CE]  	80	None	replace
304	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_BEFORE)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_BEFORE)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_BEFORE)  {	  if(p    ==    PEEKED_BEFORE)    {    	non-compiled	[CE]  	30	None	replace
305	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BEFORE)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BEFORE)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BEFORE)  {	  if(p    ==    PEEKED_BEFORE)    {    	non-compiled	[CE]  	30	None	replace
306	[BUG]  [BUGGY]  if(p  ==  null  &&  peekedLong.length  >  0)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  null  &&  peekedLong.length  >  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  null  &&  peekedLong.length  >  0)  {	  if(peedLong!=    null    &&    peekedLong.length    >    0)    {    	non-compiled	[CE]  	92	None	replace
307	[BUG]  [BUGGY]  if(p!=  null  &&  peekedLong.length  >  0)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  null  &&  peekedLong.length  >  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  null  &&  peekedLong.length  >  0)  {	  if(peedLong!=    null    &&    peekedLong.length    >    0)    {    	non-compiled	[CE]  	92	None	replace
308	[BUG]  [BUGGY]  if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(peedLong!=    null    &&    peekedLong.length    >    0)    {    	non-compiled	[CE]  	92	None	replace
309	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong.length  >  0)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong.length  >  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong.length  >  0)  {	  if(peedLong!=    null    &&    peekedLong.length    >    0)    {    	non-compiled	[CE]  	92	None	replace
310	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  peekedLong.length  >  0)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  peekedLong.length  >  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  peekedLong.length  >  0)  {	  if(peedLong!=    null    &&    peekedLong.length    >    0)    {    	non-compiled	[CE]  	92	None	replace
311	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BUFFER)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BUFFER)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BUFFER)  {	  if(p    ==    PEEKED_BUFFER)    {    	non-compiled	[CE]  	70	None	replace
312	[BUG]  [BUGGY]  if(p!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    &&    peekedLong    <    =    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	114	None	replace
313	[BUG]  [BUGGY]  if(p  >=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    &&    peekedLong    <    =    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	114	None	replace
314	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    &&    peekedLong    <    =    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	114	None	replace
315	[BUG]  [BUGGY]  if(p!=  PEEKED_DOUBLE_QUOTED_NAME  &&  peekedLong  <  =  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  PEEKED_DOUBLE_QUOTED_NAME  &&  peekedLong  <  =  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  PEEKED_DOUBLE_QUOTED_NAME  &&  peekedLong  <  =  NUMBER_CHAR_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    &&    peekedLong    <    =    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	114	None	replace
316	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  &&  peekedLong  <  =  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  &&  peekedLong  <  =  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  &&  peekedLong  <  =  NUMBER_CHAR_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    &&    peekedLong    <    =    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	114	None	replace
317	[BUG]  [BUGGY]  if(p  >=  PEEKED_DOUBLE_QUOTED_NAME  &&  peekedLong  <  =  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  PEEKED_DOUBLE_QUOTED_NAME  &&  peekedLong  <  =  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  PEEKED_DOUBLE_QUOTED_NAME  &&  peekedLong  <  =  NUMBER_CHAR_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    &&    peekedLong    <    =    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	114	None	replace
318	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    &&    peekedLong    <    =    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	114	None	replace
319	[BUG]  [BUGGY]  if(piedLong  ==  null)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(piedLong  ==  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(piedLong  ==  null)  {	  if(piedLong!=    null)    {    	non-compiled	[CE]  	76	None	replace
320	[BUG]  [BUGGY]  if(piedLong!=  null  ||  peekedLong.length()  ==  0)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(piedLong!=  null  ||  peekedLong.length()  ==  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(piedLong!=  null  ||  peekedLong.length()  ==  0)  {	  if(piedLong!=    null)    {    	non-compiled	[CE]  	76	None	replace
321	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    PEEKED_EOF    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	7	None	replace
322	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p    ==    PEEKED_EOF    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	7	None	replace
323	[BUG]  [BUGGY]  if(peekedLong  ==  NUMBER_CHAR_QOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  ==  NUMBER_CHAR_QOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  ==  NUMBER_CHAR_QOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QOTED_NAME)    {    	non-compiled	[CE]  	65	None	replace
324	[BUG]  [BUGGY]  if(peekedLong!=  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  NUMBER_CHAR_DECIMAL)  {	  if(peekedLong!=    NUMBER_CHAR_QOTED_NAME)    {    	non-compiled	[CE]  	65	None	replace
325	[BUG]  [BUGGY]  if(peekedLong!=  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  NUMBER_CHAR_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  NUMBER_CHAR_SIGN)  {	  if(peekedLong!=    NUMBER_CHAR_QOTED_NAME)    {    	non-compiled	[CE]  	65	None	replace
326	[BUG]  [BUGGY]  if(peekedLong!=  NUMBER_CHAR_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  NUMBER_CHAR_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  NUMBER_CHAR_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QOTED_NAME)    {    	non-compiled	[CE]  	65	None	replace
327	[BUG]  [BUGGY]  if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {	  if(peekedLong    ==    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	63	None	replace
328	[BUG]  [BUGGY]  if(peekedLong  <  =  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  <  =  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  <  =  NUMBER_CHAR_QUOTED_NAME)  {	  if(peekedLong    ==    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	63	None	replace
329	[BUG]  [BUGGY]  if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(peekedLong    ==    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	63	None	replace
330	[BUG]  [BUGGY]  if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {	  if(peekedLong    ==    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	63	None	replace
331	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_GLOBAL)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_GLOBAL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_GLOBAL)  {	  if(p    ==    PEEKED_GLOBAL    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	61	None	replace
332	[BUG]  [BUGGY]  if(p  ==  PEEKED_GLOBAL  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_GLOBAL  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_GLOBAL  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p    ==    PEEKED_GLOBAL    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	61	None	replace
333	[BUG]  [BUGGY]  if(p  ==  PEEKED_OF)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_OF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_OF)  {	  if(peekedLong    ==    PEEKED_FALSE)    {    	non-compiled	[CE]  	67	None	replace
334	[BUG]  [BUGGY]  if(peekedLong  >=  0)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  >=  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  >=  0)  {	  if(p    >=    0)    {    	non-compiled	[CE]  	41	None	replace
335	[BUG]  [BUGGY]  if(peekedLong!=  0)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  0)  {	  if(p    >=    0)    {    	non-compiled	[CE]  	41	None	replace
336	[BUG]  [BUGGY]  if(p  ==  PEEKED_NONE)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_NONE)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_NONE)  {	  if(p!=    result)    {    	non-compiled	[CE]  	32	None	replace
337	[BUG]  [BUGGY]  if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p    ==    PEEKED_BLOCK)    {    	non-compiled	[CE]  	2	None	replace
338	[BUG]  [BUGGY]  if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_DOUBLE)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_DOUBLE)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_DOUBLE)  {	  if(p    ==    PEEKED_BLOCK)    {    	non-compiled	[CE]  	2	None	replace
339	[BUG]  [BUGGY]  if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	9	None	replace
340	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  &&  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  &&  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  &&  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	9	None	replace
341	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_END_OBJECT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_END_OBJECT)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_END_OBJECT)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	9	None	replace
342	[BUG]  [BUGGY]  if(p  ==  PEEKED_OBJECT  ||  p  ==  PEEKED_BLOCK)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_OBJECT  ||  p  ==  PEEKED_BLOCK)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_OBJECT  ||  p  ==  PEEKED_BLOCK)  {	  if(p    ==    PEEKED_BLOCK    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	84	None	replace
343	[BUG]  [BUGGY]  if(p  ==  PEEKED_LOCK  ||  p  ==  PEEKED_LONG)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LOCK  ||  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LOCK  ||  p  ==  PEEKED_LONG)  {	  if(p    ==    PEEKED_BLOCK    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	84	None	replace
344	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedLong  ==  result)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedLong  ==  result)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFER)  {  if(peekedLong  ==  result)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong    ==    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
345	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFER)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong    ==    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
346	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedInLong  ==  result)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedInLong  ==  result)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFER)  {  if(peekedInLong  ==  result)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong    ==    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
347	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedLong  >=  result)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedLong  >=  result)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFER)  {  if(peekedLong  >=  result)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong    ==    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
348	[BUG]  [BUGGY]  if(result  ==  PEEKED_NULL)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(result  ==  PEEKED_NULL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(result  ==  PEEKED_NULL)  {	  if(peedLong    ==    result)    {    	non-compiled	[CE]  	118	None	replace
349	[BUG]  [BUGGY]  int  peekedLong  =  pathNames[peeked.getInt()];  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  pathNames[peeked.getInt()];  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  pathNames[peeked.getInt()];	  int    peekedLong    =    peeked.getInt();    	non-compiled	[CE]  	101	None	replace
350	[BUG]  [BUGGY]  int  peekedLong  =  path.getInt();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  path.getInt();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  path.getInt();	  int    peekedLong    =    peeked.getInt();    	non-compiled	[CE]  	101	None	replace
351	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedLong  ==  PEEKED_NULL)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  peekedLong  ==  PEEKED_NULL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  peekedLong  ==  PEEKED_NULL)  {	  if(p    ==    0    ||    peekedLong!=    PEEKED_NULL)    {    	non-compiled	[CE]  	53	None	replace
352	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedLong  ==  PEEKED_EOF)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  peekedLong  ==  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  peekedLong  ==  PEEKED_EOF)  {	  if(p    ==    0    ||    peekedLong!=    PEEKED_NULL)    {    	non-compiled	[CE]  	53	None	replace
353	[BUG]  [BUGGY]  int  peekedLong  =  getPeekNumber();  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  getPeekNumber();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  getPeekNumber();	  int    peekedLong    =    getPeekSize();    	non-compiled	[CE]  	86	None	replace
354	[BUG]  [BUGGY]  if(peekedLong  <  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  <  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  <  NUMBER_CHAR_QUOTED_NAME)  {	  if(peekedLong    >=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	64	None	replace
355	[BUG]  [BUGGY]  if(peekedLong  >  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  >  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  >  NUMBER_CHAR_QUOTED_NAME)  {	  if(peekedLong    >=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	64	None	replace
356	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedInLong!=  result)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedInLong!=  result)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFER)  {  if(peekedInLong!=  result)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
357	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ".intValue());  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ".intValue());  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFER)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ".intValue());  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
358	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFER)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
359	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ".intValue();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ".intValue();  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFER)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ".intValue();  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
360	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE  ||  p  ==  PEEKED_BOOLEAN)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	85	None	replace
361	[BUG]  [BUGGY]  if(p  ==  PEEKED_LOAD  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LOAD  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LOAD  ||  p  ==  PEEKED_BOOLEAN)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	85	None	replace
362	[BUG]  [BUGGY]  if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	115	None	replace
363	[BUG]  [BUGGY]  if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	115	None	replace
364	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	115	None	replace
365	[BUG]  [BUGGY]  if(p  ==  PEEKED_LONG  ||  p!=  PEEKED_BUFFERED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LONG  ||  p!=  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LONG  ||  p!=  PEEKED_BUFFERED)  {	  if(p!=    PEEKED_BUFFERED    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	58	None	replace
366	[BUG]  [BUGGY]  if(p  ==  PEEKED_OBJECT  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_OBJECT  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_OBJECT  ||  p  ==  PEEKED_BOOLEAN)  {	  if(p    ==    PEEKED_BOOLEAN    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	98	None	replace
367	[BUG]  [BUGGY]  if(piedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(piedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(piedLong  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(piedLong!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	66	None	replace
368	[BUG]  [BUGGY]  if(piedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(piedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(piedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {	  if(piedLong!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	66	None	replace
369	[BUG]  [BUGGY]  if(piedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(piedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(piedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {	  if(piedLong!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	66	None	replace
370	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_LONG  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_LONG  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_LONG  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	72	None	replace
371	[BUG]  [BUGGY]  if(p!=  0  ||  peekedLong!=  null)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  0  ||  peekedLong!=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  0  ||  peekedLong!=  null)  {	  if(p    >    0    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	43	None	replace
372	[BUG]  [BUGGY]  if(result  ==  null)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(result  ==  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(result  ==  null)  {	  if(peedLong!=    null)    {    	non-compiled	[CE]  	12	None	replace
373	[BUG]  [BUGGY]  if(result  ==  0)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(result  ==  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(result  ==  0)  {	  if(peedLong!=    null)    {    	non-compiled	[CE]  	12	None	replace
374	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_LONG  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_LONG  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_LONG  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	18	None	replace
375	[BUG]  [BUGGY]  if(p  ==  PEEKED_GLOBAL)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_GLOBAL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_GLOBAL)  {	  if(p!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	26	None	replace
376	[BUG]  [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(p    ==    PEEKED_DOUBLE_QUOTED_NAME    ||    p    ==    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	21	None	replace
377	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOTH  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOTH  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOTH  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(p    ==    PEEKED_DOUBLE_QUOTED_NAME    ||    p    ==    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	21	None	replace
378	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOOLEAN_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOOLEAN_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOOLEAN_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(p    ==    PEEKED_DOUBLE_QUOTED_NAME    ||    p    ==    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	21	None	replace
379	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_EOF)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_EOF)  {	  if(p    ==    PEEKED_BUFFER)    {    	non-compiled	[CE]  	70	None	replace
380	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_FLOAT)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_FLOAT)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_FLOAT)  {	  if(p    ==    PEEKED_FLOAT    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	81	None	replace
381	[BUG]  [BUGGY]  if(p  ==  PEEKED_OBJECT  ||  p  ==  PEEKED_FLOAT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_OBJECT  ||  p  ==  PEEKED_FLOAT)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_OBJECT  ||  p  ==  PEEKED_FLOAT)  {	  if(p    ==    PEEKED_FLOAT    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	81	None	replace
382	[BUG]  [BUGGY]  if(peekedLong!=  NUMBER_CHAR_EXP_SIGN  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  NUMBER_CHAR_EXP_SIGN  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  NUMBER_CHAR_EXP_SIGN  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	116	None	replace
383	[BUG]  [BUGGY]  if(peekedLong!=  NUMBER_CHAR_DECIMAL  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  NUMBER_CHAR_DECIMAL  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  NUMBER_CHAR_DECIMAL  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	116	None	replace
384	[BUG]  [BUGGY]  if(peekedLong!=  NUMBER_CHAR_NAME  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  NUMBER_CHAR_NAME  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  NUMBER_CHAR_NAME  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	116	None	replace
385	[BUG]  [BUGGY]  int  peekedLong  =  nextInt(p  +  1,  p);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  nextInt(p  +  1,  p);  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  nextInt(p  +  1,  p);	  int    peekedLong    =    nextInt(p);    	non-compiled	[CE]  	100	None	replace
386	[BUG]  [BUGGY]  int  peekedLong  =  nextInt(p,  -1);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  nextInt(p,  -1);  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  nextInt(p,  -1);	  int    peekedLong    =    nextInt(p);    	non-compiled	[CE]  	100	None	replace
387	[BUG]  [BUGGY]  if(p  ==  Long.MIN_VALUE)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  Long.MIN_VALUE)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  Long.MIN_VALUE)  {	  if(p!=    peekedLong)    {    	non-compiled	[CE]  	35	None	replace
388	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_DECIMAL)  {	  if(p    ==    NUMBER_CHAR_QUOTED)    {    	non-compiled	[CE]  	8	None	replace
389	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(p    ==    NUMBER_CHAR_QUOTED)    {    	non-compiled	[CE]  	8	None	replace
390	[BUG]  [BUGGY]  int  peekedLong  =  pathNames[peeked.getIntValue();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  pathNames[peeked.getIntValue();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  pathNames[peeked.getIntValue();	  int    peekedLong    =    peeked.getIntValue();    	non-compiled	[CE]  	102	None	replace
391	[BUG]  [BUGGY]  float  peekedLong  =  peeked.getIntValue();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  float  peekedLong  =  peeked.getIntValue();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	float  peekedLong  =  peeked.getIntValue();	  int    peekedLong    =    peeked.getIntValue();    	non-compiled	[CE]  	102	None	replace
392	[BUG]  [BUGGY]  intpeekedLong  =  pathIndices.size();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  intpeekedLong  =  pathIndices.size();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	intpeekedLong  =  pathIndices.size();	  intpeekedLong    =    stack.size();    	non-compiled	[CE]  	87	None	replace
393	[BUG]  [BUGGY]  intpeekedLong  =  stack.get(p);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  intpeekedLong  =  stack.get(p);  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	intpeekedLong  =  stack.get(p);	  intpeekedLong    =    stack.size();    	non-compiled	[CE]  	87	None	replace
394	[BUG]  [BUGGY]  int  peekedLong  =  getPeekCount();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  getPeekCount();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  getPeekCount();	  int    peekedLong    =    getPeek();    	non-compiled	[CE]  	104	None	replace
395	[BUG]  [BUGGY]  int  peekedLong  =  getPeekIndex();  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  getPeekIndex();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  getPeekIndex();	  int    peekedLong    =    getPeek();    	non-compiled	[CE]  	104	None	replace
396	[BUG]  [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BIGINT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BIGINT)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BIGINT)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BIGINT)    {    	non-compiled	[CE]  	62	None	replace
397	[BUG]  [BUGGY]  if(p  ==  -1)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  -1)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  -1)  {	  if(p    ==    1)    {    	non-compiled	[CE]  	90	None	replace
398	[BUG]  [BUGGY]  if(p  >  1)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >  1)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >  1)  {	  if(p    ==    1)    {    	non-compiled	[CE]  	90	None	replace
399	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
400	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
401	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFER)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
402	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF)  {  throw  new  NumberFormatException( " ".doubleValue());  }  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF)  {  throw  new  NumberFormatException( " ".doubleValue());  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF)  {  throw  new  NumberFormatException( " ".doubleValue());  }	  if(p    ==    PEEKED_NULL)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
403	[BUG]  [BUGGY]  pendLong  =  Math.min(peekedLong,  pathNames.length);  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  pendLong  =  Math.min(peekedLong,  pathNames.length);  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	pendLong  =  Math.min(peekedLong,  pathNames.length);	  if(p    ==    PEEKED_NULL)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
404	[BUG]  [BUGGY]  if(p  ==  PEEKED_BLOCK  ||  peekedLong!=  null)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BLOCK  ||  peekedLong!=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BLOCK  ||  peekedLong!=  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	13	None	replace
405	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  peekedLong!=  null)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  peekedLong!=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED  ||  peekedLong!=  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	13	None	replace
406	[BUG]  [BUGGY]  if(peekedLong!=  null  ||  peekedLong.length  ==  0)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  null  ||  peekedLong.length  ==  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  null  ||  peekedLong.length  ==  0)  {	  if(peedLong!=    null    ||    peekedLong.length    <    =    0)    {    	non-compiled	[CE]  	94	None	replace
407	[BUG]  [BUGGY]  if(peekedLong!=  null  &&  peekedLong.length  <  =  0)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  null  &&  peekedLong.length  <  =  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  null  &&  peekedLong.length  <  =  0)  {	  if(peedLong!=    null    ||    peekedLong.length    <    =    0)    {    	non-compiled	[CE]  	94	None	replace
408	[BUG]  [BUGGY]  if(peekedLong!=  null  ||  peekedLong.length  <  =  0)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  null  ||  peekedLong.length  <  =  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  null  ||  peekedLong.length  <  =  0)  {	  if(peedLong!=    null    ||    peekedLong.length    <    =    0)    {    	non-compiled	[CE]  	94	None	replace
409	[BUG]  [BUGGY]  if(peekedLong  ==  null  ||  peekedLong.length  <  =  0)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  ==  null  ||  peekedLong.length  <  =  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  ==  null  ||  peekedLong.length  <  =  0)  {	  if(peedLong!=    null    ||    peekedLong.length    <    =    0)    {    	non-compiled	[CE]  	94	None	replace
410	[BUG]  [BUGGY]  if(peekedLong  ==  null  ||  peekedLong.length!=  0)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  ==  null  ||  peekedLong.length!=  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  ==  null  ||  peekedLong.length!=  0)  {	  if(peedLong!=    null    ||    peekedLong.length    <    =    0)    {    	non-compiled	[CE]  	94	None	replace
411	[BUG]  [BUGGY]  if(peekedLong  ==  null  ||  peekedLong.length  ==  0)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  ==  null  ||  peekedLong.length  ==  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  ==  null  ||  peekedLong.length  ==  0)  {	  if(peedLong!=    null    ||    peekedLong.length    <    =    0)    {    	non-compiled	[CE]  	94	None	replace
412	[BUG]  [BUGGY]  if(peekedLong!=  null  ||  peekedLong.length  >=  0)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  null  ||  peekedLong.length  >=  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  null  ||  peekedLong.length  >=  0)  {	  if(peedLong!=    null    ||    peekedLong.length    <    =    0)    {    	non-compiled	[CE]  	94	None	replace
413	[BUG]  [BUGGY]  if(peekedLong!=  null  &&  peekedLong.length  >  0)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  null  &&  peekedLong.length  >  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  null  &&  peekedLong.length  >  0)  {	  if(peedLong!=    null    &&    peekedLong.length    >    0)    {    	non-compiled	[CE]  	92	None	replace
414	[BUG]  [BUGGY]  if(peekedLong  ==  null  &&  peekedLong.length  >  0)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  ==  null  &&  peekedLong.length  >  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  ==  null  &&  peekedLong.length  >  0)  {	  if(peedLong!=    null    &&    peekedLong.length    >    0)    {    	non-compiled	[CE]  	92	None	replace
415	[BUG]  [BUGGY]  if(peekedLong!=  null  ||  peekedLong.length  >  0)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  null  ||  peekedLong.length  >  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  null  ||  peekedLong.length  >  0)  {	  if(peedLong!=    null    &&    peekedLong.length    >    0)    {    	non-compiled	[CE]  	92	None	replace
416	[BUG]  [BUGGY]  if(peekedLong  ==  null  ||  peekedLong.length  >  0)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  ==  null  ||  peekedLong.length  >  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  ==  null  ||  peekedLong.length  >  0)  {	  if(peedLong!=    null    &&    peekedLong.length    >    0)    {    	non-compiled	[CE]  	92	None	replace
417	[BUG]  [BUGGY]  if(p  ==  0)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    null)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	47	None	replace
418	[BUG]  [BUGGY]  if(peekedLong!=  null)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  null)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  null)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    null)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	47	None	replace
419	[BUG]  [BUGGY]  if(peekedLong!=  null)  {  if(p  ==  PEEKED_BUFFERED)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  null)  {  if(p  ==  PEEKED_BUFFERED)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  null)  {  if(p  ==  PEEKED_BUFFERED)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    null)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	47	None	replace
420	[BUG]  [BUGGY]  if(peekedLong!=  null)  {  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  null)  {  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  null)  {  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    null)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	47	None	replace
421	[BUG]  [BUGGY]  if(p  ==  0)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ".intValue());  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ".intValue());  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ".intValue());  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    null)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	47	None	replace
422	[BUG]  [BUGGY]  if(result!=  null)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(result!=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(result!=  null)  {	  if(peedLong!=    result)    {    	non-compiled	[CE]  	93	None	replace
423	[BUG]  [BUGGY]  if(p  <  =  0  ||  peekedLong  >=  null)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  0  ||  peekedLong  >=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  0  ||  peekedLong  >=  null)  {	  if(p    <    =    0)    {    	non-compiled	[CE]  	39	None	replace
424	[BUG]  [BUGGY]  if(p  >=  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p    >=    PEEKED_LONG    ||    p    ==    PEEKED_EOF)    {    	non-compiled	[CE]  	95	None	replace
425	[BUG]  [BUGGY]  if(p  ==  0  &&  peekedLong!=  null)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  &&  peekedLong!=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  &&  peekedLong!=  null)  {	  if(p    ==    0    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	54	None	replace
426	[BUG]  [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  >  PEEKED_EOF)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  >  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LONG  ||  p  >  PEEKED_EOF)  {	  if(p    <    =    PEEKED_LONG    ||    p    >    PEEKED_EOF)    {    	non-compiled	[CE]  	99	None	replace
427	[BUG]  [BUGGY]  if(p  >=  PEEKED_LONG  ||  p  >  PEEKED_EOF)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  PEEKED_LONG  ||  p  >  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  PEEKED_LONG  ||  p  >  PEEKED_EOF)  {	  if(p    <    =    PEEKED_LONG    ||    p    >    PEEKED_EOF)    {    	non-compiled	[CE]  	99	None	replace
428	[BUG]  [BUGGY]  if(p  <  =  PEEKED_LONG  ||  p  >  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_LONG  ||  p  >  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_LONG  ||  p  >  PEEKED_DOUBLE_QUOTED)  {	  if(p    <    =    PEEKED_LONG    ||    p    >    PEEKED_EOF)    {    	non-compiled	[CE]  	99	None	replace
429	[BUG]  [BUGGY]  if(p  <  =  PEEKED_LONG  ||  p  >  PEEKED_BOOLEAN)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_LONG  ||  p  >  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_LONG  ||  p  >  PEEKED_BOOLEAN)  {	  if(p    <    =    PEEKED_LONG    ||    p    >    PEEKED_EOF)    {    	non-compiled	[CE]  	99	None	replace
430	[BUG]  [BUGGY]  if(p  <  =  PEEKED_LONG  ||  p  >  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_LONG  ||  p  >  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_LONG  ||  p  >  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(p    <    =    PEEKED_LONG    ||    p    >    PEEKED_EOF)    {    	non-compiled	[CE]  	99	None	replace
431	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_BUFFER)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_BUFFER)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_BUFFER)  {	  if(p    ==    PEEKED_DOUBLE_QUOTED    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	83	None	replace
432	[BUG]  [BUGGY]  if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_CHAR_DECIMAL)  {	  if(p    ==    NUMBER_LONG)    {    	non-compiled	[CE]  	80	None	replace
433	[BUG]  [BUGGY]  if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_EXP_SIGN)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_LONG  ||  p  ==  NUMBER_EXP_SIGN)  {	  if(p    ==    NUMBER_LONG)    {    	non-compiled	[CE]  	80	None	replace
434	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	69	None	replace
435	[BUG]  [BUGGY]  if(peekedLong  <  =  0)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  <  =  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  <  =  0)  {	  if(peekedLong    ==    0)    {    	non-compiled	[CE]  	89	None	replace
436	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedLong!=  NUMBER_CHAR_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  peekedLong!=  NUMBER_CHAR_QUOTED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  peekedLong!=  NUMBER_CHAR_QUOTED)  {	  if(p    ==    0    ||    peekedLong!=    result)    {    	non-compiled	[CE]  	110	None	replace
437	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedLong!=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  peekedLong!=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  peekedLong!=  PEEKED_DOUBLE_QUOTED)  {	  if(p    ==    0    ||    peekedLong!=    result)    {    	non-compiled	[CE]  	110	None	replace
438	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_FFERED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_FFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_FFERED)  {	  if(p    ==    PEEKED_FFERED    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	82	None	replace
439	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_PREFIX)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_PREFIX)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF  ||  p  ==  PEEKED_PREFIX)  {	  if(p    ==    PEEKED_FFERED    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	82	None	replace
440	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFER)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
441	[BUG]  [BUGGY]  if(p  ==  0)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
442	[BUG]  [BUGGY]  if(p  ==  0)  {  if(peekedLong!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0)  {  if(peekedLong!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0)  {  if(peekedLong!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
443	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedInLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedInLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFER)  {  if(peekedInLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
444	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFER)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ".);  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
445	[BUG]  [BUGGY]  if(p  ==  PEEKED_LOAD)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LOAD)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LOAD)  {	  if(p!=    PEEKED_BUFFER)    {    	non-compiled	[CE]  	71	None	replace
446	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedLong!=  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  peekedLong!=  NUMBER_CHAR_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  peekedLong!=  NUMBER_CHAR_SIGN)  {	  if(p    ==    0    ||    peekedLong!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	52	None	replace
447	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	46	None	replace
448	[BUG]  [BUGGY]  if(p  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	46	None	replace
449	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	46	None	replace
450	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFER)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFER)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	46	None	replace
451	[BUG]  [BUGGY]  if(p  ==  PEEKED_EOF)  {  throw  new  IllegalArgumentException( " ".doubleValue());  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_EOF)  {  throw  new  IllegalArgumentException( " ".doubleValue());  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_EOF)  {  throw  new  IllegalArgumentException( " ".doubleValue());  }	  if(p    ==    PEEKED_NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	46	None	replace
452	[BUG]  [BUGGY]  if(p  ==  PEEKED_LOCK)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LOCK)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LOCK)  {	  if(p!=    PEEKED_BLOCK)    {    	non-compiled	[CE]  	1	None	replace
453	[BUG]  [BUGGY]  if(p  <  =  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p    <    =    PEEKED_LONG    ||    p    ==    PEEKED_EOF)    {    	non-compiled	[CE]  	96	None	replace
454	[BUG]  [BUGGY]  if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  NUMBER_CHAR_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    &&    peekedLong    <    =    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	114	None	replace
455	[BUG]  [BUGGY]  if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    &&    peekedLong    <    =    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	114	None	replace
456	[BUG]  [BUGGY]  if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    &&    peekedLong    <    =    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	114	None	replace
457	[BUG]  [BUGGY]  if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    &&    peekedLong    <    =    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	114	None	replace
458	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOOLEAN_QUOTED_NAME  ||  p  ==  PEEKED_END_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOOLEAN_QUOTED_NAME  ||  p  ==  PEEKED_END_OBJECT)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOOLEAN_QUOTED_NAME  ||  p  ==  PEEKED_END_OBJECT)  {	  if(p    ==    PEEKED_BOOLEAN_QUOTED_NAME)    {    	non-compiled	[CE]  	19	None	replace
459	[BUG]  [BUGGY]  int  peekedLong  =  pathNames[peeked.length()  -  1];  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  pathNames[peeked.length()  -  1];  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  pathNames[peeked.length()  -  1];	  int    peekedLong    =    peeked.length();    	non-compiled	[CE]  	50	None	replace
460	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_DECIMAL  ||  p  ==  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_DECIMAL  ||  p  ==  NUMBER_CHAR_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_DECIMAL  ||  p  ==  NUMBER_CHAR_SIGN)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	74	None	replace
461	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_LONG  ||  p  ==  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_LONG  ||  p  ==  NUMBER_CHAR_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_LONG  ||  p  ==  NUMBER_CHAR_SIGN)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	74	None	replace
462	[BUG]  [BUGGY]  if(peeredLong  ==  null)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peeredLong  ==  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peeredLong  ==  null)  {	  if(peeredLong!=    null)    {    	non-compiled	[CE]  	78	None	replace
463	[BUG]  [BUGGY]  if(p  ==  PEEKED_BLOCK  ||  peekedLong  ==  null)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BLOCK  ||  peekedLong  ==  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BLOCK  ||  peekedLong  ==  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong    ==    null)    {    	non-compiled	[CE]  	15	None	replace
464	[BUG]  [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_END_OBJECT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_END_OBJECT)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_END_OBJECT)  {	  if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_EOF)    {    	non-compiled	[CE]  	57	None	replace
465	[BUG]  [BUGGY]  if(p  ==  PEEKED_FLOAT  ||  p  ==  PEEKED_EOF)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_FLOAT  ||  p  ==  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_FLOAT  ||  p  ==  PEEKED_EOF)  {	  if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_EOF)    {    	non-compiled	[CE]  	57	None	replace
466	[BUG]  [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE)  {	  if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_EOF)    {    	non-compiled	[CE]  	57	None	replace
467	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_DIGIT  ||  p  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_DIGIT  ||  p  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_DIGIT  ||  p  ==  NUMBER_CHAR_DECIMAL)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	73	None	replace
468	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_LONG  ||  p  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_LONG  ||  p  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_LONG  ||  p  ==  NUMBER_CHAR_DECIMAL)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	73	None	replace
469	[BUG]  [BUGGY]  if(p!=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  PEEKED_DOUBLE_QUOTED)  {	  if(peekedLong!=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	111	None	replace
470	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BOOLEAN_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BOOLEAN_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_BOOLEAN_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	17	None	replace
471	[BUG]  [BUGGY]  if(p  ==  PEEKED_END  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_END  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_END  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	17	None	replace
472	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOTH  ||  p  ==  PEEKED_BUCKET)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOTH  ||  p  ==  PEEKED_BUCKET)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOTH  ||  p  ==  PEEKED_BUCKET)  {	  if(p    ==    PEEKED_BUCKET    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	60	None	replace
473	[BUG]  [BUGGY]  intpeekedLong  =  stack.size()  <  =  0;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  intpeekedLong  =  stack.size()  <  =  0;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	intpeekedLong  =  stack.size()  <  =  0;	  intpeekedLong    =    stack.size()    >    0;    	non-compiled	[CE]  	88	None	replace
474	[BUG]  [BUGGY]  intpeekedLong  =  stack.size()  >  2;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  intpeekedLong  =  stack.size()  >  2;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	intpeekedLong  =  stack.size()  >  2;	  intpeekedLong    =    stack.size()    >    0;    	non-compiled	[CE]  	88	None	replace
475	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_LONG  ||  p  ==  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_LONG  ||  p  ==  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_LONG  ||  p  ==  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	20	None	replace
476	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_LONG)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_LONG)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_LONG)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	20	None	replace
477	[BUG]  [BUGGY]  if(p  >  result)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >  result)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >  result)  {	  if(p    >=    result)    {    	non-compiled	[CE]  	91	None	replace
478	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedLong  ==  PEEKED_FALSE)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  peekedLong  ==  PEEKED_FALSE)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  peekedLong  ==  PEEKED_FALSE)  {	  if(p    ==    0    ||    peekedLong!=    PEEKED_EOF)    {    	non-compiled	[CE]  	55	None	replace
479	[BUG]  [BUGGY]  if(p  ==  0  &&  peekedLong!=  PEEKED_BUFFERED)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  &&  peekedLong!=  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  &&  peekedLong!=  PEEKED_BUFFERED)  {	  if(p    ==    0    ||    peekedLong!=    PEEKED_EOF)    {    	non-compiled	[CE]  	55	None	replace
480	[BUG]  [BUGGY]  if(p  ==  0  &&  peekedLong!=  PEEKED_FALSE)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  &&  peekedLong!=  PEEKED_FALSE)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  &&  peekedLong!=  PEEKED_FALSE)  {	  if(p    ==    0    ||    peekedLong!=    PEEKED_EOF)    {    	non-compiled	[CE]  	55	None	replace
481	[BUG]  [BUGGY]  int  peekedLong  =  pathNames.length;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  pathNames.length;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  pathNames.length;	  int    peekedLong    =    peeked.length();    	non-compiled	[CE]  	50	None	replace
482	[BUG]  [BUGGY]  int  peekedLong  =  pathIndices.length;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  pathIndices.length;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  pathIndices.length;	  int    peekedLong    =    peeked.length();    	non-compiled	[CE]  	50	None	replace
483	[BUG]  [BUGGY]  int  peekedLong  =  pathIndices[peeked.length()  -  1];  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  pathIndices[peeked.length()  -  1];  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  pathIndices[peeked.length()  -  1];	  int    peekedLong    =    peeked.length();    	non-compiled	[CE]  	50	None	replace
484	[BUG]  [BUGGY]  if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	115	None	replace
485	[BUG]  [BUGGY]  if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	115	None	replace
486	[BUG]  [BUGGY]  if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	115	None	replace
487	[BUG]  [BUGGY]  if(peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  PEEKED_DOUBLE_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	115	None	replace
488	[BUG]  [BUGGY]  if(piedLong!=  null  &&  peekedLong.length  <  =  0)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(piedLong!=  null  &&  peekedLong.length  <  =  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(piedLong!=  null  &&  peekedLong.length  <  =  0)  {	  if(peedLong!=    null    ||    peekedLong.length    <    =    0)    {    	non-compiled	[CE]  	94	None	replace
489	[BUG]  [BUGGY]  if(peekedLong!=  null  ||  peekedLong.length  <  =  1)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  null  ||  peekedLong.length  <  =  1)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  null  ||  peekedLong.length  <  =  1)  {	  if(peedLong!=    null    ||    peekedLong.length    <    =    0)    {    	non-compiled	[CE]  	94	None	replace
490	[BUG]  [BUGGY]  if(p  <  0  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  0  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  0  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    ==    0    ||    peekedLong!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	52	None	replace
491	[BUG]  [BUGGY]  if(p  >  0  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >  0  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >  0  ||  peekedLong!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    ==    0    ||    peekedLong!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	52	None	replace
492	[BUG]  [BUGGY]  if(p  <  =  PEEKED_BUFFERED  ||  peekedLong!=  null)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_BUFFERED  ||  peekedLong!=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_BUFFERED  ||  peekedLong!=  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	13	None	replace
493	[BUG]  [BUGGY]  if(p  <  =  PEEKED_LONG  ||  peekedLong!=  null)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_LONG  ||  peekedLong!=  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_LONG  ||  peekedLong!=  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	13	None	replace
494	[BUG]  [BUGGY]  if(p  <  =  PEEKED_BUFFERED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_BUFFERED)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	13	None	replace
495	[BUG]  [BUGGY]  if(peekedLong!=  PEEKED_BEFORE)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  PEEKED_BEFORE)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  PEEKED_BEFORE)  {	  if(p    ==    PEEKED_BEFORE)    {    	non-compiled	[CE]  	30	None	replace
496	[BUG]  [BUGGY]  if(p  <  =  0)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  0)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  0)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
497	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
498	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOTH)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOTH)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOTH)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
499	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( "Expected  an  int  but  was   "  +  p);  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( "Expected  an  int  but  was   "  +  p);  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  NumberFormatException( "Expected  an  int  but  was   "  +  p);  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
500	[BUG]  [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	18	None	replace
501	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_CHAR_QUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_CHAR_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_CHAR_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	18	None	replace
502	[BUG]  [BUGGY]  if(piekedLong!=  result)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(piekedLong!=  result)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(piekedLong!=  result)  {	  if(peedLong!=    result)    {    	non-compiled	[CE]  	93	None	replace
503	[BUG]  [BUGGY]  if(p  ==  PEEKED_LOAD  ||  p  ==  PEEKED_BIGINT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LOAD  ||  p  ==  PEEKED_BIGINT)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LOAD  ||  p  ==  PEEKED_BIGINT)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BIGINT)    {    	non-compiled	[CE]  	62	None	replace
504	[BUG]  [BUGGY]  if(p  <  =  0  ||  peekedLong!=  PEEKED_BUFFERED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  0  ||  peekedLong!=  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  0  ||  peekedLong!=  PEEKED_BUFFERED)  {	  if(p    ==    0    ||    peekedLong!=    PEEKED_NULL)    {    	non-compiled	[CE]  	53	None	replace
505	[BUG]  [BUGGY]  if(p  >  0  ||  peekedLong!=  PEEKED_NULL)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >  0  ||  peekedLong!=  PEEKED_NULL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >  0  ||  peekedLong!=  PEEKED_NULL)  {	  if(p    ==    0    ||    peekedLong!=    PEEKED_NULL)    {    	non-compiled	[CE]  	53	None	replace
506	[BUG]  [BUGGY]  if(p  <  =  0)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  0)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  0)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    null)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	47	None	replace
507	[BUG]  [BUGGY]  if(peedLong!=  null)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peedLong!=  null)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peedLong!=  null)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    null)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	47	None	replace
508	[BUG]  [BUGGY]  if(peedLong  ==  null)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peedLong  ==  null)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peedLong  ==  null)  {  if(peekedLong!=  null)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    null)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	47	None	replace
509	[BUG]  [BUGGY]  if(peedLong!=  null)  {  throw  new  NumberFormatException( "Expected  an  int  but  was   "  +  peekedLong  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber());  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peedLong!=  null)  {  throw  new  NumberFormatException( "Expected  an  int  but  was   "  +  peekedLong  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber());  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peedLong!=  null)  {  throw  new  NumberFormatException( "Expected  an  int  but  was   "  +  peekedLong  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber());  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    null)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	47	None	replace
510	[BUG]  [BUGGY]  if(p  ==  PEEKED_LOAD  ||  p  ==  PEEKED_LONG)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LOAD  ||  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LOAD  ||  p  ==  PEEKED_LONG)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	56	None	replace
511	[BUG]  [BUGGY]  if(p  ==  PEEKED_LOCKED  ||  p  ==  PEEKED_LONG)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LOCKED  ||  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LOCKED  ||  p  ==  PEEKED_LONG)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	56	None	replace
512	[BUG]  [BUGGY]  if(p  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	46	None	replace
513	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOTH)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOTH)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOTH)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	46	None	replace
514	[BUG]  [BUGGY]  parent  ==  null?  parent.nextInt(p):  p;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  parent  ==  null?  parent.nextInt(p):  p;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	parent  ==  null?  parent.nextInt(p):  p;	  if(p    ==    PEEKED_NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	46	None	replace
515	[BUG]  [BUGGY]  if(peekedLong!=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  PEEKED_DOUBLE_QUOTED)  {	  if(peekedLong!=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	111	None	replace
516	[BUG]  [BUGGY]  if(p  <  =  PEEKED_BUFFERED  ||  peekedLong  ==  null)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_BUFFERED  ||  peekedLong  ==  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_BUFFERED  ||  peekedLong  ==  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong    ==    null)    {    	non-compiled	[CE]  	15	None	replace
517	[BUG]  [BUGGY]  if(peekedLong  ==  null  ||  p  ==  PEEKED_EOF)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  ==  null  ||  p  ==  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  ==  null  ||  p  ==  PEEKED_EOF)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong    ==    null)    {    	non-compiled	[CE]  	15	None	replace
518	[BUG]  [BUGGY]  if(peekedLong  ==  null  ||  peekedLong  ==  null)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  ==  null  ||  peekedLong  ==  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  ==  null  ||  peekedLong  ==  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong    ==    null)    {    	non-compiled	[CE]  	15	None	replace
519	[BUG]  [BUGGY]  if(p  <  =  PEEKED_LONG  ||  peekedLong  ==  null)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_LONG  ||  peekedLong  ==  null)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_LONG  ||  peekedLong  ==  null)  {	  if(p    ==    PEEKED_EOF    ||    peekedLong    ==    null)    {    	non-compiled	[CE]  	15	None	replace
520	[BUG]  [BUGGY]  if(peekedLong  <  =  PEEKED_BACKSLASH)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  <  =  PEEKED_BACKSLASH)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  <  =  PEEKED_BACKSLASH)  {	  if(peekedLong    ==    PEEKED_BACKSLASH)    {    	non-compiled	[CE]  	109	None	replace
521	[BUG]  [BUGGY]  if(p  >=  PEEKED_LONG)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  PEEKED_LONG)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  PEEKED_LONG)  {	  if(p!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	26	None	replace
522	[BUG]  [BUGGY]  if(p  <  =  0  ||  p  ==  PEEKED_EOF)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  0  ||  p  ==  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  0  ||  p  ==  PEEKED_EOF)  {	  if(p    <    =    PEEKED_LONG    ||    p    ==    PEEKED_EOF)    {    	non-compiled	[CE]  	96	None	replace
523	[BUG]  [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_EOF)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_EOF)  {	  if(p    <    =    PEEKED_LONG    ||    p    ==    PEEKED_EOF)    {    	non-compiled	[CE]  	96	None	replace
524	[BUG]  [BUGGY]  if(p  <  =  0  ||  peekedLong!=  result)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  0  ||  peekedLong!=  result)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  0  ||  peekedLong!=  result)  {	  if(p    ==    0    ||    peekedLong!=    result)    {    	non-compiled	[CE]  	110	None	replace
525	[BUG]  [BUGGY]  if(p  >=  0  ||  peekedLong!=  result)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  0  ||  peekedLong!=  result)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  0  ||  peekedLong!=  result)  {	  if(p    ==    0    ||    peekedLong!=    result)    {    	non-compiled	[CE]  	110	None	replace
526	[BUG]  [BUGGY]  if(p  ==  0  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    0    ||    peekedLong!=    result)    {    	non-compiled	[CE]  	110	None	replace
527	[BUG]  [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BOTH)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BOTH)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BOTH)  {	  if(p    ==    PEEKED_EOF    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	7	None	replace
528	[BUG]  [BUGGY]  if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    &&    peekedLong    <    =    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	114	None	replace
529	[BUG]  [BUGGY]  if(peekedLong!=  PEEKED_BUFFERED  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  PEEKED_BUFFERED  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  PEEKED_BUFFERED  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    &&    peekedLong    <    =    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	114	None	replace
530	[BUG]  [BUGGY]  if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_BOOLEAN_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_BOOLEAN_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_BOOLEAN_QUOTED_NAME)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    &&    peekedLong    <    =    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	114	None	replace
531	[BUG]  [BUGGY]  if(p  ==  PEEKED_LOCK  ||  p  ==  PEEKED_BLOCK)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LOCK  ||  p  ==  PEEKED_BLOCK)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LOCK  ||  p  ==  PEEKED_BLOCK)  {	  if(p    ==    PEEKED_BLOCK    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	84	None	replace
532	[BUG]  [BUGGY]  if(p  >=  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(p    >>    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	28	None	replace
533	[BUG]  [BUGGY]  if(peedLong!=  0)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peedLong!=  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peedLong!=  0)  {	  if(peekedLong    ==    0)    {    	non-compiled	[CE]  	89	None	replace
534	[BUG]  [BUGGY]  if(peekedLong  >  0)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  >  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  >  0)  {	  if(peekedLong    ==    0)    {    	non-compiled	[CE]  	89	None	replace
535	[BUG]  [BUGGY]  if(peekedLong!=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  NUMBER_CHAR_EXP_SIGN)  {	  if(peekedLong!=    NUMBER_CHAR_QOTED_NAME)    {    	non-compiled	[CE]  	65	None	replace
536	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
537	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
538	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_NULL)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_NULL)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_NULL)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
539	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOTH)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOTH)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOTH)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
540	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOOLEAN)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BOOLEAN)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BOOLEAN)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
541	[BUG]  [BUGGY]  if(p  ==  0  ||  p  ==  0)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  p  ==  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  p  ==  0)  {	  if(p    ==    1)    {    	non-compiled	[CE]  	90	None	replace
542	[BUG]  [BUGGY]  if(peekedLong!=  PEEKED_NULL)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  PEEKED_NULL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  PEEKED_NULL)  {	  if(p    ==    PEEKED_NULL)    {    	non-compiled	[CE]  	11	None	replace
543	[BUG]  [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	72	None	replace
544	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_SIGN)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	72	None	replace
545	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_BEGIN_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_BEGIN_OBJECT)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_BEGIN_OBJECT)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	72	None	replace
546	[BUG]  [BUGGY]  if(p  >=  NUMBER_CHAR_QUOTED_NAME  ||  p  >  MIN_INCOMPLETE_INTEGER)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  NUMBER_CHAR_QUOTED_NAME  ||  p  >  MIN_INCOMPLETE_INTEGER)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  NUMBER_CHAR_QUOTED_NAME  ||  p  >  MIN_INCOMPLETE_INTEGER)  {	  if(p    >=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	25	None	replace
547	[BUG]  [BUGGY]  int  peekedLong  =  doPeek();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  doPeek();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  doPeek();	  int    peekedLong    =    getPeek();    	non-compiled	[CE]  	104	None	replace
548	[BUG]  [BUGGY]  int  peekedLong  =  getPeek()  +  p;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  getPeek()  +  p;  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  getPeek()  +  p;	  int    peekedLong    =    getPeek();    	non-compiled	[CE]  	104	None	replace
549	[BUG]  [BUGGY]  int  peekedLong  =  pathIndices.getIntValue();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  pathIndices.getIntValue();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  pathIndices.getIntValue();	  int    peekedLong    =    peeked.getIntValue();    	non-compiled	[CE]  	102	None	replace
550	[BUG]  [BUGGY]  int  peekedLong  =  pathIndices[peeked.getIntValue();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  pathIndices[peeked.getIntValue();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  pathIndices[peeked.getIntValue();	  int    peekedLong    =    peeked.getIntValue();    	non-compiled	[CE]  	102	None	replace
551	[BUG]  [BUGGY]  if(peekedLong  <  =  PEEKED_BLOCK)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  <  =  PEEKED_BLOCK)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  <  =  PEEKED_BLOCK)  {	  if(peekedLong    ==    PEEKED_BLOCK)    {    	non-compiled	[CE]  	106	None	replace
552	[BUG]  [BUGGY]  if(p  >  PEEKED_BUFFERED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >  PEEKED_BUFFERED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >  PEEKED_BUFFERED)  {	  if(p!=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	4	None	replace
553	[BUG]  [BUGGY]  if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	116	None	replace
554	[BUG]  [BUGGY]  if(piedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(piedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(piedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	116	None	replace
555	[BUG]  [BUGGY]  if(pieedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(pieedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(pieedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(peekedLong!=    NUMBER_CHAR_QUOTED_NAME    ||    peekedLong    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	116	None	replace
556	[BUG]  [BUGGY]  if(p  ==  PEEKED_BLACK)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BLACK)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BLACK)  {	  if(p!=    PEEKED_BLOCK)    {    	non-compiled	[CE]  	1	None	replace
557	[BUG]  [BUGGY]  if(p  >  0  ||  peekedLong!=  PEEKED_EOF)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >  0  ||  peekedLong!=  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >  0  ||  peekedLong!=  PEEKED_EOF)  {	  if(p    ==    0    ||    peekedLong!=    PEEKED_EOF)    {    	non-compiled	[CE]  	55	None	replace
558	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedLong  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  0  ||  peekedLong  ==  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  0  ||  peekedLong  ==  PEEKED_BOOLEAN)  {	  if(p    ==    0    ||    peekedLong!=    PEEKED_EOF)    {    	non-compiled	[CE]  	55	None	replace
559	[BUG]  [BUGGY]  if(peekedLong  ==  PEEKED_EXP_E)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  ==  PEEKED_EXP_E)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  ==  PEEKED_EXP_E)  {	  if(peekedLong    ==    PEEKED_FALSE)    {    	non-compiled	[CE]  	67	None	replace
560	[BUG]  [BUGGY]  if(p  <  =  PEEKED_LONG  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_LONG  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_LONG  ||  p  ==  PEEKED_BOOLEAN)  {	  if(p    ==    PEEKED_BOOLEAN    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	98	None	replace
561	[BUG]  [BUGGY]  int  peekedLong  =  nextInt(p,  p);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  nextInt(p,  p);  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  nextInt(p,  p);	  int    peekedLong    =    nextInt(p);    	non-compiled	[CE]  	100	None	replace
562	[BUG]  [BUGGY]  int  peekedLong  =  nextInt(p  +  11);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  nextInt(p  +  11);  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  nextInt(p  +  11);	  int    peekedLong    =    nextInt(p);    	non-compiled	[CE]  	100	None	replace
563	[BUG]  [BUGGY]  int  peekedLong  =  nextInt(p  +  1,  1);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  int  peekedLong  =  nextInt(p  +  1,  1);  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	int  peekedLong  =  nextInt(p  +  1,  1);	  int    peekedLong    =    nextInt(p);    	non-compiled	[CE]  	100	None	replace
564	[BUG]  [BUGGY]  if(p  <  =  0)  {  if(peekedLong  ==  result)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  0)  {  if(peekedLong  ==  result)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  0)  {  if(peekedLong  ==  result)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong    ==    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
565	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong  ==  result)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong  ==  result)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong  ==  result)  {  throw  new  NumberFormatException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong    ==    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
566	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  ==  result)  {  throw  new  NumberFormatException( " ".doubleValue());  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  ==  result)  {  throw  new  NumberFormatException( " ".doubleValue());  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  ==  result)  {  throw  new  NumberFormatException( " ".doubleValue());  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong    ==    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
567	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  ==  result)  {  throw  new  NumberFormatException( " ",  p);  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  ==  result)  {  throw  new  NumberFormatException( " ",  p);  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong  ==  result)  {  throw  new  NumberFormatException( " ",  p);  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong    ==    result)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
568	[BUG]  [BUGGY]  if(p  <  =  PEEKED_LONG  ||  p  ==  PEEKED_FLOAT)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_LONG  ||  p  ==  PEEKED_FLOAT)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_LONG  ||  p  ==  PEEKED_FLOAT)  {	  if(p    ==    PEEKED_FLOAT    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	81	None	replace
569	[BUG]  [BUGGY]  if(p  <  =  PEEKED_BOOLEAN_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_BOOLEAN_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_BOOLEAN_QUOTED_NAME)  {	  if(p    >=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	27	None	replace
570	[BUG]  [BUGGY]  if(p  >  PEEKED_BOTH)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >  PEEKED_BOTH)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >  PEEKED_BOTH)  {	  if(p!=    PEEKED_BOTH)    {    	non-compiled	[CE]  	6	None	replace
571	[BUG]  [BUGGY]  if(peekedLong!=  null  &&  peekedLong.length  ==  0)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  null  &&  peekedLong.length  ==  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  null  &&  peekedLong.length  ==  0)  {	  if(peedLong!=    null    &&    peekedLong.length    >    0)    {    	non-compiled	[CE]  	92	None	replace
572	[BUG]  [BUGGY]  if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(p!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	24	None	replace
573	[BUG]  [BUGGY]  if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {	  if(p!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	24	None	replace
574	[BUG]  [BUGGY]  if(p  <  =  PEEKED_LONG  ||  p  >  PEEKED_BOTH)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  PEEKED_LONG  ||  p  >  PEEKED_BOTH)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  PEEKED_LONG  ||  p  >  PEEKED_BOTH)  {	  if(p    <    =    PEEKED_LONG    ||    p    >    PEEKED_EOF)    {    	non-compiled	[CE]  	99	None	replace
575	[BUG]  [BUGGY]  if(result  ==  PEEKED_LONG)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(result  ==  PEEKED_LONG)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(result  ==  PEEKED_LONG)  {	  if(peedLong    ==    result)    {    	non-compiled	[CE]  	118	None	replace
576	[BUG]  [BUGGY]  if(p  >=  PEEKED_LONG  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >=  PEEKED_LONG  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >=  PEEKED_LONG  ||  p  ==  PEEKED_BOOLEAN)  {	  if(p    >=    PEEKED_LONG    ||    p    ==    PEEKED_EOF)    {    	non-compiled	[CE]  	95	None	replace
577	[BUG]  [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_DECIMAL)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	73	None	replace
578	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_DIGIT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_DIGIT)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_DIGIT)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	73	None	replace
579	[BUG]  [BUGGY]  if(peekedLong!=  PEEKED_EXP_E)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  PEEKED_EXP_E)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  PEEKED_EXP_E)  {	  if(peekedLong!=    PEEKED_FALSE)    {    	non-compiled	[CE]  	68	None	replace
580	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  NUMBER_CHAR_EXP_E)  {	  if(p    ==    PEEKED_BUFFER)    {    	non-compiled	[CE]  	70	None	replace
581	[BUG]  [BUGGY]  if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  >  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  >  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  ==  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  >  NUMBER_CHAR_EXP_SIGN)  {	  if(peekedLong    ==    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	63	None	replace
582	[BUG]  [BUGGY]  if(peekedLong!=  p)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  p)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  p)  {	  if(p    ==    null)    {    	non-compiled	[CE]  	14	None	replace
583	[BUG]  [BUGGY]  if(p  <  0  ||  peekedLong!=  result)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  0  ||  peekedLong!=  result)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  0  ||  peekedLong!=  result)  {	  if(p    <    0)    {    	non-compiled	[CE]  	42	None	replace
584	[BUG]  [BUGGY]  if(piedLong!=  null  &&  peekedLong.length  >  0)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(piedLong!=  null  &&  peekedLong.length  >  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(piedLong!=  null  &&  peekedLong.length  >  0)  {	  if(piedLong!=    null)    {    	non-compiled	[CE]  	76	None	replace
585	[BUG]  [BUGGY]  if(piedLong!=  null  &&  peekedLong  <  =  0)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(piedLong!=  null  &&  peekedLong  <  =  0)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(piedLong!=  null  &&  peekedLong  <  =  0)  {	  if(piedLong!=    null)    {    	non-compiled	[CE]  	76	None	replace
586	[BUG]  [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_DOUBLE_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	20	None	replace
587	[BUG]  [BUGGY]  intpeekedLong  =  stack.getInt(p);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  intpeekedLong  =  stack.getInt(p);  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	intpeekedLong  =  stack.getInt(p);	  intpeekedLong    =    stack.size();    	non-compiled	[CE]  	87	None	replace
588	[BUG]  [BUGGY]  intpeekedLong  =  stack.getIntValue();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  intpeekedLong  =  stack.getIntValue();  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	intpeekedLong  =  stack.getIntValue();	  intpeekedLong    =    stack.size();    	non-compiled	[CE]  	87	None	replace
589	[BUG]  [BUGGY]  if(p  <  =  0)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  0)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  0)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
590	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
591	[BUG]  [BUGGY]  if(peedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peedLong!=  result)  {  throw  new  IllegalArgumentException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
592	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  IllegalArgumentException( " ".);  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
593	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  NullPointerException( " ");  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  NullPointerException( " ");  }  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_BUFFERED)  {  if(peekedLong!=  result)  {  throw  new  NullPointerException( " ");  }	  if(p    ==    PEEKED_NULL)    {    if(peekedLong!=    result)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
594	[BUG]  [BUGGY]  if(p  ==  PEEKED_LOAD  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  ==  PEEKED_LOAD  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  ==  PEEKED_LOAD  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p!=    result)    {    	non-compiled	[CE]  	32	None	replace
595	[BUG]  [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_LONG)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_LONG)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	59	None	replace
596	[BUG]  [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  >  MIN_INCOMPLETE_INTEGER)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  >  MIN_INCOMPLETE_INTEGER)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  >  MIN_INCOMPLETE_INTEGER)  {	  if(p    <    =    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	119	None	replace
597	[BUG]  [BUGGY]  if(peekedLong  <  =  PEEKED_EOF)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  <  =  PEEKED_EOF)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  <  =  PEEKED_EOF)  {	  if(p    <    =    PEEKED_LONG)    {    	non-compiled	[CE]  	97	None	replace
598	[BUG]  [BUGGY]  if(peekedLong  <  =  PEEKED_LONG)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  <  =  PEEKED_LONG)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  <  =  PEEKED_LONG)  {	  if(p    <    =    PEEKED_LONG)    {    	non-compiled	[CE]  	97	None	replace
599	[BUG]  [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  NUMBER_CHAR_SIGN)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	74	None	replace
600	[BUG]  [BUGGY]  if(peekedLong  <  =  PEEKED_BOOLEAN)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  <  =  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  <  =  PEEKED_BOOLEAN)  {	  if(peekedLong    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	108	None	replace
601	[BUG]  [BUGGY]  if(p  >  PEEKED_BOOLEAN)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >  PEEKED_BOOLEAN)  {	  if(p!=    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	5	None	replace
602	[BUG]  [BUGGY]  if(peekedLong!=  PEEKED_EXP_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  PEEKED_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  PEEKED_EXP_SIGN)  {	  if(peekedLong!=    PEEKED_BOTH)    {    	non-compiled	[CE]  	113	None	replace
603	[BUG]  [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  NUMBER_CHAR_QUOTED_NAME  ||  p  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(p    ==    NUMBER_CHAR_QUOTED_NAME    ||    p    ==    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	17	None	replace
604	[BUG]  [BUGGY]  if(peekedLong!=  PEEKED_BUCKET)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  PEEKED_BUCKET)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  PEEKED_BUCKET)  {	  if(p    ==    PEEKED_BUCKET)    {    	non-compiled	[CE]  	29	None	replace
605	[BUG]  [BUGGY]  if(peekedLong  ==  PEEKED_BUCKET)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  ==  PEEKED_BUCKET)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  ==  PEEKED_BUCKET)  {	  if(p    ==    PEEKED_BUCKET)    {    	non-compiled	[CE]  	29	None	replace
606	[BUG]  [BUGGY]  if(piedLong!=  result)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(piedLong!=  result)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(piedLong!=  result)  {	  if(piedLong!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	66	None	replace
607	[BUG]  [BUGGY]  if(piedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(piedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(piedLong!=  NUMBER_CHAR_QUOTED_NAME  &&  peekedLong  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(piedLong!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	66	None	replace
608	[BUG]  [BUGGY]  if(piedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(piedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(piedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong!=  NUMBER_CHAR_EXP_SIGN)  {	  if(piedLong!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	66	None	replace
609	[BUG]  [BUGGY]  if(piedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(piedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(piedLong!=  NUMBER_CHAR_QUOTED_NAME  ||  peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(piedLong!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	66	None	replace
610	[BUG]  [BUGGY]  if(peekedLong!=  NUMBER_CHAR_LONG)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong!=  NUMBER_CHAR_LONG)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong!=  NUMBER_CHAR_LONG)  {	  if(p    ==    NUMBER_LONG)    {    	non-compiled	[CE]  	80	None	replace
611	[BUG]  [BUGGY]  if(p  <  =  NUMBER_LONG)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  NUMBER_LONG)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  NUMBER_LONG)  {	  if(p    ==    NUMBER_LONG)    {    	non-compiled	[CE]  	80	None	replace
612	[BUG]  [BUGGY]  if(peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(p    ==    NUMBER_LONG)    {    	non-compiled	[CE]  	80	None	replace
613	[BUG]  [BUGGY]  if(peekedLong  <  =  PEEKED_BOTH)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(peekedLong  <  =  PEEKED_BOTH)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(peekedLong  <  =  PEEKED_BOTH)  {	  if(peekedLong    ==    PEEKED_BOTH)    {    	non-compiled	[CE]  	107	None	replace
614	[BUG]  [BUGGY]  if(p  >  PEEKED_LONG)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  >  PEEKED_LONG)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  >  PEEKED_LONG)  {	  if(p!=    PEEKED_LONG)    {    	non-compiled	[CE]  	37	None	replace
615	[BUG]  [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  NUMBER_CHAR_QUOTED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  NUMBER_CHAR_QUOTED)  {	  if(p    ==    NUMBER_CHAR_QUOTED)    {    	non-compiled	[CE]  	8	None	replace
616	[BUG]  [BUGGY]  if(p!=  NUMBER_CHAR_QUOTED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p!=  NUMBER_CHAR_QUOTED)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p!=  NUMBER_CHAR_QUOTED)  {	  if(p    ==    NUMBER_CHAR_QUOTED)    {    	non-compiled	[CE]  	8	None	replace
617	[BUG]  [BUGGY]  if(p  <  =  NUMBER_CHAR_LONG)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      public  int  nextInt()  throws  IOException  {  int  p  =  peeked;  if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  int  result;      [BUGGY]  if(p  <  =  NUMBER_CHAR_LONG)  {  [BUGGY]      result  =  (int)  peekedLong;  if  (peekedLong  !=  result)  {  //  Make  sure  no  precision  was  lost  casting  to  'int'.  throw  new  NumberFormatException(     "Expected  an  int  but  was       "  +  peekedLong  +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2519763153394848	1168	1168	3	replace	if(p  <  =  NUMBER_CHAR_LONG)  {	  if(p    ==    NUMBER_CHAR_QUOTED)    {    	non-compiled	[CE]  	8	None	replace
