bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] if (buffer == null || buffer.length - pos < decodeSize) { [FE] NullPointerException [CONTEXT] [BUGGY] if (buffer == null || buffer.length - pos < decodeSize) { [BUGGY] resizeBuffer(); } byte b = in[inPos++]; if (b == PAD) {  eof = true; break; } else { if (b >= 0 && b < DECODE_TABLE.length) { int result = DECODE_TABLE[b]; [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	558	558	2	replace	
2	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] if (buffer == null || buffer.length - pos < decodeSize) { resizeBuffer(); } byte b = in[inPos++]; if (b == PAD) {  eof = true; break; } else { if (b >= 0 && b < DECODE_TABLE.length) { int result = DECODE_TABLE[b]; [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	558	558	2	add	
3	[BUG] [BUGGY] byte b = in[inPos++]; [FE] NullPointerException [CONTEXT] [BUGGY] byte b = in[inPos++]; [BUGGY] if (b == PAD) {  eof = true; break; } else { if (b >= 0 && b < DECODE_TABLE.length) { int result = DECODE_TABLE[b]; if (result >= 0) { modulus = (++modulus) % 4; x = (x << 6) + result; [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	561	561	2	replace	
4	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] byte b = in[inPos++]; if (b == PAD) {  eof = true; break; } else { if (b >= 0 && b < DECODE_TABLE.length) { int result = DECODE_TABLE[b]; if (result >= 0) { modulus = (++modulus) % 4; x = (x << 6) + result; [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	561	561	2	add	
5	[BUG] [BUGGY] if (b == PAD) { [FE] NullPointerException [CONTEXT] [BUGGY] if (b == PAD) { [BUGGY]  eof = true; break; } else { if (b >= 0 && b < DECODE_TABLE.length) { int result = DECODE_TABLE[b]; if (result >= 0) { modulus = (++modulus) % 4; x = (x << 6) + result; if (modulus == 0) { [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	562	562	2	replace	
6	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] if (b == PAD) {  eof = true; break; } else { if (b >= 0 && b < DECODE_TABLE.length) { int result = DECODE_TABLE[b]; if (result >= 0) { modulus = (++modulus) % 4; x = (x << 6) + result; if (modulus == 0) { [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	562	562	2	add	
7	[BUG] [BUGGY] if (b >= 0 && b < DECODE_TABLE.length) { [FE] NullPointerException [CONTEXT] [BUGGY] if (b >= 0 && b < DECODE_TABLE.length) { [BUGGY] int result = DECODE_TABLE[b]; if (result >= 0) { modulus = (++modulus) % 4; x = (x << 6) + result; if (modulus == 0) { buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); buffer[pos++] = (byte) (x & MASK_8BITS); } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	567	567	2	replace	
8	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] if (b >= 0 && b < DECODE_TABLE.length) { int result = DECODE_TABLE[b]; if (result >= 0) { modulus = (++modulus) % 4; x = (x << 6) + result; if (modulus == 0) { buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); buffer[pos++] = (byte) (x & MASK_8BITS); } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	567	567	2	add	
9	[BUG] [BUGGY] int result = DECODE_TABLE[b]; [FE] NullPointerException [CONTEXT] [BUGGY] int result = DECODE_TABLE[b]; [BUGGY] if (result >= 0) { modulus = (++modulus) % 4; x = (x << 6) + result; if (modulus == 0) { buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); buffer[pos++] = (byte) (x & MASK_8BITS); } } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	568	568	2	replace	
10	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] int result = DECODE_TABLE[b]; if (result >= 0) { modulus = (++modulus) % 4; x = (x << 6) + result; if (modulus == 0) { buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); buffer[pos++] = (byte) (x & MASK_8BITS); } } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	568	568	2	add	
11	[BUG] [BUGGY] if (result >= 0) { [FE] NullPointerException [CONTEXT] [BUGGY] if (result >= 0) { [BUGGY] modulus = (++modulus) % 4; x = (x << 6) + result; if (modulus == 0) { buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); buffer[pos++] = (byte) (x & MASK_8BITS); } } } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	569	569	2	replace	
12	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] if (result >= 0) { modulus = (++modulus) % 4; x = (x << 6) + result; if (modulus == 0) { buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); buffer[pos++] = (byte) (x & MASK_8BITS); } } } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	569	569	2	add	
13	[BUG] [BUGGY] modulus = (++modulus) % 4; [FE] NullPointerException [CONTEXT] [BUGGY] modulus = (++modulus) % 4; [BUGGY] x = (x << 6) + result; if (modulus == 0) { buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); buffer[pos++] = (byte) (x & MASK_8BITS); } } } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	570	570	2	replace	
14	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] modulus = (++modulus) % 4; x = (x << 6) + result; if (modulus == 0) { buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); buffer[pos++] = (byte) (x & MASK_8BITS); } } } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	570	570	2	add	
15	[BUG] [BUGGY] x = (x << 6) + result; [FE] NullPointerException [CONTEXT] [BUGGY] x = (x << 6) + result; [BUGGY] if (modulus == 0) { buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); buffer[pos++] = (byte) (x & MASK_8BITS); } } } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	571	571	2	replace	
16	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] x = (x << 6) + result; if (modulus == 0) { buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); buffer[pos++] = (byte) (x & MASK_8BITS); } } } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	571	571	2	add	
17	[BUG] [BUGGY] if (modulus == 0) { [FE] NullPointerException [CONTEXT] [BUGGY] if (modulus == 0) { [BUGGY] buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); buffer[pos++] = (byte) (x & MASK_8BITS); } } } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	572	572	2	replace	
18	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] if (modulus == 0) { buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); buffer[pos++] = (byte) (x & MASK_8BITS); } } } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	572	572	2	add	
19	[BUG] [BUGGY] buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); [FE] NullPointerException [CONTEXT] [BUGGY] buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); [BUGGY] buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); buffer[pos++] = (byte) (x & MASK_8BITS); } } } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	573	573	2	replace	
20	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); buffer[pos++] = (byte) (x & MASK_8BITS); } } } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	573	573	2	add	
21	[BUG] [BUGGY] buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); [FE] NullPointerException [CONTEXT] [BUGGY] buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); [BUGGY] buffer[pos++] = (byte) (x & MASK_8BITS); } } } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	574	574	2	replace	
22	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); buffer[pos++] = (byte) (x & MASK_8BITS); } } } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	574	574	2	add	
23	[BUG] [BUGGY] buffer[pos++] = (byte) (x & MASK_8BITS); [FE] NullPointerException [CONTEXT] [BUGGY] buffer[pos++] = (byte) (x & MASK_8BITS); [BUGGY] } } } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	575	575	2	replace	
24	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] buffer[pos++] = (byte) (x & MASK_8BITS); } } } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	575	575	2	add	
25	[BUG] [BUGGY] x = x << 6; [FE] NullPointerException [CONTEXT] [BUGGY] x = x << 6; [BUGGY] switch (modulus) { case 2 : x = x << 6; buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); break; case 3 : buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); break; } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	587	587	2	replace	
26	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] x = x << 6; switch (modulus) { case 2 : x = x << 6; buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); break; case 3 : buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); break; } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	587	587	2	add	
27	[BUG] [BUGGY] switch (modulus) { [FE] NullPointerException [CONTEXT] [BUGGY] switch (modulus) { [BUGGY] case 2 : x = x << 6; buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); break; case 3 : buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); break; } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	588	588	2	replace	
28	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] switch (modulus) { case 2 : x = x << 6; buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); break; case 3 : buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); break; } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	588	588	2	add	
29	[BUG] [BUGGY] buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); [FE] NullPointerException [CONTEXT] [BUGGY] buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); [BUGGY] buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); break; } } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	594	594	2	replace	
30	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); break; } } } [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	594	594	2	add	
31	[BUG] [BUGGY] if (buffer != null) { [FE] NullPointerException [CONTEXT] [BUGGY] if (buffer != null) { [BUGGY] int len = Math.min(avail(), bAvail); if (buffer != b) { System.arraycopy(buffer, readPos, b, bPos, len); readPos += len; if (readPos >= pos) { buffer = null; } } else {   [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5	407	407	2	replace	
32	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] if (buffer != null) { int len = Math.min(avail(), bAvail); if (buffer != b) { System.arraycopy(buffer, readPos, b, bPos, len); readPos += len; if (readPos >= pos) { buffer = null; } } else {   [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5	407	407	2	add	
33	[BUG] [BUGGY] int len = Math.min(avail(), bAvail); [FE] NullPointerException [CONTEXT] [BUGGY] int len = Math.min(avail(), bAvail); [BUGGY] if (buffer != b) { System.arraycopy(buffer, readPos, b, bPos, len); readPos += len; if (readPos >= pos) { buffer = null; } } else {   buffer = null; [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5	408	408	2	replace	
34	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] int len = Math.min(avail(), bAvail); if (buffer != b) { System.arraycopy(buffer, readPos, b, bPos, len); readPos += len; if (readPos >= pos) { buffer = null; } } else {   buffer = null; [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5	408	408	2	add	
35	[BUG] [BUGGY] if (buffer != b) { [FE] NullPointerException [CONTEXT] [BUGGY] if (buffer != b) { [BUGGY] System.arraycopy(buffer, readPos, b, bPos, len); readPos += len; if (readPos >= pos) { buffer = null; } } else {   buffer = null; } [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5	409	409	2	replace	
36	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] if (buffer != b) { System.arraycopy(buffer, readPos, b, bPos, len); readPos += len; if (readPos >= pos) { buffer = null; } } else {   buffer = null; } [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5	409	409	2	add	
37	[BUG] [BUGGY] return len; [FE] NullPointerException [CONTEXT] [BUGGY] return len; [BUGGY] } return eof ? -1 : 0; } [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5	420	420	2	replace	
38	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] return len; } return eof ? -1 : 0; } [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.5	420	420	2	add	
39	[BUG] [BUGGY] return buffer != null ? pos - readPos : 0; [FE] NullPointerException [CONTEXT] [BUGGY] return buffer != null ? pos - readPos : 0; [BUGGY] } [CLASS] Base64 [METHOD] avail [RETURN_TYPE] int  	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.4472135954999579	378	378	2	replace	
40	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] return buffer != null ? pos - readPos : 0; } [CLASS] Base64 [METHOD] avail [RETURN_TYPE] int  	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.4472135954999579	378	378	2	add	
41	[BUG] [BUGGY] if (eof) { [FE] NullPointerException [CONTEXT] [BUGGY] if (eof) { [BUGGY] return; } if (inAvail < 0) { eof = true; } for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < decodeSize) { resizeBuffer(); } byte b = in[inPos++]; [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.4472135954999579	551	551	2	replace	
42	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] if (eof) { return; } if (inAvail < 0) { eof = true; } for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < decodeSize) { resizeBuffer(); } byte b = in[inPos++]; [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.4472135954999579	551	551	2	add	
43	[BUG] [BUGGY] if (inAvail < 0) { [FE] NullPointerException [CONTEXT] [BUGGY] if (inAvail < 0) { [BUGGY] eof = true; } for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < decodeSize) { resizeBuffer(); } byte b = in[inPos++]; if (b == PAD) {  eof = true; [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.4472135954999579	554	554	2	replace	
44	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] if (inAvail < 0) { eof = true; } for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < decodeSize) { resizeBuffer(); } byte b = in[inPos++]; if (b == PAD) {  eof = true; [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.4472135954999579	554	554	2	add	
45	[BUG] [BUGGY] eof = true; [FE] NullPointerException [CONTEXT] [BUGGY] eof = true; [BUGGY] } for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < decodeSize) { resizeBuffer(); } byte b = in[inPos++]; if (b == PAD) {  eof = true; break; [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.4472135954999579	555	555	2	replace	
46	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] eof = true; } for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < decodeSize) { resizeBuffer(); } byte b = in[inPos++]; if (b == PAD) {  eof = true; break; [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.4472135954999579	555	555	2	add	
47	[BUG] [BUGGY] for (int i = 0; i < inAvail; i++) { [FE] NullPointerException [CONTEXT] [BUGGY] for (int i = 0; i < inAvail; i++) { [BUGGY] if (buffer == null || buffer.length - pos < decodeSize) { resizeBuffer(); } byte b = in[inPos++]; if (b == PAD) {  eof = true; break; } else { if (b >= 0 && b < DECODE_TABLE.length) { [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.4472135954999579	557	557	2	replace	
48	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < decodeSize) { resizeBuffer(); } byte b = in[inPos++]; if (b == PAD) {  eof = true; break; } else { if (b >= 0 && b < DECODE_TABLE.length) { [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.4472135954999579	557	557	2	add	
49	[BUG] [BUGGY] if (eof && modulus != 0) { [FE] NullPointerException [CONTEXT] [BUGGY] if (eof && modulus != 0) { [BUGGY]  x = x << 6; switch (modulus) { case 2 : x = x << 6; buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); break; case 3 : buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.4472135954999579	585	585	2	replace	
50	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] if (eof && modulus != 0) { x = x << 6; switch (modulus) { case 2 : x = x << 6; buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); break; case 3 : buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS); buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS); [CLASS] Base64 [METHOD] decode [RETURN_TYPE] void  byte[] in int inPos int inAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.4472135954999579	585	585	2	add	
52	[BUG] [BUGGY] this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe); [FE] NullPointerException [CONTEXT] [BUGGY] this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe); [BUGGY] } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(boolean)  boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.4082482904638631	256	256	2	replace	
53	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe); } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(boolean)  boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.4082482904638631	256	256	2	add	
54	[BUG] [BUGGY] } [FE] NullPointerException [CONTEXT] [BUGGY] } [BUGGY]  [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(boolean)  boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.4082482904638631	257	257	2	replace	
55	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(boolean)  boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.4082482904638631	257	257	2	add	
56	[BUG] [BUGGY] buffer = null; [FE] NullPointerException [CONTEXT] [BUGGY] buffer = null; [BUGGY] } return len; } return eof ? -1 : 0; } [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.4082482904638631	418	418	2	replace	
57	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] buffer = null; } return len; } return eof ? -1 : 0; } [CLASS] Base64 [METHOD] readResults [RETURN_TYPE] int  byte[] b int bPos int bAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.4082482904638631	418	418	2	add	
58	[BUG] [BUGGY] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { [FE] NullPointerException [CONTEXT] [BUGGY] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { [BUGGY] if (lineSeparator == null) { lineLength = 0;// disable chunk-separating lineSeparator = CHUNK_SEPARATOR;// this just gets ignored } this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	332	332	2	replace	
59	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { if (lineSeparator == null) { lineLength = 0;// disable chunk-separating lineSeparator = CHUNK_SEPARATOR;// this just gets ignored } this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	332	332	2	add	
60	[BUG] [BUGGY] if (lineSeparator == null) { [FE] NullPointerException [CONTEXT] [BUGGY] if (lineSeparator == null) { [BUGGY] lineLength = 0;// disable chunk-separating lineSeparator = CHUNK_SEPARATOR;// this just gets ignored } this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	333	333	2	replace	
61	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] if (lineSeparator == null) { lineLength = 0;// disable chunk-separating lineSeparator = CHUNK_SEPARATOR;// this just gets ignored } this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	333	333	2	add	
62	[BUG] [BUGGY] this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0; [FE] NullPointerException [CONTEXT] [BUGGY] this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0; [BUGGY] this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep = StringUtils.newStringUtf8(lineSeparator); [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	337	337	2	replace	
63	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep = StringUtils.newStringUtf8(lineSeparator); [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	337	337	2	add	
64	[BUG] [BUGGY] this.lineSeparator = new byte[lineSeparator.length]; [FE] NullPointerException [CONTEXT] [BUGGY] this.lineSeparator = new byte[lineSeparator.length]; [BUGGY] System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep = StringUtils.newStringUtf8(lineSeparator); throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	338	338	2	replace	
65	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep = StringUtils.newStringUtf8(lineSeparator); throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	338	338	2	add	
66	[BUG] [BUGGY] System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); [FE] NullPointerException [CONTEXT] [BUGGY] System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); [BUGGY] if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep = StringUtils.newStringUtf8(lineSeparator); throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	339	339	2	replace	
67	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep = StringUtils.newStringUtf8(lineSeparator); throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	339	339	2	add	
68	[BUG] [BUGGY] if (lineLength > 0) { [FE] NullPointerException [CONTEXT] [BUGGY] if (lineLength > 0) { [BUGGY] this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep = StringUtils.newStringUtf8(lineSeparator); throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); } this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	340	340	2	replace	
69	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep = StringUtils.newStringUtf8(lineSeparator); throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); } this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	340	340	2	add	
70	[BUG] [BUGGY] this.encodeSize = 4 + lineSeparator.length; [FE] NullPointerException [CONTEXT] [BUGGY] this.encodeSize = 4 + lineSeparator.length; [BUGGY] } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep = StringUtils.newStringUtf8(lineSeparator); throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); } this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	341	341	2	replace	
71	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep = StringUtils.newStringUtf8(lineSeparator); throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); } this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	341	341	2	add	
72	[BUG] [BUGGY] this.decodeSize = this.encodeSize - 1; [FE] NullPointerException [CONTEXT] [BUGGY] this.decodeSize = this.encodeSize - 1; [BUGGY] if (containsBase64Byte(lineSeparator)) { String sep = StringUtils.newStringUtf8(lineSeparator); throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); } this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	345	345	2	replace	
73	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep = StringUtils.newStringUtf8(lineSeparator); throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); } this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	345	345	2	add	
74	[BUG] [BUGGY] if (containsBase64Byte(lineSeparator)) { [FE] NullPointerException [CONTEXT] [BUGGY] if (containsBase64Byte(lineSeparator)) { [BUGGY] String sep = StringUtils.newStringUtf8(lineSeparator); throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); } this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	346	346	2	replace	
75	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] if (containsBase64Byte(lineSeparator)) { String sep = StringUtils.newStringUtf8(lineSeparator); throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]"); } this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	346	346	2	add	
76	[BUG] [BUGGY] this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; [FE] NullPointerException [CONTEXT] [BUGGY] this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; [BUGGY] } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	350	350	2	replace	
77	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	350	350	2	add	
78	[BUG] [BUGGY] } [FE] NullPointerException [CONTEXT] [BUGGY] } [BUGGY]  [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	351	351	2	replace	
79	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(int,byte[],boolean)  int lineLength byte[] lineSeparator boolean urlSafe 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	351	351	2	add	
80	[BUG] [BUGGY] static final byte[] CHUNK_SEPARATOR = {'\r', '\n'}; [FE] NullPointerException [CONTEXT] [BUGGY] static final byte[] CHUNK_SEPARATOR = {'\r', '\n'}; [BUGGY]  [CLASS] Base64  	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	91	91	2	replace	
81	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] static final byte[] CHUNK_SEPARATOR = {'\r', '\n'}; [CLASS] Base64  	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	91	91	2	add	
82	[BUG] [BUGGY] private static final byte[] STANDARD_ENCODE_TABLE = { [FE] NullPointerException [CONTEXT] [BUGGY] private static final byte[] STANDARD_ENCODE_TABLE = { [BUGGY] 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' }; [CLASS] Base64  	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	100	100	2	replace	
83	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] private static final byte[] STANDARD_ENCODE_TABLE = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' }; [CLASS] Base64  	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	100	100	2	add	
84	[BUG] [BUGGY] private static final byte[] URL_SAFE_ENCODE_TABLE = { [FE] NullPointerException [CONTEXT] [BUGGY] private static final byte[] URL_SAFE_ENCODE_TABLE = { [BUGGY] 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_' }; [CLASS] Base64  	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	113	113	2	replace	
85	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] private static final byte[] URL_SAFE_ENCODE_TABLE = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_' }; [CLASS] Base64  	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	113	113	2	add	
86	[BUG] [BUGGY] private static final byte[] DECODE_TABLE = { [FE] NullPointerException [CONTEXT] [BUGGY] private static final byte[] DECODE_TABLE = { [BUGGY] -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 }; [CLASS] Base64  	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	137	137	2	replace	
87	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] private static final byte[] DECODE_TABLE = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 }; [CLASS] Base64  	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	137	137	2	add	
88	[BUG] [BUGGY] return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1); [FE] NullPointerException [CONTEXT] [BUGGY] return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1); [BUGGY] } [CLASS] Base64 [METHOD] isBase64 [RETURN_TYPE] boolean  byte octet 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	610	610	2	replace	
89	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1); } [CLASS] Base64 [METHOD] isBase64 [RETURN_TYPE] boolean  byte octet 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	610	610	2	add	
90	[BUG] [BUGGY] for (int i = 0; i < arrayOctet.length; i++) { [FE] NullPointerException [CONTEXT] [BUGGY] for (int i = 0; i < arrayOctet.length; i++) { [BUGGY] if (isBase64(arrayOctet[i])) { return true; } } return false; } [CLASS] Base64 [METHOD] containsBase64Byte [RETURN_TYPE] boolean  byte[] arrayOctet 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	639	639	2	replace	
91	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] for (int i = 0; i < arrayOctet.length; i++) { if (isBase64(arrayOctet[i])) { return true; } } return false; } [CLASS] Base64 [METHOD] containsBase64Byte [RETURN_TYPE] boolean  byte[] arrayOctet 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	639	639	2	add	
92	[BUG] [BUGGY] if (isBase64(arrayOctet[i])) { [FE] NullPointerException [CONTEXT] [BUGGY] if (isBase64(arrayOctet[i])) { [BUGGY] return true; } } return false; } [CLASS] Base64 [METHOD] containsBase64Byte [RETURN_TYPE] boolean  byte[] arrayOctet 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	640	640	2	replace	
93	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] if (isBase64(arrayOctet[i])) { return true; } } return false; } [CLASS] Base64 [METHOD] containsBase64Byte [RETURN_TYPE] boolean  byte[] arrayOctet 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	640	640	2	add	
94	[BUG] [BUGGY] return false; [FE] NullPointerException [CONTEXT] [BUGGY] return false; [BUGGY] } [CLASS] Base64 [METHOD] containsBase64Byte [RETURN_TYPE] boolean  byte[] arrayOctet 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	644	644	2	replace	
95	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] return false; } [CLASS] Base64 [METHOD] containsBase64Byte [RETURN_TYPE] boolean  byte[] arrayOctet 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.35355339059327373	644	644	2	add	
96	[BUG] [BUGGY] return this.buffer != null; [FE] NullPointerException [CONTEXT] [BUGGY] return this.buffer != null; [BUGGY] } [CLASS] Base64 [METHOD] hasData [RETURN_TYPE] boolean  	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.31622776601683794	369	369	2	replace	
97	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] return this.buffer != null; } [CLASS] Base64 [METHOD] hasData [RETURN_TYPE] boolean  	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.31622776601683794	369	369	2	add	
98	[BUG] [BUGGY] if (out != null && out.length == outAvail) { [FE] NullPointerException [CONTEXT] [BUGGY] if (out != null && out.length == outAvail) { [BUGGY] buffer = out; pos = outPos; readPos = outPos; } } [CLASS] Base64 [METHOD] setInitialBuffer [RETURN_TYPE] void  byte[] out int outPos int outAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.31622776601683794	439	439	2	replace	
99	[BUG] [BUGGY] [FE] NullPointerException [CONTEXT] [BUGGY] [BUGGY] if (out != null && out.length == outAvail) { buffer = out; pos = outPos; readPos = outPos; } } [CLASS] Base64 [METHOD] setInitialBuffer [RETURN_TYPE] void  byte[] out int outPos int outAvail 	projects/Codec5/src/java/org/apache/commons/codec/binary/Base64.java	0.31622776601683794	439	439	2	add	
