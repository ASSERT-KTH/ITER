bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(len  >  room)  {  if(len  >  room)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  room)  {  if(len  >  room)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room)    {    if(len  >  room)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
2	[BUG]  [BUGGY]  if(len  >  room)  {  If(len  >  room)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  room)  {  If(len  >  room)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room)    {    If(len  >  room)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
3	[BUG]  [BUGGY]  if(len  >  room)  {  if(len  >  space)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  room)  {  if(len  >  space)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room)    {    if(len  >  space)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
4	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  if(len  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  <  SHORT_WRITE)  {  if(len  <  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE)    {    if(len  <  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
5	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  If(len  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  <  SHORT_WRITE)  {  If(len  <  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE)    {    If(len  <  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
6	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  if(len  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  <  SHORT_WRITE)  {  if(len  >=  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE)    {    if(len  >=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
8	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
10	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
12	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  >  0)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >  0)  {	  if(len    >    0)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
14	[BUG]  [BUGGY]  if(room  >  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  >  0)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >  0)  {	  if(len    >    0)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  <  len)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  <  len)  {	  if(len    >    0)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
16	[BUG]  [BUGGY]  if(room  <  len)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  <  len)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  len)  {	  if(len    >    0)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  _outputEnd)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >  _outputEnd)  {	  if(len    >    room)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
18	[BUG]  [BUGGY]  if(len  >  _outputEnd)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  _outputEnd)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  _outputEnd)  {	  if(len    >    room)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
19	[BUG]  [BUGGY]  if(len  <  =  room)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  <  =  room)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  =  room)  {	  if(len    >    room)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
20	[BUG]  [BUGGY]  if(len  >  0)  {  if(len  >  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  0)  {  if(len  >  0)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    0)    {    if(len  >  0)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
21	[BUG]  [BUGGY]  if(len  >  0)  {  If(len  >  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  0)  {  If(len  >  0)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    0)    {    If(len  >  0)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
22	[BUG]  [BUGGY]  if(len  >  0)  {  ((  char)len).writeRaw(text);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  0)  {  ((  char)len).writeRaw(text);  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    0)    {    ((  char)len).writeRaw(text);	  	non-compiled	[CE]  ';'  expected	8	None	add
23	[BUG]  [BUGGY]  if(room  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  <  =  0)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  =  0)  {	  if(len    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  ==  0)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  ==  0)  {	  if(len    <    =    0)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
25	[BUG]  [BUGGY]  if(len  ==  0)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  ==  0)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  ==  0)  {	  if(len    <    =    0)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  <  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  <  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
27	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  <  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
28	[BUG]  [BUGGY]  if(len  <  =  SHORT_WRITE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  <  =  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  =  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }	      	compilable	  [FE]  AssertionFailedError  	7	1	replace
30	[BUG]  [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }	      	compilable	  [FE]  AssertionFailedError  	7	1	replace
31	[BUG]  [BUGGY]  _writer.writeRaw(text);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  _writer.writeRaw(text);  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	_writer.writeRaw(text);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	      	compilable	  [FE]  AssertionFailedError  	7	1	replace
33	[BUG]  [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	      	compilable	  [FE]  AssertionFailedError  	7	1	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }	      	compilable	  [FE]  AssertionFailedError  	7	1	replace
35	[BUG]  [BUGGY]  if(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }	      	compilable	  [FE]  AssertionFailedError  	7	1	replace
36	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
37	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  If(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  If(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    If(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
38	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(len  >=  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(len  >=  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    if(len  >=  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
39	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  ||  space  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  ||  space  >  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    if(len  <  SHORT_WRITE  ||  space  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  >=  0)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >=  0)  {	  if(len    <    =    0)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
41	[BUG]  [BUGGY]  if(room  >=  0)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  >=  0)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  0)  {	  if(len    <    =    0)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  <  0)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  <  0)  {	  if(len    <    =    0)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
43	[BUG]  [BUGGY]  if(len  <  0)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  <  0)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  0)  {	  if(len    <    =    0)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
44	[BUG]  [BUGGY]  if(len  >  0)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  if(len  >  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  0)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  if(len  >  0)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    0)    {    int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  if(len  >  0)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
45	[BUG]  [BUGGY]  if(len  >  0)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  ++i)  {  if(len  >  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  0)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  ++i)  {  if(len  >  0)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    0)    {    int  len  =  text.length();  for(int  i  =  0;  i  <  len;  ++i)  {  if(len  >  0)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
46	[BUG]  [BUGGY]  if(len  >  0)  {  int  len  =  text.length();  if(len  >  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  0)  {  int  len  =  text.length();  if(len  >  0)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    0)    {    int  len  =  text.length();  if(len  >  0)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
47	[BUG]  [BUGGY]  if(len  >  0)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  0)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    0)    {    int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }	  	non-compiled	[CE]  ';'  expected	8	None	add
48	[BUG]  [BUGGY]  _writer.write(text);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  _writer.write(text);  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	_writer.write(text);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  int  len  =  text.length();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  int  len  =  text.length();  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	int  len  =  text.length();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  _writer.write(text,  0,  len);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  _writer.write(text,  0,  len);  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	_writer.write(text,  0,  len);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  >=  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >=  SHORT_WRITE)  {	  if(len    >    0)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
52	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  >=  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE)  {	  if(len    >    0)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  >=  len)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >=  len)  {	  if(len    >    0)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
54	[BUG]  [BUGGY]  if(room  >=  len)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  >=  len)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {	  if(len    >    0)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
55	[BUG]  [BUGGY]  if(len  >  room)  {  int  len  =  text.length();  if(len  >  room)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  room)  {  int  len  =  text.length();  if(len  >  room)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room)    {    int  len  =  text.length();  if(len  >  room)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
56	[BUG]  [BUGGY]  if(len  >  room)  {  int  len  =  text.length()  -  _outputTail;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  room)  {  int  len  =  text.length()  -  _outputTail;  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room)    {    int  len  =  text.length()  -  _outputTail;	  	non-compiled	[CE]  ';'  expected	5	None	add
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  >  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
58	[BUG]  [BUGGY]  if(room  >  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  >  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
60	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
62	[BUG]  [BUGGY]  if(len  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
64	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  >  len)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >  len)  {	  if(len    >    room)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
66	[BUG]  [BUGGY]  if(room  >  len)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  >  len)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >  len)  {	  if(len    >    room)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
67	[BUG]  [BUGGY]  if(len  >  _outputMaxContiguous)  {  [CE]  cannot  find  symbol  _outputMaxContiguous  [FE]      AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  _outputMaxContiguous)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  _outputMaxContiguous)  {	  if(len    >    room)    {    	non-compiled	[CE]  cannot  find  symbol  _outputMaxContiguous	6	None	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  <  0)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  <  0)  {	  if(len    <    =    0)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
69	[BUG]  [BUGGY]  if(room  <  0)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  <  0)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  0)  {	  if(len    <    =    0)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
70	[BUG]  [BUGGY]  if(len  >  0)  {  int  len  =  text.length();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  0)  {  int  len  =  text.length();  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    0)    {    int  len  =  text.length();	  	non-compiled	[CE]  ';'  expected	8	None	add
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >  room  &&  room  <  SHORT_WRITE)  {	  if(len    >    room)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
72	[BUG]  [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  room  &&  room  <  SHORT_WRITE)  {	  if(len    >    room)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
74	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
75	[BUG]  [BUGGY]  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
76	[BUG]  [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)  ==  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  'void'  type  not  allowed  here  [FE]                AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)  ==  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)  ==  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	      	non-compiled	[CE]  'void'  type  not  allowed  here	7	None	replace
77	[BUG]  [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  'void'  type  not  allowed  here  [FE]                  AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	      	non-compiled	[CE]  'void'  type  not  allowed  here	7	None	replace
78	[BUG]  [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  'void'  type  not  allowed  here  [FE]                    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	      	non-compiled	[CE]  'void'  type  not  allowed  here	7	None	replace
79	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputMaxContiguous)  {  [CE]  cannot  find  symbol  _outputMaxContiguous  [FE]    AssertionFailedError    [CONTEXT]    public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;    [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputMaxContiguous)  {  [BUGGY]    _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE  ||  room  >  _outputMaxContiguous)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	non-compiled	[CE]  cannot  find  symbol  _outputMaxContiguous	4	None	replace
