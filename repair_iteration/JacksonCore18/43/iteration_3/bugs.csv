bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(len  >  _outputEnd)  {  if(len  >  _outputEnd)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  _outputEnd)  {  if(len  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    _outputEnd)    {    if(len  >  _outputEnd)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
2	[BUG]  [BUGGY]  if(len  >  _outputEnd)  {  If(len  >  _outputEnd)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  _outputEnd)  {  If(len  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    _outputEnd)    {    If(len  >  _outputEnd)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
3	[BUG]  [BUGGY]  if(len  >  _outputEnd)  {  if(len  >  _outputStart)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  _outputEnd)  {  if(len  >  _outputStart)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    _outputEnd)    {    if(len  >  _outputStart)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >=  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >=  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    if(len    >=    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	38	1	replace
5	[BUG]  [BUGGY]  if(len  >=  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >=  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >=  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    if(len    >=    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	38	1	replace
6	[BUG]  [BUGGY]  if(len  <  =  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  =  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  =  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    if(len    >=    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    if(len    >=    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	38	1	replace
8	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    if(len    >=    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	38	1	replace
9	[BUG]  [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	  	non-compiled	[CE]  ';'  expected	32	None	add
10	[BUG]  [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  if(len  >  room)  {  if(_outputTail  >>  _outputEnd)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  if(len  >  room)  {  if(_outputTail  >>  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    if(len  >  room)  {  if(_outputTail  >>  _outputEnd)  {  _flushBuffer();  }	  	non-compiled	[CE]  ';'  expected	32	None	add
11	[BUG]  [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  if(len  >  room)  {  if(_outputTail!=  _outputEnd)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  if(len  >  room)  {  if(_outputTail!=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    if(len  >  room)  {  if(_outputTail!=  _outputEnd)  {  _flushBuffer();  }	  	non-compiled	[CE]  ';'  expected	32	None	add
12	[BUG]  [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  If(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  If(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    If(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	  	non-compiled	[CE]  ';'  expected	32	None	add
13	[BUG]  [BUGGY]  int  len  =  text.length()  -  room;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  int  len  =  text.length()  -  room;  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	int  len  =  text.length()  -  room;	  int    len    =    text.length();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
14	[BUG]  [BUGGY]  int  len  =  text.length()  +  room;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  int  len  =  text.length()  +  room;  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	int  len  =  text.length()  +  room;	  int    len    =    text.length();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
15	[BUG]  [BUGGY]  int  len  =  text.length()  -  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  int  len  =  text.length()  -  1;  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	int  len  =  text.length()  -  1;	  int    len    =    text.length();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
16	[BUG]  [BUGGY]  if(room  <  len)  {  If(len  >  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len)  {  If(len  >  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  len)  {  If(len  >  0)  {	  if(len    >    0)    {    If(len    >    0)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
17	[BUG]  [BUGGY]  if(len  <  =  0)  {  If(len  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  =  0)  {  If(len  >  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  =  0)  {  If(len  >  0)  {	  if(len    >    0)    {    If(len    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
18	[BUG]  [BUGGY]  if(room  >=  len)  {  If(len  >  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  If(len  >  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  If(len  >  0)  {	  if(len    >    0)    {    If(len    >    0)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  0  ||  room  >=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  <  0  ||  room  >=  SHORT_WRITE)  {	  if(room    <    0)    {    	compilable	  [FE]  AssertionFailedError  	69	1	replace
20	[BUG]  [BUGGY]  if(len  <  0  ||  room  >=  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  0  ||  room  >=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  0  ||  room  >=  SHORT_WRITE)  {	  if(room    <    0)    {    	compilable	  [FE]  AssertionFailedError  	69	1	replace
21	[BUG]  [BUGGY]  _writer.write(text,  room);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  _writer.write(text,  room);  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	_writer.write(text,  room);	  _writer.write(text);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
22	[BUG]  [BUGGY]  _writer.write(text,  len);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  _writer.write(text,  len);  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	_writer.write(text,  len);	  _writer.write(text);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  0  &&  room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >  0  &&  room  <  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	72	1	replace
24	[BUG]  [BUGGY]  if(len  >  0  &&  room  <  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  0  &&  room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  0  &&  room  <  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	72	1	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  <  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	72	1	replace
26	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	72	1	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >=  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >=  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	72	1	replace
28	[BUG]  [BUGGY]  if(len  >=  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >=  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >=  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	72	1	replace
29	[BUG]  [BUGGY]  If(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  If(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	If(len  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    If(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	non-compiled	[CE]  ';'  expected	37	None	replace
30	[BUG]  [BUGGY]  if(room  <  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)  ==  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  'void'  type  not  allowed  here  [FE]                    AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)  ==  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)  ==  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)    ==    0)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  'void'  type  not  allowed  here	76	None	replace
31	[BUG]  [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  'void'  type  not  allowed  here  [FE]                      AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)    ==    0)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  'void'  type  not  allowed  here	76	None	replace
32	[BUG]  [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)  ==  0)  {  text.setChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  'void'  type  not  allowed  here  [FE]                        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)  ==  0)  {  text.setChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)  ==  0)  {  text.setChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)    ==    0)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  'void'  type  not  allowed  here	76	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len  ||  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  <  len  ||  room  >  SHORT_WRITE)  {	  if(room    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
34	[BUG]  [BUGGY]  if(room  <  len  ||  room  >  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len  ||  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  len  ||  room  >  SHORT_WRITE)  {	  if(room    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >=  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  if(room    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
36	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  if(room    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
37	[BUG]  [BUGGY]  if(room  >  SHORT_WRITE)  {  if(room  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  SHORT_WRITE)  {  if(room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >    SHORT_WRITE)    {    if(room  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	57	None	add
38	[BUG]  [BUGGY]  if(room  >  SHORT_WRITE)  {  If(room  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  SHORT_WRITE)  {  If(room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >    SHORT_WRITE)    {    If(room  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	57	None	add
39	[BUG]  [BUGGY]  if(room  >  SHORT_WRITE)  {  int  len  =  text.length();  if(room  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  SHORT_WRITE)  {  int  len  =  text.length();  if(room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >    SHORT_WRITE)    {    int  len  =  text.length();  if(room  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	57	None	add
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  ==  len)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  ==  len)  {	  if(len    >    0)    {    int    len    =    text.length();    for(int    i    =    0;    i    <    len;    i++)    {    if(len    >    0)    {    	compilable	  [FE]  AssertionFailedError  	44	1	replace
41	[BUG]  [BUGGY]  if(room  ==  len)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  ==  len)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  ==  len)  {	  if(len    >    0)    {    int    len    =    text.length();    for(int    i    =    0;    i    <    len;    i++)    {    if(len    >    0)    {    	compilable	  [FE]  AssertionFailedError  	44	1	replace
42	[BUG]  [BUGGY]  _flushBuffer();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  _flushBuffer();  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	_flushBuffer();	  if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
43	[BUG]  [BUGGY]  _outputTail  =  len;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  _outputTail  =  len;  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	_outputTail  =  len;	  if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
44	[BUG]  [BUGGY]  _writeRawLong(text);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  _writeRawLong(text);  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	_writeRawLong(text);	  if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >=    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
46	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >=    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
47	[BUG]  [BUGGY]  if(len  <  0)  {  if(len  <  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  0)  {  if(len  <  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    0)    {    if(len  <  0)  {	  	non-compiled	[CE]  ';'  expected	42	None	add
48	[BUG]  [BUGGY]  if(len  <  0)  {  If(len  <  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  0)  {  If(len  <  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    0)    {    If(len  <  0)  {	  	non-compiled	[CE]  ';'  expected	42	None	add
49	[BUG]  [BUGGY]  if(len  <  0)  {  if(len  >=  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  0)  {  if(len  >=  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    0)    {    if(len  >=  0)  {	  	non-compiled	[CE]  ';'  expected	42	None	add
50	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >=  len)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(room  >=  len)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >=    len)    {    if(room  >=  len)  {	  	non-compiled	[CE]  ';'  expected	53	None	add
51	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room!=  len)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(room!=  len)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >=    len)    {    if(room!=  len)  {	  	non-compiled	[CE]  ';'  expected	53	None	add
52	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  >>  len)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(room  >>  len)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >=    len)    {    if(room  >>  len)  {	  	non-compiled	[CE]  ';'  expected	53	None	add
53	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  ==  len)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(room  ==  len)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >=    len)    {    if(room  ==  len)  {	  	non-compiled	[CE]  ';'  expected	53	None	add
54	[BUG]  [BUGGY]  if(room  <  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  'void'  type  not  allowed  here  [FE]                        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)!=    _outputEnd)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  'void'  type  not  allowed  here	78	None	replace
55	[BUG]  [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTa  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTa  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTa	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)!=    _outputEnd)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
56	[BUG]  [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)!=    _outputEnd)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  0  ||  room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >  0  ||  room  <  SHORT_WRITE)  {	  if(room    >    0)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
58	[BUG]  [BUGGY]  if(len  >  0  ||  room  <  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  0  ||  room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  0  ||  room  <  SHORT_WRITE)  {	  if(room    >    0)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
59	[BUG]  [BUGGY]  if(room  >  0)  {  if(room  >  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  0)  {  if(room  >  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >    0)    {    if(room  >  0)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
60	[BUG]  [BUGGY]  if(room  >  0)  {  ((  _outputTail  +  len)>  _outputEnd)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  0)  {  ((  _outputTail  +  len)>  _outputEnd)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >    0)    {    ((  _outputTail  +  len)>  _outputEnd)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;	  	non-compiled	[CE]  not  a  statement	13	None	add
61	[BUG]  [BUGGY]  if(room  >  0)  {  ((  _outputTail  +  len)*  _outputEnd)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  0)  {  ((  _outputTail  +  len)*  _outputEnd)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >    0)    {    ((  _outputTail  +  len)*  _outputEnd)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;	  	non-compiled	[CE]  not  a  statement	13	None	add
62	[BUG]  [BUGGY]  if(room  >  0)  {  ((  _outputTail  +  len)>  _outputEnd)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  0)  {  ((  _outputTail  +  len)>  _outputEnd)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >    0)    {    ((  _outputTail  +  len)>  _outputEnd)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }	  	non-compiled	[CE]  not  a  statement	13	None	add
63	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    &&    room    >=    SHORT_WRITE)    {    if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	73	None	add
64	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  &&  room!=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  &&  room!=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    &&    room    >=    SHORT_WRITE)    {    if(len  <  SHORT_WRITE  &&  room!=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	73	None	add
65	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  &&  room  >>  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  &&  room  >>  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    &&    room    >=    SHORT_WRITE)    {    if(len  <  SHORT_WRITE  &&  room  >>  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	73	None	add
66	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  &&  room  ==  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  &&  room  ==  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    &&    room    >=    SHORT_WRITE)    {    if(len  <  SHORT_WRITE  &&  room  ==  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	73	None	add
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  <  room)  {	  if(room    <    len)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
68	[BUG]  [BUGGY]  if(len  <  room)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  room)  {	  if(room    <    len)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
69	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room  >=  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  0)  {  if(room  >=  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >=    0)    {    if(room  >=  0)  {	  	non-compiled	[CE]  ';'  expected	40	None	add
70	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room  >>  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  0)  {  if(room  >>  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >=    0)    {    if(room  >>  0)  {	  	non-compiled	[CE]  ';'  expected	40	None	add
71	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room!=  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  0)  {  if(room!=  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >=    0)    {    if(room!=  0)  {	  	non-compiled	[CE]  ';'  expected	40	None	add
72	[BUG]  [BUGGY]  if(room  >=  0)  {  if(room  ==  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  0)  {  if(room  ==  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >=    0)    {    if(room  ==  0)  {	  	non-compiled	[CE]  ';'  expected	40	None	add
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  0  ||  room  >  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >  0  ||  room  >  0)  {	  if(len    >    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
74	[BUG]  [BUGGY]  if(len  >  0  ||  room  >  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  0  ||  room  >  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  0  ||  room  >  0)  {	  if(len    >    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  ==  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  ==  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  if(len    >    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
76	[BUG]  [BUGGY]  if(len  ==  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  ==  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  ==  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  if(len    >    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
77	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  if(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  if(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    <    SHORT_WRITE    ||    len    >    SHORT_WRITE)    {    if(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	63	None	add
78	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  If(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  If(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    <    SHORT_WRITE    ||    len    >    SHORT_WRITE)    {    If(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	63	None	add
79	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    <    SHORT_WRITE    ||    len    >    SHORT_WRITE)    {    if(room  >=  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	63	None	add
80	[BUG]  [BUGGY]  if(room  >  0)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }  [CE]  variable  len  is  already  defined  in  method  writeRaw(String)  [FE]              AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  0)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >  0)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }	  if(len    >    0)    {    int    len    =    text.length();    for(int    i    =    0;    i    <    len;    i++)    {    _flushBuffer();    }    	non-compiled	[CE]  variable  len  is  already  defined  in  method  writeRaw(String)	47	None	replace
81	[BUG]  [BUGGY]  if(room  <  len)  {  if(len  >  0)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len)  {  if(len  >  0)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  len)  {  if(len  >  0)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }	  if(len    >    0)    {    int    len    =    text.length();    for(int    i    =    0;    i    <    len;    i++)    {    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	47	None	replace
82	[BUG]  [BUGGY]  if(room  >=  len)  {  if(len  >  0)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(len  >  0)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  if(len  >  0)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }	  if(len    >    0)    {    int    len    =    text.length();    for(int    i    =    0;    i    <    len;    i++)    {    _flushBuffer();    }    	non-compiled	[CE]  ';'  expected	47	None	replace
83	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(len  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >=  len)  {  if(len  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(len    >    0)    {    int    len    =    text.length();    for(int    i    =    0;    i    <    len;    i++)    {    _flushBuffer();    }    	compilable	  [FE]  ComparisonFailure  	47	5	replace
84	[BUG]  [BUGGY]  if(room  >=  len)  {  if(len  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [FE]  ComparisonFailure  [FE]                    AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(len  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  if(len  >  0)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(len    >    0)    {    int    len    =    text.length();    for(int    i    =    0;    i    <    len;    i++)    {    _flushBuffer();    }    	compilable	  [FE]  ComparisonFailure  	47	5	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    if(len    >=    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
86	[BUG]  [BUGGY]  if(len  >=  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    if(len    >=    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
87	[BUG]  [BUGGY]  if(room  <  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  'void'  type  not  allowed  here  [FE]                      AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)>    _outputEnd)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  'void'  type  not  allowed  here	77	None	replace
88	[BUG]  [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTa  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTa  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTa	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)>    _outputEnd)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
89	[BUG]  [BUGGY]  if(room  <  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTa  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTa  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTa	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)>    _outputEnd)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
90	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  If(len  >  room)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE)  {  If(len  >  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE)  {  If(len  >  room)  {	  if(len    >    room)    {    If(len    >    room)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
91	[BUG]  [BUGGY]  if(len  <  =  room)  {  If(len  >  room)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  =  room)  {  If(len  >  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  =  room)  {  If(len  >  room)  {	  if(len    >    room)    {    If(len    >    room)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
92	[BUG]  [BUGGY]  if(len  >  _outputTail)  {  If(len  >  _outputEnd)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  _outputTail)  {  If(len  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  _outputTail)  {  If(len  >  _outputEnd)  {	  if(len    >    room)    {    If(len    >    room)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
93	[BUG]  [BUGGY]  if(len  >  0)  {  If(len  <  =  room)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  0)  {  If(len  <  =  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  0)  {  If(len  <  =  room)  {	  if(len    >    room)    {    If(len    >    room)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >  _outputEnd)  {	  if(len    >    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
95	[BUG]  [BUGGY]  if(room  >  _outputEnd)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >  _outputEnd)  {	  if(len    >    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
96	[BUG]  [BUGGY]  if(len  <  =  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  =  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  =  _outputEnd)  {	  if(len    >    _outputEnd)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
97	[BUG]  [BUGGY]  if(len  >  0)  {  int  len  =  text.length();  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  0)  {  int  len  =  text.length();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  0)  {  int  len  =  text.length();  }	  if(len    >    0)    {    int    len    =    text.length();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
98	[BUG]  [BUGGY]  Integer  len  =  text.length();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  Integer  len  =  text.length();  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	Integer  len  =  text.length();	  if(len    >    0)    {    int    len    =    text.length();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
99	[BUG]  [BUGGY]  if(len  ==  0)  {  int  len  =  text.length();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  ==  0)  {  int  len  =  text.length();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  ==  0)  {  int  len  =  text.length();  }	  if(len    >    0)    {    int    len    =    text.length();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
100	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >=    SHORT_WRITE)    {    if(room  >=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
101	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  >>  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  >>  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >=    SHORT_WRITE)    {    if(room  >>  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
102	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room!=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room!=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >=    SHORT_WRITE)    {    if(room!=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
103	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  ==  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  ==  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >=    SHORT_WRITE)    {    if(room  ==  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
104	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  If(room  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  If(room  >=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >=    SHORT_WRITE)    {    If(room  >=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
105	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
106	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  If(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  If(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    If(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
107	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    if(room  >=  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
108	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(room  <  SHORT_WRITE  ||  space  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(room  <  SHORT_WRITE  ||  space  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    if(room  <  SHORT_WRITE  ||  space  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    &&    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
110	[BUG]  [BUGGY]  if(len  >  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    &&    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >=  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >=  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    &&    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
112	[BUG]  [BUGGY]  if(len  >=  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >=  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >=  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    &&    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >=  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >=  0)  {	  if(room    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	41	1	replace
114	[BUG]  [BUGGY]  if(len  >=  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >=  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >=  0)  {	  if(room    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	41	1	replace
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  ==  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  ==  SHORT_WRITE)  {	  if(room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	58	1	replace
116	[BUG]  [BUGGY]  if(room  ==  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  ==  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  ==  SHORT_WRITE)  {	  if(room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	58	1	replace
117	[BUG]  [BUGGY]  if(room  <  len)  {  int  len  =  text.length();  if(len  >  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len)  {  int  len  =  text.length();  if(len  >  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  len)  {  int  len  =  text.length();  if(len  >  0)  {	  if(len    >    0)    {    int    len    =    text.length();    if(len    >    0)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
118	[BUG]  [BUGGY]  if(room  ==  len)  {  int  len  =  text.length();  if(len  >  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  ==  len)  {  int  len  =  text.length();  if(len  >  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  ==  len)  {  int  len  =  text.length();  if(len  >  0)  {	  if(len    >    0)    {    int    len    =    text.length();    if(len    >    0)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
119	[BUG]  [BUGGY]  if(room  >=  len)  {  int  len  =  text.length();  if(len  >  0)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  int  len  =  text.length();  if(len  >  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  int  len  =  text.length();  if(len  >  0)  {	  if(len    >    0)    {    int    len    =    text.length();    if(len    >    0)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
120	[BUG]  [BUGGY]  if(room  >  0)  {  int  len  =  text.length();  if(len  >  0)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  0)  {  int  len  =  text.length();  if(len  >  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >  0)  {  int  len  =  text.length();  if(len  >  0)  {	  if(len    >    0)    {    int    len    =    text.length();    if(len    >    0)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
121	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  room)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  room)  {	  if(len    >    room)    {    int    len    =    text.length();    if(len    >    room)    {    	non-compiled	[CE]  ';'  expected	55	None	replace
122	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >=  room)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >=  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >=  room)  {	  if(len    >    room)    {    int    len    =    text.length();    if(len    >    room)    {    	non-compiled	[CE]  ';'  expected	55	None	replace
123	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(len  ==  room)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(len  ==  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE)  {  int  len  =  text.length();  if(len  ==  room)  {	  if(len    >    room)    {    int    len    =    text.length();    if(len    >    room)    {    	non-compiled	[CE]  ';'  expected	55	None	replace
124	[BUG]  [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	29	None	add
125	[BUG]  [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  if(len  >  room)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  if(len  >  room)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    if(len  >  room)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	29	None	add
126	[BUG]  [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  if(len  >  room)  {  if(_outputTail!=  _outputEnd)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  if(len  >  room)  {  if(_outputTail!=  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    if(len  >  room)  {  if(_outputTail!=  _outputEnd)  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	29	None	add
127	[BUG]  [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  If(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  If(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    If(len  >  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	29	None	add
128	[BUG]  [BUGGY]  if(room  <  =  SHORT_WRITE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  =  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  =  SHORT_WRITE)  {	  if(len    <    =    SHORT_WRITE)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  ==  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  ==  SHORT_WRITE)  {	  if(len    <    =    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
130	[BUG]  [BUGGY]  if(len  ==  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  ==  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  ==  SHORT_WRITE)  {	  if(len    <    =    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >=  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >=  room)  {	  if(room    >=    len)    {    	compilable	  [FE]  AssertionFailedError  	54	1	replace
132	[BUG]  [BUGGY]  if(len  >=  room)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >=  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >=  room)  {	  if(room    >=    len)    {    	compilable	  [FE]  AssertionFailedError  	54	1	replace
133	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    &&    room    >    SHORT_WRITE)    {    if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
134	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  If(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  If(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    &&    room    >    SHORT_WRITE)    {    If(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
135	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  if(len  >=  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  if(len  >=  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    &&    room    >    SHORT_WRITE)    {    if(len  >=  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
136	[BUG]  [BUGGY]  _writer.write(text,  0,  room);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  _writer.write(text,  0,  room);  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	_writer.write(text,  0,  room);	  _writer.write(text,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
137	[BUG]  [BUGGY]  _writer.write(text,  0,  len,  _outputBuffer,  _outputTail);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  _writer.write(text,  0,  len,  _outputBuffer,  _outputTail);  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	_writer.write(text,  0,  len,  _outputBuffer,  _outputTail);	  _writer.write(text,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
138	[BUG]  [BUGGY]  _writer.write(text,  0,  len,  _outputBuffer);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  _writer.write(text,  0,  len,  _outputBuffer);  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	_writer.write(text,  0,  len,  _outputBuffer);	  _writer.write(text,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
139	[BUG]  [BUGGY]  _writer.write(text,  0,  len,  _outputTail);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  _writer.write(text,  0,  len,  _outputTail);  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	_writer.write(text,  0,  len,  _outputTail);	  _writer.write(text,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
140	[BUG]  [BUGGY]  if(room  <  0)  {  if(room  <  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  0)  {  if(room  <  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    <    0)    {    if(room  <  0)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
141	[BUG]  [BUGGY]  if(room  <  0)  {  If(room  <  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  0)  {  If(room  <  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    <    0)    {    If(room  <  0)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
142	[BUG]  [BUGGY]  if(room  <  0)  {  if(room  >=  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  0)  {  if(room  >=  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    <    0)    {    if(room  >=  0)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
143	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    ||    room    >    _outputEnd)    {    if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {	  	non-compiled	[CE]  ';'  expected	59	None	add
144	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  if(len  >=  SHORT_WRITE  ||  room  >  _outputEnd)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  if(len  >=  SHORT_WRITE  ||  room  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    ||    room    >    _outputEnd)    {    if(len  >=  SHORT_WRITE  ||  room  >  _outputEnd)  {	  	non-compiled	[CE]  ';'  expected	59	None	add
145	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  If(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  If(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    ||    room    >    _outputEnd)    {    If(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {	  	non-compiled	[CE]  ';'  expected	59	None	add
146	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  if(len  <  SHORT_WRITE  ||  space  >  _outputEnd)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  if(len  <  SHORT_WRITE  ||  space  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    ||    room    >    _outputEnd)    {    if(len  <  SHORT_WRITE  ||  space  >  _outputEnd)  {	  	non-compiled	[CE]  ';'  expected	59	None	add
147	[BUG]  [BUGGY]  _writer.writeRaw(text,  room);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  _writer.writeRaw(text,  room);  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	_writer.writeRaw(text,  room);	  _writer.writeRaw(text);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
148	[BUG]  [BUGGY]  _writer.writeRaw(text,  len);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  _writer.writeRaw(text,  len);  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	_writer.writeRaw(text,  len);	  _writer.writeRaw(text);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
149	[BUG]  [BUGGY]  if(room  <  len)  {  _writer.writeRaw(text);  }  else  {  _writer.writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len)  {  _writer.writeRaw(text);  }  else  {  _writer.writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  len)  {  _writer.writeRaw(text);  }  else  {  _writer.writeRawLong(text);  }	  _writer.writeRaw(text);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
150	[BUG]  [BUGGY]  if(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  if(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  if(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room)    {    if(room    <    SHORT_WRITE)    {    writeRawLong(text);    }    if(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	34	None	add
151	[BUG]  [BUGGY]  if(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  if(len  >  room)  {  if(room  >=  SHORT_WRITE)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  if(len  >  room)  {  if(room  >=  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room)    {    if(room    <    SHORT_WRITE)    {    writeRawLong(text);    }    if(len  >  room)  {  if(room  >=  SHORT_WRITE)  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	34	None	add
152	[BUG]  [BUGGY]  if(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  If(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  If(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room)    {    if(room    <    SHORT_WRITE)    {    writeRawLong(text);    }    If(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	34	None	add
153	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  space  >  SHORT_WRITE)  {  [CE]  cannot  find  symbol  space  [FE]              AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  ||  space  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE  ||  space  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    if(len    <    SHORT_WRITE    ||    space    >    SHORT_WRITE)    {    	non-compiled	[CE]  cannot  find  symbol  space	39	None	replace
154	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  <  len)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len)  {  if(room  <  len)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    <    len)    {    if(room  <  len)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
155	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  >=  len)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len)  {  if(room  >=  len)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    <    len)    {    if(room  >=  len)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
156	[BUG]  [BUGGY]  if(room  <  len)  {  If(room  <  len)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len)  {  If(room  <  len)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    <    len)    {    If(room  <  len)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
157	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }	  if(len    >    room)    {    if(room    <    SHORT_WRITE)    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
158	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  0)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >  0)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }	  if(len    >    room)    {    if(room    <    SHORT_WRITE)    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	35	1	replace
159	[BUG]  [BUGGY]  if(len  >  0)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  0)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  0)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }	  if(len    >    room)    {    if(room    <    SHORT_WRITE)    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	35	1	replace
160	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >=  len)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }	  if(len    >    room)    {    if(room    <    SHORT_WRITE)    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	35	1	replace
161	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }	  if(len    >    room)    {    if(room    <    SHORT_WRITE)    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	35	1	replace
162	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE)  {  writeRawLong(text);  }	  if(len    >    room)    {    if(room    <    SHORT_WRITE)    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputHead)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  <  SHORT_WRITE  ||  room  >  _outputHead)  {	  if(len    <    SHORT_WRITE    ||    room    >    _outputMaxContiguous)    {    	compilable	  [FE]  AssertionFailedError  	79	1	replace
164	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputHead)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputHead)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE  ||  room  >  _outputHead)  {	  if(len    <    SHORT_WRITE    ||    room    >    _outputMaxContiguous)    {    	compilable	  [FE]  AssertionFailedError  	79	1	replace
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputBuffer.length)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  <  SHORT_WRITE  ||  room  >  _outputBuffer.length)  {	  if(len    <    SHORT_WRITE    ||    room    >    _outputMaxContiguous)    {    	compilable	  [FE]  AssertionFailedError  	79	1	replace
166	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputBuffer.length)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >  _outputBuffer.length)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE  ||  room  >  _outputBuffer.length)  {	  if(len    <    SHORT_WRITE    ||    room    >    _outputMaxContiguous)    {    	compilable	  [FE]  AssertionFailedError  	79	1	replace
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  _outputTail)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >  _outputTail)  {	  if(len    >    room)    {    if(len    >    room)    {    	compilable	  [FE]  AssertionFailedError  	1	1	replace
168	[BUG]  [BUGGY]  if(len  >  _outputTail)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  _outputTail)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  _outputTail)  {	  if(len    >    room)    {    if(len    >    room)    {    	compilable	  [FE]  AssertionFailedError  	1	1	replace
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  ||  len  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  <  SHORT_WRITE  ||  len  >  _outputEnd)  {	  if(room    <    SHORT_WRITE    ||    len    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	64	1	replace
170	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  ||  len  >  _outputEnd)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  ||  len  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE  ||  len  >  _outputEnd)  {	  if(room    <    SHORT_WRITE    ||    len    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	64	1	replace
171	[BUG]  [BUGGY]  if(len  <  =  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  =  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  =  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    &&    room    >=    SHORT_WRITE)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
172	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	75	None	replace
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >=  len)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	75	1	replace
174	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  if(room  <  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	75	1	replace
175	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  len)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	75	None	replace
176	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  <  len)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	1	replace
177	[BUG]  [BUGGY]  if(room  <  len)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]                        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  len)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	1	replace
178	[BUG]  [BUGGY]  if(len  >  0)  {  ((  char)len).writeRaw(text);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  0)  {  ((  char)len).writeRaw(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  0)  {  ((  char)len).writeRaw(text);  }	  if(len    >    0)    {    ((    char)len).writeRaw(text);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
179	[BUG]  [BUGGY]  if(len  >  room)  {  ((  char)len).writeRaw(text);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  ((  char)len).writeRaw(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  room)  {  ((  char)len).writeRaw(text);  }	  if(len    >    0)    {    ((    char)len).writeRaw(text);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
180	[BUG]  [BUGGY]  ((  char)len).writeRaw(text);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  ((  char)len).writeRaw(text);  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	((  char)len).writeRaw(text);	  if(len    >    0)    {    ((    char)len).writeRaw(text);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
181	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]                  AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  0)  {  if(room  >=  len)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >  0)  {  if(room  >=  len)  {  writeRawLong(text);  }	  if(len    >    0)    {    ((    char)len).writeRaw(text);    	compilable	  [FE]  StringIndexOutOfBoundsException  	22	5	replace
182	[BUG]  [BUGGY]  if(len  >  0)  {  if(room  >=  len)  {  writeRawLong(text);  }  [FE]  StringIndexOutOfBoundsException  [FE]                  AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  0)  {  if(room  >=  len)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  0)  {  if(room  >=  len)  {  writeRawLong(text);  }	  if(len    >    0)    {    ((    char)len).writeRaw(text);    	compilable	  [FE]  StringIndexOutOfBoundsException  	22	5	replace
183	[BUG]  [BUGGY]  if(len  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(len  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(len  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    if(len  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
184	[BUG]  [BUGGY]  if(len  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  If(len  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  If(len  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    If(len  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
185	[BUG]  [BUGGY]  if(len  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(len  >  SHORT_WRITE  ||  space  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  if(len  >  SHORT_WRITE  ||  space  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    if(len  >  SHORT_WRITE  ||  space  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
186	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    <    SHORT_WRITE)    {    if(room  <  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	26	None	add
187	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  If(room  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE)  {  If(room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    <    SHORT_WRITE)    {    If(room  <  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	26	None	add
188	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    <    SHORT_WRITE)    {    if(room  >=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	26	None	add
189	[BUG]  [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  if(len  >  room  &&  room  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  if(len  >  room  &&  room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room    &&    room    <    SHORT_WRITE)    {    if(len  >  room  &&  room  <  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	71	None	add
190	[BUG]  [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  if(len  >  room  &&  room  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  if(len  >  room  &&  room  >=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room    &&    room    <    SHORT_WRITE)    {    if(len  >  room  &&  room  >=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	71	None	add
191	[BUG]  [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  If(len  >  room  &&  room  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  If(len  >  room  &&  room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room    &&    room    <    SHORT_WRITE)    {    If(len  >  room  &&  room  <  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	71	None	add
192	[BUG]  [BUGGY]  if(room  >  _outputMaxContiguous)  {  [CE]  cannot  find  symbol  _outputMaxContiguous  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  _outputMaxContiguous)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >  _outputMaxContiguous)  {	  if(len    >    _outputMaxContiguous)    {    	non-compiled	[CE]  cannot  find  symbol  _outputMaxContiguous	67	None	replace
193	[BUG]  [BUGGY]  if(room  >  _outputOutputMaxContiguous)  {  [CE]  cannot  find  symbol  _outputOutputMaxContiguous  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  _outputOutputMaxContiguous)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >  _outputOutputMaxContiguous)  {	  if(len    >    _outputMaxContiguous)    {    	non-compiled	[CE]  cannot  find  symbol  _outputOutputMaxContiguous	67	None	replace
194	[BUG]  [BUGGY]  if(room  >  len)  {  if(room  >  len)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  len)  {  if(room  >  len)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >    len)    {    if(room  >  len)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
195	[BUG]  [BUGGY]  if(room  >  len)  {  If(room  >  len)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  len)  {  If(room  >  len)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >    len)    {    If(room  >  len)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
196	[BUG]  [BUGGY]  if(room  >  len)  {  if(room  >  Len)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  len)  {  if(room  >  Len)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >    len)    {    if(room  >  Len)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
197	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    ||    room    >=    SHORT_WRITE)    {    if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
198	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  ||  room  >>  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  ||  room  >>  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    ||    room    >=    SHORT_WRITE)    {    if(len  <  SHORT_WRITE  ||  room  >>  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
199	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  ||  room!=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  ||  room!=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    ||    room    >=    SHORT_WRITE)    {    if(len  <  SHORT_WRITE  ||  room!=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
200	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  ||  room  ==  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  ||  room  ==  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    ||    room    >=    SHORT_WRITE)    {    if(len  <  SHORT_WRITE  ||  room  ==  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
201	[BUG]  [BUGGY]  if(len  ==  0)  {  if(len  ==  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  ==  0)  {  if(len  ==  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    ==    0)    {    if(len  ==  0)  {	  	non-compiled	[CE]  ';'  expected	24	None	add
202	[BUG]  [BUGGY]  if(len  ==  0)  {  if(len  >=  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  ==  0)  {  if(len  >=  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    ==    0)    {    if(len  >=  0)  {	  	non-compiled	[CE]  ';'  expected	24	None	add
203	[BUG]  [BUGGY]  if(len  ==  0)  {  if(len!=  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  ==  0)  {  if(len!=  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    ==    0)    {    if(len!=  0)  {	  	non-compiled	[CE]  ';'  expected	24	None	add
204	[BUG]  [BUGGY]  if(len  ==  0)  {  If(len  ==  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  ==  0)  {  If(len  ==  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    ==    0)    {    If(len  ==  0)  {	  	non-compiled	[CE]  ';'  expected	24	None	add
205	[BUG]  [BUGGY]  if(len  <  =  room  &&  room  <  SHORT_WRITE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  =  room  &&  room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  =  room  &&  room  <  SHORT_WRITE)  {	  if(len    <    =    room)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
206	[BUG]  [BUGGY]  if(len  <  =  room  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  =  room  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  =  room  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(len    <    =    room)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
207	[BUG]  [BUGGY]  if(len  <  =  len)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  =  len)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  =  len)  {	  if(len    <    =    room)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
208	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  <  SHORT_WRITE)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }	  if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	30	1	replace
209	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }	  if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	30	1	replace
210	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  if(room  >=  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >  room)  {  if(room  >=  _outputEnd)  {  writeRawLong(text);  }	  if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	30	1	replace
211	[BUG]  [BUGGY]  if(len  >  room)  {  if(room  >=  _outputEnd)  {  writeRawLong(text);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  if(room  >=  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  room)  {  if(room  >=  _outputEnd)  {  writeRawLong(text);  }	  if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	30	1	replace
212	[BUG]  [BUGGY]  readRaw(text);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  readRaw(text);  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	readRaw(text);	  if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
213	[BUG]  [BUGGY]  if(len  >  room)  {  If(len  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  If(len  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  room)  {  If(len  <  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    If(len    <    SHORT_WRITE)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
214	[BUG]  [BUGGY]  if(room  <  len)  {  If(len  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len)  {  If(len  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  len)  {  If(len  <  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    If(len    <    SHORT_WRITE)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
215	[BUG]  [BUGGY]  int  len  =  text.length()  -  _outputTail;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  int  len  =  text.length()  -  _outputTail;  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	int  len  =  text.length()  -  _outputTail;	  if(len    >    room)    {    int    len    =    text.length()    -    _outputTail;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
216	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length()  -  _outputTail;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE)  {  int  len  =  text.length()  -  _outputTail;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE)  {  int  len  =  text.length()  -  _outputTail;  }	  if(len    >    room)    {    int    len    =    text.length()    -    _outputTail;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
217	[BUG]  [BUGGY]  if(len  >  room)  {  int  len  =  text.length();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  int  len  =  text.length();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  room)  {  int  len  =  text.length();  }	  if(len    >    room)    {    int    len    =    text.length()    -    _outputTail;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
218	[BUG]  [BUGGY]  Integer  len  =  text.length()  -  _outputTail;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  Integer  len  =  text.length()  -  _outputTail;  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	Integer  len  =  text.length()  -  _outputTail;	  if(len    >    room)    {    int    len    =    text.length()    -    _outputTail;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
219	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >=  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  <  SHORT_WRITE  ||  room  >=  _outputEnd)  {	  if(len    <    SHORT_WRITE    ||    room    >    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
220	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >=  _outputEnd)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >=  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE  ||  room  >=  _outputEnd)  {	  if(len    <    SHORT_WRITE    ||    room    >    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
221	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  <  SHORT_WRITE  &&  room  >  _outputEnd)  {	  if(len    <    SHORT_WRITE    ||    room    >    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
222	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  _outputEnd)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE  &&  room  >  _outputEnd)  {	  if(len    <    SHORT_WRITE    ||    room    >    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
223	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  <  SHORT_WRITE  ||  room  >  _outputEnd)  {	  if(len    <    SHORT_WRITE    ||    room    >    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
224	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE  ||  room  >  _outputEnd)  {	  if(len    <    SHORT_WRITE    ||    room    >    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }	  if(len    >    room)    {    if(room    <    SHORT_WRITE)    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	35	1	replace
226	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }	  if(len    >    room)    {    if(room    <    SHORT_WRITE)    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	35	1	replace
227	[BUG]  [BUGGY]  if(len  <  =  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  =  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  =  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }	  if(len    >    room)    {    if(room    <    SHORT_WRITE)    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
228	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  HEX_CHARS)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  HEX_CHARS)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE  ||  room  >  HEX_CHARS)  {	  if(room    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	10	None	replace
229	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  _outputMaxContiguous)  {  [CE]  cannot  find  symbol  _outputMaxContiguous  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  _outputMaxContiguous)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE  ||  room  >  _outputMaxContiguous)  {	  if(room    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	non-compiled	[CE]  cannot  find  symbol  _outputMaxContiguous	10	None	replace
230	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  0  &&  room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >  0  &&  room  <  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	72	1	replace
231	[BUG]  [BUGGY]  if(room  >  0  &&  room  <  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  0  &&  room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >  0  &&  room  <  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	72	1	replace
232	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE  &&  len  >  room  &&  room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >=  SHORT_WRITE  &&  len  >  room  &&  room  <  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	72	1	replace
233	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE  &&  len  >  room  &&  room  <  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE  &&  len  >  room  &&  room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE  &&  len  >  room  &&  room  <  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	72	1	replace
234	[BUG]  [BUGGY]  if(room  >  0)  {  If(room  >  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  0)  {  If(room  >  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >    0)    {    If(room  >  0)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
235	[BUG]  [BUGGY]  if(room  >  0)  {  int  room  =  text.length();  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  0)  {  int  room  =  text.length();  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >    0)    {    int  room  =  text.length();	  	non-compiled	[CE]  ';'  expected	13	None	add
236	[BUG]  [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _out  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _out  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _out	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)>    _outputEnd)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
237	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _out  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _out  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _out	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)>    _outputEnd)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
238	[BUG]  [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)>  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)>    _outputEnd)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE  ||  room  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >=  SHORT_WRITE  ||  room  >  _outputEnd)  {	  if(len    <    SHORT_WRITE    ||    room    >    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
240	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE  ||  room  >  _outputEnd)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE  ||  room  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE  ||  room  >  _outputEnd)  {	  if(len    <    SHORT_WRITE    ||    room    >    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
241	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    &&    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
242	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    &&    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
243	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  &&  len  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  <  SHORT_WRITE  &&  len  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    &&    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
244	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  &&  len  >  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  &&  len  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE  &&  len  >  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    &&    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
245	[BUG]  [BUGGY]  if(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  if(len  >  room)  {  if(room  >  SHORT_WRITE)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  if(len  >  room)  {  if(room  >  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room)    {    if(room    <    SHORT_WRITE)    {    writeRawLong(text);    }    if(len  >  room)  {  if(room  >  SHORT_WRITE)  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	34	None	add
246	[BUG]  [BUGGY]  if(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  If(len  >  room)  {  if(room  >  SHORT_WRITE)  {  writeRawLong(text);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  if(room  <  SHORT_WRITE)  {  writeRawLong(text);  }  If(len  >  room)  {  if(room  >  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room)    {    if(room    <    SHORT_WRITE)    {    writeRawLong(text);    }    If(len  >  room)  {  if(room  >  SHORT_WRITE)  {  writeRawLong(text);  }	  	non-compiled	[CE]  ';'  expected	34	None	add
247	[BUG]  [BUGGY]  if(room  <  0  ||  room  >  _outputMaxContiguous)  {  [CE]  cannot  find  symbol  _outputMaxContiguous  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  0  ||  room  >  _outputMaxContiguous)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  0  ||  room  >  _outputMaxContiguous)  {	  if(room    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  _outputMaxContiguous	69	None	replace
248	[BUG]  [BUGGY]  if(room  <  0  ||  len  >  _outputMaxContiguous)  {  [CE]  cannot  find  symbol  _outputMaxContiguous  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  0  ||  len  >  _outputMaxContiguous)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  0  ||  len  >  _outputMaxContiguous)  {	  if(room    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  _outputMaxContiguous	69	None	replace
249	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  0)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  >  0)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	  if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	33	1	replace
250	[BUG]  [BUGGY]  if(len  >  0)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  0)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  0)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	  if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	33	1	replace
251	[BUG]  [BUGGY]  if(len  >  room)  {  if(_outputTail  >>  _outputEnd)  {  _flushBuffer();  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  if(_outputTail  >>  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  room)  {  if(_outputTail  >>  _outputEnd)  {  _flushBuffer();  }	  if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  incompatible  types	33	None	replace
252	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	75	None	replace
253	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE)  {  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  ';'  expected	75	None	replace
254	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	75	1	replace
255	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE)  {  if(room  >=  SHORT_WRITE)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	75	1	replace
256	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  if(len  >  room)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  if(len  >  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  if(len  >  room)  {	  if(len    >    0)    {    int    len    =    text.length();    for(int    i    =    0;    i    <    len;    i++)    {    if(len    >    0)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
257	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  if(len  >  room)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  if(len  >  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  if(len  >  room)  {	  if(len    >    0)    {    int    len    =    text.length();    for(int    i    =    0;    i    <    len;    i++)    {    if(len    >    0)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
258	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  if(len  >  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  if(len  >  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  if(len  >  0)  {	  if(len    >    0)    {    int    len    =    text.length();    for(int    i    =    0;    i    <    len;    i++)    {    if(len    >    0)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
259	[BUG]  [BUGGY]  if(room  ==  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  if(len  >  room)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  ==  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  if(len  >  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  ==  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  if(len  >  room)  {	  if(len    >    0)    {    int    len    =    text.length();    for(int    i    =    0;    i    <    len;    i++)    {    if(len    >    0)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
260	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  ||  len  >  _outputMaxContiguous)  {  [CE]  cannot  find  symbol  _outputMaxContiguous  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  ||  len  >  _outputMaxContiguous)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE  ||  len  >  _outputMaxContiguous)  {	  if(room    <    SHORT_WRITE    ||    len    >    SHORT_WRITE)    {    	non-compiled	[CE]  cannot  find  symbol  _outputMaxContiguous	64	None	replace
261	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  If(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  If(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    &&    room    >=    SHORT_WRITE)    {    If(len  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	73	None	add
262	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _out  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _out  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _out	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)!=    _outputEnd)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
263	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  'void'  type  not  allowed  here  [FE]                          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)!=    _outputEnd)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  'void'  type  not  allowed  here	78	None	replace
264	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _out  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _out  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _out	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)!=    _outputEnd)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
265	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  'void'  type  not  allowed  here  [FE]                              AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)!=    _outputEnd)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  'void'  type  not  allowed  here	78	None	replace
266	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  if(len    >    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
267	[BUG]  [BUGGY]  if(room  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >  SHORT_WRITE  ||  room  >  SHORT_WRITE)  {	  if(len    >    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
268	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {	  if(len    >    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
269	[BUG]  [BUGGY]  if(room  >  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >  SHORT_WRITE  ||  len  >  SHORT_WRITE)  {	  if(len    >    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
270	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  If(len  >  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  If(len  >  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE)  {  If(len  >  0)  {	  if(len    >    0)    {    If(len    >    0)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
271	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  If(room  >  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  If(room  >  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE)  {  If(room  >  0)  {	  if(len    >    0)    {    If(len    >    0)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
272	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }  [CE]  variable  len  is  already  defined  in  method  writeRaw(String)  [FE]              AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }	  if(len    >    0)    {    int    len    =    text.length();    for(int    i    =    0;    i    <    len;    i++)    {    _flushBuffer();    }    	non-compiled	[CE]  variable  len  is  already  defined  in  method  writeRaw(String)	47	None	replace
273	[BUG]  [BUGGY]  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }	  if(len    >    0)    {    int    len    =    text.length();    for(int    i    =    0;    i    <    len;    i++)    {    _flushBuffer();    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
274	[BUG]  [BUGGY]  if(room  >=  len)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }  [CE]  variable  len  is  already  defined  in  method  writeRaw(String)  [FE]                  AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }	  if(len    >    0)    {    int    len    =    text.length();    for(int    i    =    0;    i    <    len;    i++)    {    _flushBuffer();    }    	non-compiled	[CE]  variable  len  is  already  defined  in  method  writeRaw(String)	47	None	replace
275	[BUG]  [BUGGY]  if(room  >  len)  {  int  len  =  text.length();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  len)  {  int  len  =  text.length();  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >    len)    {    int  len  =  text.length();	  	non-compiled	[CE]  ';'  expected	65	None	add
276	[BUG]  [BUGGY]  if(room  <  =  len)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  =  len)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  =  len)  {	  if(len    <    =    room)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
277	[BUG]  [BUGGY]  if(len  <  =  _outputMaxContiguous)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  =  _outputMaxContiguous)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  =  _outputMaxContiguous)  {	  if(len    <    =    room)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
278	[BUG]  [BUGGY]  if(room  >=  0)  {  If(room  >=  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  0)  {  If(room  >=  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >=    0)    {    If(room  >=  0)  {	  	non-compiled	[CE]  ';'  expected	40	None	add
279	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  0)  {	  if(len    >    0)    {    int    len    =    text.length();    if(len    >    0)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
280	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  room)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  room)  {	  if(len    >    0)    {    int    len    =    text.length();    if(len    >    0)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
281	[BUG]  [BUGGY]  if(room  ==  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  0)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  ==  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  ==  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  0)  {	  if(len    >    0)    {    int    len    =    text.length();    if(len    >    0)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
282	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  room)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  if(len  >  room)  {	  if(len    >    0)    {    int    len    =    text.length();    if(len    >    0)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
283	[BUG]  [BUGGY]  if(room  >=  len)  {  if(room  <  len)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(room  <  len)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >=    len)    {    if(room  <  len)  {	  	non-compiled	[CE]  ';'  expected	53	None	add
284	[BUG]  [BUGGY]  if(room  >  SHORT_WRITE)  {  int  room  =  _outputEnd  -  _outputTail;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  SHORT_WRITE)  {  int  room  =  _outputEnd  -  _outputTail;  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >    SHORT_WRITE)    {    int  room  =  _outputEnd  -  _outputTail;	  	non-compiled	[CE]  ';'  expected	57	None	add
285	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(_outputTail  >=  _outputEnd)  {	  if(len    >    room)    {    int    len    =    text.length();    if(len    >    room)    {    	compilable	  [FE]  AssertionFailedError  	55	1	replace
286	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(_outputTail  >=  _outputEnd)  {	  if(len    >    room)    {    int    len    =    text.length();    if(len    >    room)    {    	compilable	  [FE]  AssertionFailedError  	55	1	replace
287	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  int  len  =  text.length();  if(len  >  room)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  int  len  =  text.length();  if(len  >  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(_outputTail  >=  _outputEnd)  {  int  len  =  text.length();  if(len  >  room)  {	  if(len    >    room)    {    int    len    =    text.length();    if(len    >    room)    {    	non-compiled	[CE]  ';'  expected	55	None	replace
288	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  If(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  If(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    ||    room    >=    SHORT_WRITE)    {    If(len  <  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
289	[BUG]  [BUGGY]  If(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  If(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	If(len  <  SHORT_WRITE  ||  room  >  _outputEnd)  {	  if(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    If(len    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	non-compiled	[CE]  ';'  expected	37	None	replace
290	[BUG]  [BUGGY]  _writer.writeRaw(text,  0,  room);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  _writer.writeRaw(text,  0,  room);  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	_writer.writeRaw(text,  0,  room);	  _writer.write(text,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
291	[BUG]  [BUGGY]  _writer.writeRaw(text,  0,  len);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  _writer.writeRaw(text,  0,  len);  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	_writer.writeRaw(text,  0,  len);	  _writer.write(text,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
292	[BUG]  [BUGGY]  if(room  >=  len)  {  int  len  =  text.length()  -  _outputTail;  [CE]  variable  len  is  already  defined  in  method  writeRaw(String)  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  int  len  =  text.length()  -  _outputTail;  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  int  len  =  text.length()  -  _outputTail;	  if(len    >    room)    {    int    len    =    text.length()    -    _outputTail;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  writeRaw(String)	56	None	replace
293	[BUG]  [BUGGY]  if(room  >  len)  {  int  len  =  text.length();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  len)  {  int  len  =  text.length();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >  len)  {  int  len  =  text.length();  }	  if(len    >    room)    {    int    len    =    text.length()    -    _outputTail;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
294	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  If(len  >  _outputEnd)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE)  {  If(len  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE)  {  If(len  >  _outputEnd)  {	  if(len    >    room)    {    If(len    >    room)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
295	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.writeRaw(text);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
296	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }	  _writer.writeRaw(text);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
297	[BUG]  [BUGGY]  if(room  >  0)  {  int  len  =  text.length();  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  0)  {  int  len  =  text.length();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >  0)  {  int  len  =  text.length();  }	  if(len    >    0)    {    int    len    =    text.length();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
298	[BUG]  [BUGGY]  if(len  >  room)  {  int  len  =  text.length();  [CE]  variable  len  is  already  defined  in  method  writeRaw(String)  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  int  len  =  text.length();  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  room)  {  int  len  =  text.length();	  if(len    >    0)    {    int    len    =    text.length();    	non-compiled	[CE]  variable  len  is  already  defined  in  method  writeRaw(String)	70	None	replace
299	[BUG]  [BUGGY]  if(len  >  room)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text);  }  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  >  room)  {  if(_outputTail  >>  _outputEnd)  {  writeRawLong(text);  }	  if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    	non-compiled	[CE]  incompatible  types	30	None	replace
300	[BUG]  [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)  ==  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)  ==  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)  ==  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)    ==    0)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
301	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)  ==  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  'void'  type  not  allowed  here  [FE]                      AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)  ==  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)  ==  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)    ==    0)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  'void'  type  not  allowed  here	76	None	replace
302	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)  ==  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)  ==  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)  ==  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)    ==    0)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
303	[BUG]  [BUGGY]  if(room  >  0)  {  ((  char)len).writeRaw(text);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  0)  {  ((  char)len).writeRaw(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >  0)  {  ((  char)len).writeRaw(text);  }	  if(len    >    0)    {    ((    char)len).writeRaw(text);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
304	[BUG]  [BUGGY]  if(room  >=  len)  {  ((  char)len).writeRaw(text);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  ((  char)len).writeRaw(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  ((  char)len).writeRaw(text);  }	  if(len    >    0)    {    ((    char)len).writeRaw(text);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
305	[BUG]  [BUGGY]  If(room  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  If(room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	If(room  <  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE)    {    If(len    <    SHORT_WRITE)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
306	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  ++i)  {  if(len  >  room)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  ++i)  {  if(len  >  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  ++i)  {  if(len  >  room)  {	  if(len    >    0)    {    int    len    =    text.length();    for(int    i    =    0;    i    <    len;    ++i)    {    if(len    >    0)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
307	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  ++i)  {  if(len  >  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  ++i)  {  if(len  >  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  ++i)  {  if(len  >  0)  {	  if(len    >    0)    {    int    len    =    text.length();    for(int    i    =    0;    i    <    len;    ++i)    {    if(len    >    0)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
308	[BUG]  [BUGGY]  if(room  ==  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  ++i)  {  if(len  >  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  ==  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  ++i)  {  if(len  >  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  ==  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  ++i)  {  if(len  >  0)  {	  if(len    >    0)    {    int    len    =    text.length();    for(int    i    =    0;    i    <    len;    ++i)    {    if(len    >    0)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
309	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  ++i)  {  if(len  >  room)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  ++i)  {  if(len  >  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  ++i)  {  if(len  >  room)  {	  if(len    >    0)    {    int    len    =    text.length();    for(int    i    =    0;    i    <    len;    ++i)    {    if(len    >    0)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
310	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    &&    room    >=    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	74	1	replace
311	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE  &&  room  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    &&    room    >=    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	74	1	replace
312	[BUG]  [BUGGY]  if(room  >  0)  {  if(room  >  0)  {  this.flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  0)  {  if(room  >  0)  {  this.flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >    0)    {    if(room  >  0)  {  this.flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  	non-compiled	[CE]  ';'  expected	13	None	add
313	[BUG]  [BUGGY]  if(room  >  0)  {  if(room  >  0)  {  this.flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  0)  {  if(room  >  0)  {  this.flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >    0)    {    if(room  >  0)  {  this.flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;	  	non-compiled	[CE]  ';'  expected	13	None	add
314	[BUG]  [BUGGY]  if(room  >  0)  {  if(room  >  0)  {  this.flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  0)  {  if(room  >  0)  {  this.flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >    0)    {    if(room  >  0)  {  this.flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  	non-compiled	[CE]  ';'  expected	13	None	add
315	[BUG]  [BUGGY]  if(room  >  0)  {  if(room  >  0)  {  this.flushBuffer();  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  0)  {  if(room  >  0)  {  this.flushBuffer();  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room    >    0)    {    if(room  >  0)  {  this.flushBuffer();  room  =  _outputEnd  -  _outputTail;  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  	non-compiled	[CE]  ';'  expected	13	None	add
316	[BUG]  [BUGGY]  if(room  >  0)  {  ((  char)len).writeRaw(text);  }  else  {  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  0)  {  ((  char)len).writeRaw(text);  }  else  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >  0)  {  ((  char)len).writeRaw(text);  }  else  {  writeRawLong(text);  }	  if(len    >    0)    {    ((    char)len).writeRaw(text);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
317	[BUG]  [BUGGY]  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
318	[BUG]  [BUGGY]  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
319	[BUG]  [BUGGY]  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    else    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
320	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(text,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
321	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  writeRawLong(text);  }	  _writer.write(text,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
322	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  _writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  _writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  _writer.write(text,  0,  len);  }  else  {  _writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(text,    0,    len);    	non-compiled	[CE]  	50	None	replace
323	[BUG]  [BUGGY]  if(room  >  0)  {  int  len  =  text.length()  -  _outputTail;  [CE]  variable  len  is  already  defined  in  method  writeRaw(String)  [FE]          AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  0)  {  int  len  =  text.length()  -  _outputTail;  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >  0)  {  int  len  =  text.length()  -  _outputTail;	  if(len    >    room)    {    int    len    =    text.length()    -    _outputTail;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  writeRaw(String)	56	None	replace
324	[BUG]  [BUGGY]  if(room  >  0)  {  int  len  =  text.length()  -  _outputTail;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  0)  {  int  len  =  text.length()  -  _outputTail;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >  0)  {  int  len  =  text.length()  -  _outputTail;  }	  if(len    >    room)    {    int    len    =    text.length()    -    _outputTail;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
325	[BUG]  [BUGGY]  if(room  <  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  _outputEnd)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)!=    _outputEnd)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
326	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  &&  space  >  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  SHORT_WRITE)  {  if(len  <  SHORT_WRITE  &&  space  >  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    <    SHORT_WRITE    &&    room    >    SHORT_WRITE)    {    if(len  <  SHORT_WRITE  &&  space  >  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
327	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >=  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	72	1	replace
328	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE  &&  room  <  SHORT_WRITE)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	72	1	replace
329	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  <  SHORT_WRITE  &&  room  >  room)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	72	1	replace
330	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  room)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE  &&  room  >  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE  &&  room  >  room)  {	  if(len    >    room    &&    room    <    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	72	1	replace
331	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >  room)  {	  if(len    >    room)    {    int    len    =    text.length();    if(len    >    room)    {    	compilable	  [FE]  AssertionFailedError  	55	1	replace
332	[BUG]  [BUGGY]  if(room  >  room)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  room)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >  room)  {	  if(len    >    room)    {    int    len    =    text.length();    if(len    >    room)    {    	compilable	  [FE]  AssertionFailedError  	55	1	replace
333	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  _writer.writeRaw(text);  }  else  {  writeRawLong(text);  }	  _writer.writeRaw(text);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
334	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >=  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >=    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
335	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE  ||  room  >=  SHORT_WRITE)  {	  if(len    <    SHORT_WRITE    ||    room    >=    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
336	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  writeRawLong(text);  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE)  {  writeRawLong(text);  }	  if(len    >    room)    {    if(room    <    SHORT_WRITE)    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
337	[BUG]  [BUGGY]  if(len  ==  0)  {  if(len  {  0)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  ==  0)  {  if(len  {  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    ==    0)    {    if(len  {  0)  {	  	non-compiled	[CE]  ')'  expected	24	None	add
338	[BUG]  [BUGGY]  if(room  >=  SHORT_WITE)  {  [CE]  cannot  find  symbol  SHORT_WITE  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WITE)  {	  if(len    <    SHORT_WRITE)    {    if(len    >=    SHORT_WRITE)    {    	non-compiled	[CE]  cannot  find  symbol  SHORT_WITE	6	None	replace
339	[BUG]  [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  if(len  >  space  &&  room  <  SHORT_WRITE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  >  room  &&  room  <  SHORT_WRITE)  {  if(len  >  space  &&  room  <  SHORT_WRITE)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len    >    room    &&    room    <    SHORT_WRITE)    {    if(len  >  space  &&  room  <  SHORT_WRITE)  {	  	non-compiled	[CE]  ';'  expected	71	None	add
340	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  <  SHORT_WRITE  ||  room  >  0)  {	  if(room    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
341	[BUG]  [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  SHORT_WRITE  ||  room  >  0)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  SHORT_WRITE  ||  room  >  0)  {	  if(room    <    SHORT_WRITE    ||    room    >    SHORT_WRITE)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
342	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }	  if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	30	1	replace
343	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }	  if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    	compilable	  [FE]  AssertionFailedError  	30	1	replace
344	[BUG]  [BUGGY]  if(len  <  =  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  =  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  =  room)  {  if(_outputTail  >=  _outputEnd)  {  writeRawLong(text);  }	  if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    writeRawLong(text);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
345	[BUG]  [BUGGY]  if(room  >  0)  {  int  len  =  text.length();  [CE]  variable  len  is  already  defined  in  method  writeRaw(String)  [FE]        AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >  0)  {  int  len  =  text.length();  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >  0)  {  int  len  =  text.length();	  if(len    >    0)    {    int    len    =    text.length();    	non-compiled	[CE]  variable  len  is  already  defined  in  method  writeRaw(String)	70	None	replace
346	[BUG]  [BUGGY]  if(room  <  len)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }  [CE]  variable  len  is  already  defined  in  method  writeRaw(String)  [FE]              AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  len)  {  int  len  =  text.length();  for(int  i  =  0;  i  <  len;  i++)  {  _flushBuffer();  }	  if(len    >    0)    {    int    len    =    text.length();    for(int    i    =    0;    i    <    len;    i++)    {    _flushBuffer();    }    	non-compiled	[CE]  variable  len  is  already  defined  in  method  writeRaw(String)	47	None	replace
347	[BUG]  [BUGGY]  if(len  <  space)  {  [CE]  cannot  find  symbol  space  [FE]            AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  space)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  space)  {	  if(len    >    room)    {    if(len    >    space)    {    	non-compiled	[CE]  cannot  find  symbol  space	3	None	replace
348	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE  &&  room  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >=  SHORT_WRITE  &&  room  >  _outputEnd)  {	  if(len    <    SHORT_WRITE    ||    room    >    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
349	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE  &&  room  >  _outputEnd)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  SHORT_WRITE  &&  room  >  _outputEnd)  {  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  SHORT_WRITE  &&  room  >  _outputEnd)  {	  if(len    <    SHORT_WRITE    ||    room    >    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
350	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(len  <  SHORT_WRITE)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	  if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	33	1	replace
351	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(len  <  SHORT_WRITE)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(len  <  SHORT_WRITE)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	  if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	33	1	replace
352	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	  if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	33	1	replace
353	[BUG]  [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  >=  len)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	  if(len    >    room)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	compilable	  [FE]  AssertionFailedError  	33	1	replace
354	[BUG]  [BUGGY]  if(room  <  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  'void'  type  not  allowed  here  [FE]                    AssertionFailedError      [CONTEXT]      public  void  writeRaw(String  text)  throws  IOException  {  int  len  =  text.length();  int  room  =  _outputEnd  -  _outputTail;      [BUGGY]  if(room  <  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  writeRawLong(text);  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	if(room  <  len)  {  if(text.getChars(0,  len,  _outputBuffer,  _outputTail)!=  0)  {  text.getChars(0,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  if(room    >=    len)    {    if(text.getChars(0,    len,    _outputBuffer,    _outputTail)    ==    0)    {    text.getChars(0,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  'void'  type  not  allowed  here	76	None	replace
