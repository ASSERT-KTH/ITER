bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));  [CE]  'void'  type  not  allowed  here  [FE]    StackOverflowError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));	  writeRaw(text);    	non-compiled	[CE]  'void'  type  not  allowed  here	2	None	replace
2	[BUG]  [BUGGY]  _writeRaw(text,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writeRaw(text,  _outputBuffer);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text,  _outputBuffer);	  _writeRaw(text);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
3	[BUG]  [BUGGY]  _writeRaw(text,  len);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writeRaw(text,  len);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text,  len);	  _writeRaw(text);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
4	[BUG]  [BUGGY]  _writeRaw(text,  _outputTail);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writeRaw(text,  _outputTail);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text,  _outputTail);	  _writeRaw(text);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text);  _writer.write(text);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);    _writer.write(text);	  	compilable	  [FE]  AssertionFailedError  	10	1	add
6	[BUG]  [BUGGY]  _writer.write(text);  _writer.write(text);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text);  _writer.write(text);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);    _writer.write(text);	  	compilable	  [FE]  AssertionFailedError  	10	1	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
8	[BUG]  [BUGGY]  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
9	[BUG]  [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]        AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);    if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	10	None	add
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
11	[BUG]  [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
12	[BUG]  [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  Writer();  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  Writer();  }  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);    if(_writer!=  null)  {  if(_writer!=  null)  {  _writer  =  new  Writer();  }	  	non-compiled	[CE]  ';'  expected	10	None	add
13	[BUG]  [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer);	  Writer    w    =    _writer.createWriteRaw(text);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
14	[BUG]  [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  _outputTail);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  _outputTail);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.createWriteRaw(text,  _outputTail);	  Writer    w    =    _writer.createWriteRaw(text);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
15	[BUG]  [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  len);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  len);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.createWriteRaw(text,  len);	  Writer    w    =    _writer.createWriteRaw(text);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
16	[BUG]  [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  room);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  room);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.createWriteRaw(text,  room);	  Writer    w    =    _writer.createWriteRaw(text);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
17	[BUG]  [BUGGY]      TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  TextUtilities  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]      TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	        TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);	  	non-compiled	[CE]  cannot  find  symbol  TextUtilities	7	None	add
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]      _writer.write(text,  0,  len);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	        _writer.write(text,  0,  len);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
19	[BUG]  [BUGGY]      _writer.write(text,  0,  len);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]      _writer.write(text,  0,  len);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	        _writer.write(text,  0,  len);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
20	[BUG]  [BUGGY]      _writer.writeRaw(text,  0,  len);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]      _writer.writeRaw(text,  0,  len);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	        _writer.writeRaw(text,  0,  len);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
21	[BUG]  [BUGGY]  _writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  [CE]  'void'  type  not  allowed  here  [FE]        AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	9	None	replace
22	[BUG]  [BUGGY]  writeRaw(_writer.getChars(0,  len,  _outputBuffer,  _outputTail));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(_writer.getChars(0,  len,  _outputBuffer,  _outputTail));  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(_writer.getChars(0,  len,  _outputBuffer,  _outputTail));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
23	[BUG]  [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]            AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd));  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	9	None	replace
24	[BUG]  [BUGGY]  _writer.write(text,  _outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  write(String,char[],int)  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text,  _outputBuffer,  _outputTail);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text,  _outputBuffer,  _outputTail);	  _writer.write(text);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,char[],int)	11	None	replace
25	[BUG]  [BUGGY]  _writer.writeRaw(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.writeRaw(text,  _outputBuffer,  _outputTail);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  _outputBuffer,  _outputTail);	  _writer.write(text);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _verifyValueWrite(   "write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_verifyValueWrite(   "write    text    value   ");    _verifyValueWrite( "write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	4	1	add
27	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _verifyValueWrite(   "write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite(   "write    text    value   ");    _verifyValueWrite( "write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	4	1	add
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _verifyValueWrite(   "write  text  value   ");  _verifyValueWrite( ",write  text  value   ");  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_verifyValueWrite(   "write    text    value   ");    _verifyValueWrite( ",write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	4	1	add
29	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value   ");  _verifyValueWrite( ",write  text  value   ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _verifyValueWrite(   "write  text  value   ");  _verifyValueWrite( ",write  text  value   ");  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite(   "write    text    value   ");    _verifyValueWrite( ",write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	4	1	add
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _flushBuffer();  _flushBuffer();  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_flushBuffer();    _flushBuffer();	  	compilable	  [FE]  AssertionFailedError  	13	1	add
31	[BUG]  [BUGGY]  _flushBuffer();  _flushBuffer();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _flushBuffer();  _flushBuffer();  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();    _flushBuffer();	  	compilable	  [FE]  AssertionFailedError  	13	1	add
32	[BUG]  [BUGGY]  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  [CE]  'void'  type  not  allowed  here  [FE]      AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();    _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));	  	non-compiled	[CE]  'void'  type  not  allowed  here	13	None	add
33	[BUG]  [BUGGY]  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]        AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();    _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));	  	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	13	None	add
34	[BUG]  [BUGGY]  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputTail);  [CE]  'void'  type  not  allowed  here  [FE]          AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputTail);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();    _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputTail);	  	non-compiled	[CE]  'void'  type  not  allowed  here	13	None	add
35	[BUG]  [BUGGY]  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();    _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));	  	non-compiled	[CE]  'void'  type  not  allowed  here	13	None	add
36	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text);  writeRaw(text);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text);    writeRaw(text);	  	compilable	  [FE]  StackOverflowError  	1	1	add
37	[BUG]  [BUGGY]  writeRaw(text);  writeRaw(text);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text);  writeRaw(text);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);    writeRaw(text);	  	compilable	  [FE]  StackOverflowError  	1	1	add
38	[BUG]  [BUGGY]  writeRaw(text);  _writer.writeRaw(text);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text);  _writer.writeRaw(text);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);    _writer.writeRaw(text);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
39	[BUG]  [BUGGY]  writeRaw(text);  _writeRaw(text);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text);  _writeRaw(text);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);    _writeRaw(text);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
40	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text);  _writer.write(text);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text);    _writer.write(text);	  	compilable	  [FE]  StackOverflowError  	1	1	add
41	[BUG]  [BUGGY]  writeRaw(text);  _writer.write(text);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text);  _writer.write(text);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);    _writer.write(text);	  	compilable	  [FE]  StackOverflowError  	1	1	add
42	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text);  _writer.write(text,  0,  len);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text);    _writer.write(text,  0,  len);	  	compilable	  [FE]  StackOverflowError  	1	1	add
43	[BUG]  [BUGGY]  writeRaw(text);  _writer.write(text,  0,  len);  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text);  _writer.write(text,  0,  len);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);    _writer.write(text,  0,  len);	  	compilable	  [FE]  StackOverflowError  	1	1	add
44	[BUG]  [BUGGY]  _writer.writeRaw(text,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.writeRaw(text,  _outputBuffer);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  _outputBuffer);	  _writer.writeRaw(text);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
45	[BUG]  [BUGGY]  _writer.writeRaw(text,  len);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.writeRaw(text,  len);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  len);	  _writer.writeRaw(text);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
46	[BUG]  [BUGGY]  _writer.writeRaw(text,  room);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.writeRaw(text,  room);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  room);	  _writer.writeRaw(text);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
47	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  room);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,int)  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _verifyValueWrite( "write  text  value ",  room);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value ",  room);	  _verifyValueWrite(   "write    text    value   ");    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,int)	5	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _verifyValueWrite( "write  text  value. ");  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_verifyValueWrite( "write  text  value. ");	  _verifyValueWrite(   "write    text    value   ");    	compilable	  [FE]  AssertionFailedError  	5	1	replace
49	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _verifyValueWrite( "write  text  value. ");  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value. ");	  _verifyValueWrite(   "write    text    value   ");    	compilable	  [FE]  AssertionFailedError  	5	1	replace
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _verifyValueWrite( "write  text  value "  +  text);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_verifyValueWrite( "write  text  value "  +  text);	  _verifyValueWrite(   "write    text    value   ");    	compilable	  [FE]  AssertionFailedError  	5	1	replace
51	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value "  +  text);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _verifyValueWrite( "write  text  value "  +  text);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value "  +  text);	  _verifyValueWrite(   "write    text    value   ");    	compilable	  [FE]  AssertionFailedError  	5	1	replace
52	[BUG]  [BUGGY]      TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);  return;  [CE]  cannot  find  symbol  TextUtilities  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]      TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);  return;  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	        TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);  return;	  	non-compiled	[CE]  cannot  find  symbol  TextUtilities	7	None	add
53	[BUG]  [BUGGY]      TextUtilities.writeRaw(text,  null);  [CE]  cannot  find  symbol  TextUtilities  [FE]      AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]      TextUtilities.writeRaw(text,  null);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	        TextUtilities.writeRaw(text,  null);	  	non-compiled	[CE]  cannot  find  symbol  TextUtilities	7	None	add
54	[BUG]  [BUGGY]  writeRaw(text);  Writer  text  =  _writer.createText(text);  [CE]  variable  text  is  already  defined  in  method  writeRaw(String)  [FE]    StackOverflowError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text);  Writer  text  =  _writer.createText(text);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);    Writer  text  =  _writer.createText(text);	  	non-compiled	[CE]  variable  text  is  already  defined  in  method  writeRaw(String)	1	None	add
55	[BUG]  [BUGGY]  writeRaw(text);  Writer  writer  =  _writer.getWriter(text);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text);  Writer  writer  =  _writer.getWriter(text);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);    Writer  writer  =  _writer.getWriter(text);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
56	[BUG]  [BUGGY]  writeRaw(text);  Writer  writer  =  _writer.createWriter(text);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text);  Writer  writer  =  _writer.createWriter(text);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);    Writer  writer  =  _writer.createWriter(text);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
57	[BUG]  [BUGGY]  _writer.write(text);  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  TextUtilities  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text);  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);    TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);	  	non-compiled	[CE]  cannot  find  symbol  TextUtilities	10	None	add
58	[BUG]  [BUGGY]  _writer.write(text);  TextUtilities.writeString(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  TextUtilities  [FE]      AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text);  TextUtilities.writeString(text,  _outputBuffer,  _outputTail);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);    TextUtilities.writeString(text,  _outputBuffer,  _outputTail);	  	non-compiled	[CE]  cannot  find  symbol  TextUtilities	10	None	add
59	[BUG]  [BUGGY]  _writer.write(text);  TextUtilities.writeRaw(text,  _outputTail);  [CE]  cannot  find  symbol  TextUtilities  [FE]        AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text);  TextUtilities.writeRaw(text,  _outputTail);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);    TextUtilities.writeRaw(text,  _outputTail);	  	non-compiled	[CE]  cannot  find  symbol  TextUtilities	10	None	add
60	[BUG]  [BUGGY]  _flushBuffer(buffer,  _outputTail);  [CE]  cannot  find  symbol  buffer  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _flushBuffer(buffer,  _outputTail);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer(buffer,  _outputTail);	  _flushBuffer();    	non-compiled	[CE]  cannot  find  symbol  buffer	14	None	replace
61	[BUG]  [BUGGY]  writeRaw(text,  _outputBuffer);  [CE]  no  suitable  method  found  for  writeRaw(String,char[])  [FE]    StackOverflowError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text,  _outputBuffer);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text,  _outputBuffer);	  writeRaw(text);    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(String,char[])	2	None	replace
62	[BUG]  [BUGGY]  writeRaw(text,  _outputTail);  [CE]  no  suitable  method  found  for  writeRaw(String,int)  [FE]      StackOverflowError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text,  _outputTail);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text,  _outputTail);	  writeRaw(text);    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(String,int)	2	None	replace
63	[BUG]  [BUGGY]  writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  getChars(int,int)  [FE]        StackOverflowError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail);	  writeRaw(text);    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int)	2	None	replace
64	[BUG]  [BUGGY]  _flushBuffer();  _writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  getChars(int,int)  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _flushBuffer();  _writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();    _writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail);	  	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int)	13	None	add
65	[BUG]  [BUGGY]  Writer  text  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail);  [CE]  variable  text  is  already  defined  in  method  writeRaw(String)  [FE]        AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  Writer  text  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  text  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail);	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  variable  text  is  already  defined  in  method  writeRaw(String)	9	None	replace
66	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value   ");  _verifyValueWrite( "write  text  value "));  [CE]  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _verifyValueWrite(   "write  text  value   ");  _verifyValueWrite( "write  text  value "));  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite(   "write    text    value   ");    _verifyValueWrite( "write  text  value "));	  	non-compiled	[CE]  	4	None	add
67	[BUG]  [BUGGY]  _writer.writeRaw(text,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.writeRaw(text,  null);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  null);	  _writer.writeRaw(text);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
68	[BUG]  [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  [CE]  'void'  type  not  allowed  here  [FE]              AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));	  _writeRaw(text);    	non-compiled	[CE]  'void'  type  not  allowed  here	6	None	replace
69	[BUG]  [BUGGY]  _writeRaw(text,  room);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writeRaw(text,  room);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text,  room);	  _writeRaw(text);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
71	[BUG]  [BUGGY]  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
73	[BUG]  [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
75	[BUG]  [BUGGY]  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
76	[BUG]  [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]          AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);    if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	10	None	add
77	[BUG]  [BUGGY]  Writer  w  =  text.createWriteRaw(_writer);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  Writer  w  =  text.createWriteRaw(_writer);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  text.createWriteRaw(_writer);	  Writer    w    =    _writer.createWriteRaw(text);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
78	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	text.getChars(0,  len,  _outputBuffer,  _outputTail);	      	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
79	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,  len,  _outputBuffer,  _outputTail);	      	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
80	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;	      	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
81	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;	      	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
82	[BUG]  [BUGGY]  _writeRaw( "write  text  value ");  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writeRaw( "write  text  value ");  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw( "write  text  value ");	  _verifyValueWrite(   "write    text    value   ");    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
83	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  text);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,String)  [FE]      AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _verifyValueWrite( "write  text  value ",  text);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value ",  text);	  _verifyValueWrite(   "write    text    value   ");    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,String)	5	None	replace
84	[BUG]  [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  [CE]  'void'  type  not  allowed  here  [FE]    StackOverflowError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));	  writeRaw(text);    	non-compiled	[CE]  'void'  type  not  allowed  here	2	None	replace
85	[BUG]  [BUGGY]  writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail));  [CE]  'void'  type  not  allowed  here  [FE]      StackOverflowError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail));  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail));	  writeRaw(text);    	non-compiled	[CE]  'void'  type  not  allowed  here	2	None	replace
86	[BUG]  [BUGGY]  _writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail));  [CE]  'void'  type  not  allowed  here  [FE]        AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail));  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	9	None	replace
87	[BUG]  [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]          AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	9	None	replace
88	[BUG]  [BUGGY]  _writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  [CE]  'void'  type  not  allowed  here  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));	  _writer.write(text);    	non-compiled	[CE]  'void'  type  not  allowed  here	11	None	replace
89	[BUG]  [BUGGY]  _writer.write(text.substring(0,  len),  _outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  write(String,char[],int)  [FE]      AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writer.write(text.substring(0,  len),  _outputBuffer,  _outputTail);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text.substring(0,  len),  _outputBuffer,  _outputTail);	  _writer.write(text);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,char[],int)	11	None	replace
90	[BUG]  [BUGGY]  writeRaw(text);  Writer  w  =  _writer.createWriter(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text);  Writer  w  =  _writer.createWriter(text,  _outputBuffer,  _outputTail);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);    Writer  w  =  _writer.createWriter(text,  _outputBuffer,  _outputTail);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
91	[BUG]  [BUGGY]  writeRaw(text);  Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text);  Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputTail);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);    Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputTail);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
92	[BUG]  [BUGGY]  writeRaw(text);  Writer  w  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  writeRaw(text);  Writer  w  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail);  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);    Writer  w  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
93	[BUG]  [BUGGY]  _writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail));  [CE]  'void'  type  not  allowed  here  [FE]              AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail));  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail));	  _writeRaw(text);    	non-compiled	[CE]  'void'  type  not  allowed  here	6	None	replace
94	[BUG]  [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  [CE]  'void'  type  not  allowed  here  [FE]                AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));	  _writeRaw(text);    	non-compiled	[CE]  'void'  type  not  allowed  here	6	None	replace
95	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value   ");  if(_verifyValueWrite( "write  text  value   ");  [CE]  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _verifyValueWrite(   "write  text  value   ");  if(_verifyValueWrite( "write  text  value   ");  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite(   "write    text    value   ");    if(_verifyValueWrite( "write  text  value   ");	  	non-compiled	[CE]  	4	None	add
96	[BUG]  [BUGGY]      TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);  room  =  0;  [CE]  cannot  find  symbol  TextUtilities  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]      TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);  room  =  0;  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	        TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);  room  =  0;	  	non-compiled	[CE]  cannot  find  symbol  TextUtilities	7	None	add
97	[BUG]  [BUGGY]  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  [CE]  'void'  type  not  allowed  here  [FE]    AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();    _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));	  	non-compiled	[CE]  'void'  type  not  allowed  here	13	None	add
98	[BUG]  [BUGGY]  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  [CE]  'void'  type  not  allowed  here  [FE]      AssertionFailedError    [CONTEXT]    if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {    [BUGGY]  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  [BUGGY]    }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();    _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));	  	non-compiled	[CE]  'void'  type  not  allowed  here	13	None	add
