bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  _writeRaw(text);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value ");  _writeRaw(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value ");  _writeRaw(text);	  writeRaw(text);    _writeRaw(text);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
2	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  [CE]  [FE]              StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value ");  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value ");  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));	  writeRaw(text);    _writeRaw(text);    	non-compiled	[CE]  	39	None	replace
3	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  [CE]  [FE]                StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value ");  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value ");  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));	  writeRaw(text);    _writeRaw(text);    	non-compiled	[CE]  	39	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text,  0,  room);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text,  0,  room);	          _writer.write(text,    0,    len);    	compilable	  [FE]  AssertionFailedError  	19	1	replace
5	[BUG]  [BUGGY]  _writer.write(text,  0,  room);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text,  0,  room);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text,  0,  room);	          _writer.write(text,    0,    len);    	compilable	  [FE]  AssertionFailedError  	19	1	replace
6	[BUG]  [BUGGY]  _writer.write(text,  0,  len,  _outputBuffer);  [CE]  no  suitable  method  found  for  write(String,int,int,char[])  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text,  0,  len,  _outputBuffer);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text,  0,  len,  _outputBuffer);	          _writer.write(text,    0,    len);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int,int,char[])	19	None	replace
7	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text,  0,  len  +  1);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text,  0,  len  +  1);	          _writer.write(text,    0,    len);    	compilable	  [FE]  StringIndexOutOfBoundsException  	19	1	replace
8	[BUG]  [BUGGY]  _writer.write(text,  0,  len  +  1);  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text,  0,  len  +  1);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text,  0,  len  +  1);	          _writer.write(text,    0,    len);    	compilable	  [FE]  StringIndexOutOfBoundsException  	19	1	replace
9	[BUG]  [BUGGY]  writeRaw(text);    _writer.write(text);  _writeRaw(text);  _writer.write(text);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text);  _writeRaw(text);  _writer.write(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        _writer.write(text);    _writeRaw(text);  _writer.write(text);	  	non-compiled	[CE]  cannot  find  symbol	40	None	add
10	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text);  _writer.write(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text);        _writer.write(text);    _writer.write(text);	  	compilable	  [FE]  StackOverflowError  	40	1	add
11	[BUG]  [BUGGY]  writeRaw(text);    _writer.write(text);  _writer.write(text);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text);  _writer.write(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        _writer.write(text);    _writer.write(text);	  	compilable	  [FE]  StackOverflowError  	40	1	add
12	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text);  writeRaw(text);  _writer.write(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text);        _writer.write(text);    writeRaw(text);  _writer.write(text);	  	compilable	  [FE]  StackOverflowError  	40	1	add
13	[BUG]  [BUGGY]  writeRaw(text);    _writer.write(text);  writeRaw(text);  _writer.write(text);  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text);  writeRaw(text);  _writer.write(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        _writer.write(text);    writeRaw(text);  _writer.write(text);	  	compilable	  [FE]  StackOverflowError  	40	1	add
14	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text);  _writer.write(text);  _writer.write(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text);        _writer.write(text);    _writer.write(text);  _writer.write(text);	  	compilable	  [FE]  StackOverflowError  	40	1	add
15	[BUG]  [BUGGY]  writeRaw(text);    _writer.write(text);  _writer.write(text);  _writer.write(text);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text);  _writer.write(text);  _writer.write(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        _writer.write(text);    _writer.write(text);  _writer.write(text);	  	compilable	  [FE]  StackOverflowError  	40	1	add
16	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text);  _verifyValueWrite( "write  text  value ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text);        _writer.write(text);    _verifyValueWrite( "write  text  value ");	  	compilable	  [FE]  StackOverflowError  	40	1	add
17	[BUG]  [BUGGY]  writeRaw(text);    _writer.write(text);  _verifyValueWrite( "write  text  value ");  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text);  _verifyValueWrite( "write  text  value ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        _writer.write(text);    _verifyValueWrite( "write  text  value ");	  	compilable	  [FE]  StackOverflowError  	40	1	add
18	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  [CE]  'void'  type  not  allowed  here  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }	  _flushBuffer();    _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	32	None	replace
19	[BUG]  [BUGGY]  if(_writer!=  null)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_writer!=  null)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_writer!=  null)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }	  _flushBuffer();    _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	32	None	replace
20	[BUG]  [BUGGY]  writeRaw(room);  _writer.writeRaw(text);  [CE]  no  suitable  method  found  for  writeRaw(int)  [FE]          StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(room);  _writer.writeRaw(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(room);  _writer.writeRaw(text);	  writeRaw(text);    _writer.writeRaw(text);    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(int)	38	None	replace
21	[BUG]  [BUGGY]  Writer  writer  =  _writer.createRaw(text);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  writer  =  _writer.createRaw(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  writer  =  _writer.createRaw(text);	  writeRaw(text);    _writer.writeRaw(text);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
22	[BUG]  [BUGGY]  writeRaw(text);  _writer.writeRaw(room);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);  _writer.writeRaw(room);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);  _writer.writeRaw(room);	  writeRaw(text);    _writer.writeRaw(text);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
23	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value "  +  text,  room);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,int)  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value "  +  text,  room);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value "  +  text,  room);	  _verifyValueWrite(   "write    text    value   ",    room);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,int)	47	None	replace
24	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  room,  _outputBuffer);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,int,char[])  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value ",  room,  _outputBuffer);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value ",  room,  _outputBuffer);	  _verifyValueWrite(   "write    text    value   ",    room);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,int,char[])	47	None	replace
25	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  room,  status);  [CE]  cannot  find  symbol  status  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value ",  room,  status);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value ",  room,  status);	  _verifyValueWrite(   "write    text    value   ",    room);    	non-compiled	[CE]  cannot  find  symbol  status	47	None	replace
26	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _outputTail  +=  len;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_outputTail  +=  len;	  text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    	compilable	  [FE]  IndexOutOfBoundsException  	81	1	replace
27	[BUG]  [BUGGY]  _outputTail  +=  len;  [FE]  IndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _outputTail  +=  len;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_outputTail  +=  len;	  text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    	compilable	  [FE]  IndexOutOfBoundsException  	81	1	replace
28	[BUG]  [BUGGY]  _writer.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;	  text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
29	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(_outputBuffer,  0,  len);  _outputTail  +=  len;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(_outputBuffer,  0,  len);  _outputTail  +=  len;	  text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    	compilable	  [FE]  IndexOutOfBoundsException  	81	1	replace
30	[BUG]  [BUGGY]  _writer.write(_outputBuffer,  0,  len);  _outputTail  +=  len;  [FE]  IndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(_outputBuffer,  0,  len);  _outputTail  +=  len;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(_outputBuffer,  0,  len);  _outputTail  +=  len;	  text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    	compilable	  [FE]  IndexOutOfBoundsException  	81	1	replace
31	[BUG]  [BUGGY]  _writer.write(_outputBuffer,  _outputTail);  _outputTail  +=  len;  [CE]  no  suitable  method  found  for  write(char[],int)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(_outputBuffer,  _outputTail);  _outputTail  +=  len;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(_outputBuffer,  _outputTail);  _outputTail  +=  len;	  text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    	non-compiled	[CE]  no  suitable  method  found  for  write(char[],int)	81	None	replace
32	[BUG]  [BUGGY]  Writer  w  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail);	  writeRaw(text);    Writer    w    =    _writer.createWriteRoot(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
33	[BUG]  [BUGGY]  writeRaw(room);  Writer  w  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  writeRaw(int)  [FE]              StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(room);  Writer  w  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(room);  Writer  w  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail);	  writeRaw(text);    Writer    w    =    _writer.createWriteRoot(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(int)	92	None	replace
34	[BUG]  [BUGGY]  _writer  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail);  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]                StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail);	  writeRaw(text);    Writer    w    =    _writer.createWriteRoot(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	92	None	replace
35	[BUG]  [BUGGY]  w  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  w  [FE]                  StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  w  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	w  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail);	  writeRaw(text);    Writer    w    =    _writer.createWriteRoot(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  w	92	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer();    _flushBuffer();  _flushBuffer();  _flushBuffer();  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_flushBuffer();        _flushBuffer();    _flushBuffer();  _flushBuffer();	  	compilable	  [FE]  AssertionFailedError  	30	1	add
37	[BUG]  [BUGGY]  _flushBuffer();    _flushBuffer();  _flushBuffer();  _flushBuffer();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer();    _flushBuffer();  _flushBuffer();  _flushBuffer();  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();        _flushBuffer();    _flushBuffer();  _flushBuffer();	  	compilable	  [FE]  AssertionFailedError  	30	1	add
38	[BUG]  [BUGGY]  _flushBuffer();    _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  _flushBuffer();  [CE]  'void'  type  not  allowed  here  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer();    _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  _flushBuffer();  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();        _flushBuffer();    _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  _flushBuffer();	  	non-compiled	[CE]  'void'  type  not  allowed  here	30	None	add
39	[BUG]  [BUGGY]  _flushBuffer();    _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  [CE]  'void'  type  not  allowed  here  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer();    _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();        _flushBuffer();    _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));	  	non-compiled	[CE]  'void'  type  not  allowed  here	30	None	add
40	[BUG]  [BUGGY]  _flushBuffer();    _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]          AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer();    _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();        _flushBuffer();    _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));	  	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	30	None	add
41	[BUG]  [BUGGY]  _flushBuffer();    _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));  _flushBuffer();  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer();    _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));  _flushBuffer();  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();        _flushBuffer();    _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));  _flushBuffer();	  	non-compiled	[CE]  'void'  type  not  allowed  here	30	None	add
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
43	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
44	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTa  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTa  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTa	  	non-compiled	[CE]  ')'  expected	74	None	add
45	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +	  	non-compiled	[CE]  ')'  expected	74	None	add
46	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTa  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTa  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTa	  	non-compiled	[CE]  ';'  expected	74	None	add
47	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputT  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputT  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputT	  	non-compiled	[CE]  ')'  expected	74	None	add
48	[BUG]  [BUGGY]  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail  +  1);  room  =  0;  [CE]  cannot  find  symbol  TextUtilities  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail  +  1);  room  =  0;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail  +  1);  room  =  0;	          TextUtilities.writeRaw(text,    _outputBuffer,    _outputTail);    room    =    0;    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	96	None	replace
49	[BUG]  [BUGGY]  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail  +  1,  len);  [CE]  cannot  find  symbol  TextUtilities  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail  +  1,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail  +  1,  len);	          TextUtilities.writeRaw(text,    _outputBuffer,    _outputTail);    room    =    0;    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	96	None	replace
50	[BUG]  [BUGGY]  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail,  len);  [CE]  cannot  find  symbol  TextUtilities  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail,  len);	          TextUtilities.writeRaw(text,    _outputBuffer,    _outputTail);    room    =    0;    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	96	None	replace
51	[BUG]  [BUGGY]  _writer.writeRaw(text,  _outputBuffer,  _outputTail);  room  =  0;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  _outputBuffer,  _outputTail);  room  =  0;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  _outputBuffer,  _outputTail);  room  =  0;	          TextUtilities.writeRaw(text,    _outputBuffer,    _outputTail);    room    =    0;    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
52	[BUG]  [BUGGY]  _writer.writeRaw(text,  0,  len,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  0,  len,  _outputBuffer);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  0,  len,  _outputBuffer);	          _writer.writeRaw(text,    0,    len);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
53	[BUG]  [BUGGY]  _writer.writeRaw(text,  0,  len,  _outputTail);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  0,  len,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  0,  len,  _outputTail);	          _writer.writeRaw(text,    0,    len);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
54	[BUG]  [BUGGY]  _writer.writeRaw(text,  0,  room);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  0,  room);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  0,  room);	          _writer.writeRaw(text,    0,    len);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
55	[BUG]  [BUGGY]  if(room  ==  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  ==  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
56	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  ==  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(text);    if(_writer!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	replace
57	[BUG]  [BUGGY]  if(room  ==  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  ==  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(text);    if(_writer!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	replace
58	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
59	[BUG]  [BUGGY]  Writer  text  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  [CE]  variable  text  is  already  defined  in  method  writeRaw(String)  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  text  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  text  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);	  Writer    text    =    _writer.getChars(0,    len,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  variable  text  is  already  defined  in  method  writeRaw(String)	65	None	replace
60	[BUG]  [BUGGY]  Writer  text  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  [CE]  variable  text  is  already  defined  in  method  writeRaw(String)  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  text  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  text  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);	  Writer    text    =    _writer.getChars(0,    len,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  variable  text  is  already  defined  in  method  writeRaw(String)	65	None	replace
61	[BUG]  [BUGGY]  Writer  text  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail,  _status);  [CE]  variable  text  is  already  defined  in  method  writeRaw(String)  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  text  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail,  _status);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  text  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail,  _status);	  Writer    text    =    _writer.getChars(0,    len,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  variable  text  is  already  defined  in  method  writeRaw(String)	65	None	replace
62	[BUG]  [BUGGY]  Writer  text  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputHead);  [CE]  variable  text  is  already  defined  in  method  writeRaw(String)  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  text  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputHead);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  text  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputHead);	  Writer    text    =    _writer.getChars(0,    len,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  variable  text  is  already  defined  in  method  writeRaw(String)	65	None	replace
63	[BUG]  [BUGGY]  _writeRaw( "write  text  value ",  room);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw( "write  text  value ",  room);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw( "write  text  value ",  room);	  _writeRaw(   "write    text    value   ");    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
64	[BUG]  [BUGGY]  _writer.writeRaw( "write  text  value ");  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw( "write  text  value ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw( "write  text  value ");	  _writeRaw(   "write    text    value   ");    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
65	[BUG]  [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  }	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    Writer();    }    	non-compiled	[CE]  ';'  expected	12	None	replace
66	[BUG]  [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  if(_writer  ==  null)  {  _writer  =  new  Writer();  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  if(_writer  ==  null)  {  _writer  =  new  Writer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_writer!=  null)  {  _writer.write(text);  if(_writer  ==  null)  {  _writer  =  new  Writer();  }	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    Writer();    }    	non-compiled	[CE]  ';'  expected	12	None	replace
67	[BUG]  [BUGGY]  _writer  =  new  Writer();  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]                    AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer  =  new  Writer();  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer  =  new  Writer();	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    Writer();    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	12	None	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
69	[BUG]  [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
71	[BUG]  [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_writer!=  null)  {  _writer.write(text);  _writer.write(text);  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value "  +  text.length());  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_verifyValueWrite( "write  text  value "  +  text.length());	  _verifyValueWrite(   "write    text    value   "    +    text);    	compilable	  [FE]  AssertionFailedError  	51	1	replace
73	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value "  +  text.length());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value "  +  text.length());  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value "  +  text.length());	  _verifyValueWrite(   "write    text    value   "    +    text);    	compilable	  [FE]  AssertionFailedError  	51	1	replace
74	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value "  +  text.length);  [CE]  cannot  find  symbol  length  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value "  +  text.length);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value "  +  text.length);	  _verifyValueWrite(   "write    text    value   "    +    text);    	non-compiled	[CE]  cannot  find  symbol  length	51	None	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]          _writer.write(text,  0,  len);  _writer.write(text,  0,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	                _writer.write(text,    0,    len);    _writer.write(text,  0,  len);	  	compilable	  [FE]  AssertionFailedError  	18	1	add
76	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  _writer.write(text,  0,  len);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]          _writer.write(text,  0,  len);  _writer.write(text,  0,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	                _writer.write(text,    0,    len);    _writer.write(text,  0,  len);	  	compilable	  [FE]  AssertionFailedError  	18	1	add
77	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	18	None	add
78	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  _outputTail  +=  len;  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	18	None	add
79	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  len);  }  else  {  _writer.write(text,  0,  len);  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]          AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  len);  }  else  {  _writer.write(text,  0,  len);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  len);  }  else  {  _writer.write(text,  0,  len);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	18	None	add
80	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len	  	non-compiled	[CE]  ';'  expected	18	None	add
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   "write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_verifyValueWrite(       "write        text        value       ");        _verifyValueWrite(   "write    text    value       ");    _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( "write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	26	1	add
82	[BUG]  [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   "write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   "write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite(       "write        text        value       ");        _verifyValueWrite(   "write    text    value       ");    _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( "write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	26	1	add
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   "write  text  value     ");  _verifyValueWrite( ",write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_verifyValueWrite(       "write        text        value       ");        _verifyValueWrite(   "write    text    value       ");    _verifyValueWrite( ",write  text  value   ");  _verifyValueWrite( "write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	26	1	add
84	[BUG]  [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   "write  text  value     ");  _verifyValueWrite( ",write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   "write  text  value     ");  _verifyValueWrite( ",write  text  value   ");  _verifyValueWrite( "write  text  value   ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite(       "write        text        value       ");        _verifyValueWrite(   "write    text    value       ");    _verifyValueWrite( ",write  text  value   ");  _verifyValueWrite( "write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	26	1	add
85	[BUG]  [BUGGY]  _writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	87	None	replace
86	[BUG]  [BUGGY]  writeRaw(_writer.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(_writer.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(_writer.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail));    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
87	[BUG]  [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputTail));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputTail));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	87	None	replace
88	[BUG]  [BUGGY]  _writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail,  _outputEnd);  [CE]  no  suitable  method  found  for  getChars(int,int)  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail,  _outputEnd);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail,  _outputEnd);	  _flushBuffer();    _writeRaw(text.getChars(0,    len),    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int)	64	None	replace
89	[BUG]  [BUGGY]  _writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  getChars(int,int)  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail);	  _flushBuffer();    _writeRaw(text.getChars(0,    len),    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int)	64	None	replace
90	[BUG]  [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail);	  _flushBuffer();    _writeRaw(text.getChars(0,    len),    _outputBuffer,    _outputTail);    	non-compiled	[CE]  ')'  expected	64	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
92	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
93	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  	non-compiled	[CE]  ';'  expected	10	None	add
94	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(_writer  ==  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(_writer  ==  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    if(_writer  ==  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  	non-compiled	[CE]  ';'  expected	10	None	add
95	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(_writer!=  null)  {  _writer.write(text);  if(_writer  ==  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(_writer!=  null)  {  _writer.write(text);  if(_writer  ==  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    if(_writer!=  null)  {  _writer.write(text);  if(_writer  ==  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  	non-compiled	[CE]  ';'  expected	10	None	add
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
97	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value.n ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_verifyValueWrite( "write  text  value.n ");	  _verifyValueWrite(   "write    text    value.   ");    	compilable	  [FE]  AssertionFailedError  	49	1	replace
99	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value.n ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value.n ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value.n ");	  _verifyValueWrite(   "write    text    value.   ");    	compilable	  [FE]  AssertionFailedError  	49	1	replace
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	29	1	replace
101	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	29	1	replace
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  ==  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	29	1	replace
103	[BUG]  [BUGGY]  if(room  ==  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  ==  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	29	1	replace
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( ",write  text  value ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_verifyValueWrite( ",write  text  value ");	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	29	1	replace
105	[BUG]  [BUGGY]  _verifyValueWrite( ",write  text  value ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( ",write  text  value ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( ",write  text  value ");	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	29	1	replace
106	[BUG]  [BUGGY]  Writer  writer  =  _writer.createWriter(text);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  writer  =  _writer.createWriter(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  writer  =  _writer.createWriter(text);	  writeRaw(text);    Writer    writer    =    _writer.createWriter(text);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
107	[BUG]  [BUGGY]  writer  =  _writer.createWriter(text);  [CE]  cannot  find  symbol  writer  [FE]              StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writer  =  _writer.createWriter(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writer  =  _writer.createWriter(text);	  writeRaw(text);    Writer    writer    =    _writer.createWriter(text);    	non-compiled	[CE]  cannot  find  symbol  writer	56	None	replace
108	[BUG]  [BUGGY]  _writer  =  _writer.createWriter(text);  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]                StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer  =  _writer.createWriter(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer  =  _writer.createWriter(text);	  writeRaw(text);    Writer    writer    =    _writer.createWriter(text);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	56	None	replace
109	[BUG]  [BUGGY]  writeRaw(_writer);  Writer  writer  =  _writer.createWriter(text);  [CE]  no  suitable  method  found  for  writeRaw(Writer)  [FE]                  StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(_writer);  Writer  writer  =  _writer.createWriter(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(_writer);  Writer  writer  =  _writer.createWriter(text);	  writeRaw(text);    Writer    writer    =    _writer.createWriter(text);    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(Writer)	56	None	replace
110	[BUG]  [BUGGY]  _writer  =  new  Writer();  _writer.write(text);  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer  =  new  Writer();  _writer.write(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer  =  new  Writer();  _writer.write(text);	  _writer.write(text);    if(_writer!=    null)    {    _writer    =    new    Writer();    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _writer.write(text);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	76	None	replace
111	[BUG]  [BUGGY]  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    _writer    =    new    Writer();    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _writer.write(text);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	76	None	replace
112	[BUG]  [BUGGY]  if(room!=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room!=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room!=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    _writer    =    new    Writer();    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
113	[BUG]  [BUGGY]  Writer  text  =  _writer.createText(text);  [CE]  variable  text  is  already  defined  in  method  writeRaw(String)  [FE]        StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  text  =  _writer.createText(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  text  =  _writer.createText(text);	  writeRaw(text);    Writer    text    =    _writer.createText(text);    	non-compiled	[CE]  variable  text  is  already  defined  in  method  writeRaw(String)	54	None	replace
114	[BUG]  [BUGGY]  _writer.createText(text);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.createText(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.createText(text);	  writeRaw(text);    Writer    text    =    _writer.createText(text);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  	compilable	  [FE]  AssertionFailedError  	70	1	add
116	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  	compilable	  [FE]  AssertionFailedError  	70	1	add
117	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTa  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTa  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTa	  	non-compiled	[CE]  ')'  expected	70	None	add
118	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail	  	non-compiled	[CE]  ')'  expected	70	None	add
119	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  	non-compiled	[CE]  ';'  expected	70	None	add
120	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTa  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTa  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTa	  	non-compiled	[CE]  ';'  expected	70	None	add
121	[BUG]  [BUGGY]  _writer.writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail));  [CE]  'void'  type  not  allowed  here  [FE]          StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail));	  writeRaw(text.getChars(1,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	85	None	replace
122	[BUG]  [BUGGY]  writeRaw(_writer.getChars(1,  len,  _outputBuffer,  _outputTail));  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(_writer.getChars(1,  len,  _outputBuffer,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(_writer.getChars(1,  len,  _outputBuffer,  _outputTail));	  writeRaw(text.getChars(1,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
123	[BUG]  [BUGGY]  _writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  [CE]  'void'  type  not  allowed  here  [FE]        StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len));    	non-compiled	[CE]  'void'  type  not  allowed  here	84	None	replace
124	[BUG]  [BUGGY]  writeRaw(_writer.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(_writer.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(_writer.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len));    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
125	[BUG]  [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputTail);	  Writer    w    =    _writer.createWriteRaw(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
126	[BUG]  [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  len);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  len);	  Writer    w    =    _writer.createWriteRaw(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
127	[BUG]  [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputHead);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputHead);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputHead);	  Writer    w    =    _writer.createWriteRaw(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
128	[BUG]  [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  _status);  [CE]  cannot  find  symbol  _status  [FE]                    AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  _status);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  _status);	  Writer    w    =    _writer.createWriteRaw(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol  _status	13	None	replace
129	[BUG]  [BUGGY]  _writeRaw(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text,  _outputBuffer,  _outputTail);	  _writeRaw(text,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
130	[BUG]  [BUGGY]  _writeRaw(text,  0,  _outputTail);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text,  0,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text,  0,  _outputTail);	  _writeRaw(text,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
131	[BUG]  [BUGGY]  _writeRaw(text,  null);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text,  null);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text,  null);	  _writeRaw(text,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
132	[BUG]  [BUGGY]  _flushBuffer(text,  _outputTail);  [CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer(text,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer(text,  _outputTail);	  _flushBuffer(buffer,    _outputTail);    	non-compiled	[CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;	60	None	replace
133	[BUG]  [BUGGY]  _flushBuffer(len,  _outputTail);  [CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer(len,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer(len,  _outputTail);	  _flushBuffer(buffer,    _outputTail);    	non-compiled	[CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;	60	None	replace
134	[BUG]  [BUGGY]  _flushBuffer(buffer,  len);  [CE]  cannot  find  symbol  buffer  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer(buffer,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer(buffer,  len);	  _flushBuffer(buffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  buffer	60	None	replace
135	[BUG]  [BUGGY]  _writer.writeRaw(text,  len,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  len,  _outputBuffer);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  len,  _outputBuffer);	  _writer.writeRaw(text,    len);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
136	[BUG]  [BUGGY]  _writer.writeRaw(text,  _outputBuffer,  len);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  _outputBuffer,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  _outputBuffer,  len);	  _writer.writeRaw(text,    len);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
137	[BUG]  [BUGGY]  _writer.writeRaw(text,  len,  _outputTail);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  len,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  len,  _outputTail);	  _writer.writeRaw(text,    len);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
138	[BUG]  [BUGGY]  _writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));	  _writer.write(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	86	None	replace
139	[BUG]  [BUGGY]  _writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd));	  _writer.write(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	86	None	replace
140	[BUG]  [BUGGY]  _writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputHead));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputHead));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputHead));	  _writer.write(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	86	None	replace
141	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	add
142	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	add
143	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  _writer.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  _writer.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    _writer.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
144	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  TextUtilities  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);	  	non-compiled	[CE]  cannot  find  symbol  TextUtilities	80	None	add
145	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  [CE]  cannot  find  symbol  TextUtilities  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);  _outputTail  +=  len;	  	non-compiled	[CE]  cannot  find  symbol  TextUtilities	80	None	add
146	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  TextUtilities.writeRaw(text,  _writer,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  TextUtilities  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  TextUtilities.writeRaw(text,  _writer,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    TextUtilities.writeRaw(text,  _writer,  _outputBuffer,  _outputTail);	  	non-compiled	[CE]  cannot  find  symbol  TextUtilities	80	None	add
147	[BUG]  [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));	  _flushBuffer();    _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	33	None	replace
148	[BUG]  [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  room));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  room));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  room));	  _flushBuffer();    _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	33	None	replace
149	[BUG]  [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _room));  [CE]  cannot  find  symbol  _room  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _room));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _room));	  _flushBuffer();    _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail));    	non-compiled	[CE]  cannot  find  symbol  _room	33	None	replace
150	[BUG]  [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail),  _outputEnd);  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail),  _outputEnd);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail),  _outputEnd);	  _flushBuffer();    _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	33	None	replace
151	[BUG]  [BUGGY]  _writer.writeRaw(text,  _outputBuffer,  room);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  _outputBuffer,  room);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  _outputBuffer,  room);	  _writer.writeRaw(text,    room);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
152	[BUG]  [BUGGY]  writer  =  new  Writer();  writer.write(text);  [CE]  cannot  find  symbol  writer  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writer  =  new  Writer();  writer.write(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writer  =  new  Writer();  writer.write(text);	  _writer.write(text);    if(_writer!=    null)    {    _writer    =    new    Writer();    _writer.write(text);    }    	non-compiled	[CE]  cannot  find  symbol  writer	9	None	replace
153	[BUG]  [BUGGY]  writer  =  new  Writer();  _writer.write(text);  [CE]  cannot  find  symbol  writer  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writer  =  new  Writer();  _writer.write(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writer  =  new  Writer();  _writer.write(text);	  _writer.write(text);    if(_writer!=    null)    {    _writer    =    new    Writer();    _writer.write(text);    }    	non-compiled	[CE]  cannot  find  symbol  writer	9	None	replace
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value ");  if(room  <  SHORT_WRITE)  {  writeRaw(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_verifyValueWrite( "write  text  value ");  if(room  <  SHORT_WRITE)  {  writeRaw(text);  }	  writeRaw(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	41	1	replace
155	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  if(room  <  SHORT_WRITE)  {  writeRaw(text);  }  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value ");  if(room  <  SHORT_WRITE)  {  writeRaw(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value ");  if(room  <  SHORT_WRITE)  {  writeRaw(text);  }	  writeRaw(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	41	1	replace
156	[BUG]  [BUGGY]  _writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail  +  1));  [CE]  'void'  type  not  allowed  here  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail  +  1));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail  +  1));	  _writeRaw(text.getChars(1,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	93	None	replace
157	[BUG]  [BUGGY]  _writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail,  _outputEnd));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]                    AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail,  _outputEnd));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail,  _outputEnd));	  _writeRaw(text.getChars(1,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	93	None	replace
158	[BUG]  [BUGGY]  _writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail,  _outputHead));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]                      AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail,  _outputHead));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail,  _outputHead));	  _writeRaw(text.getChars(1,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	93	None	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   ",write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( ",write  text  value   ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_verifyValueWrite(       "write        text        value       ");        _verifyValueWrite(   ",write    text    value       ");    _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( ",write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	28	1	add
160	[BUG]  [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   ",write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( ",write  text  value   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite(     "write    text    value     ");    _verifyValueWrite(   ",write  text  value     ");  _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( ",write  text  value   ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite(       "write        text        value       ");        _verifyValueWrite(   ",write    text    value       ");    _verifyValueWrite( "write  text  value   ");  _verifyValueWrite( ",write  text  value   ");	  	compilable	  [FE]  AssertionFailedError  	28	1	add
161	[BUG]  [BUGGY]  writeRaw(text,  _outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  writeRaw(String,char[],int)  [FE]          StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text,  _outputBuffer,  _outputTail);	  writeRaw(text,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(String,char[],int)	62	None	replace
162	[BUG]  [BUGGY]  writeRaw(_outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  writeRaw(char[],int)  [FE]            StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(_outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(_outputBuffer,  _outputTail);	  writeRaw(text,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(char[],int)	62	None	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text,  0,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text,  0,  _outputTail);	  writeRaw(text,    _outputTail);    	compilable	  [FE]  AssertionFailedError  	62	1	replace
164	[BUG]  [BUGGY]  writeRaw(text,  0,  _outputTail);  [FE]  AssertionFailedError  [FE]              StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text,  0,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text,  0,  _outputTail);	  writeRaw(text,    _outputTail);    	compilable	  [FE]  AssertionFailedError  	62	1	replace
165	[BUG]  [BUGGY]  TextUtilities.writeRaw(text,  null,  _outputBuffer);  [CE]  cannot  find  symbol  TextUtilities  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  TextUtilities.writeRaw(text,  null,  _outputBuffer);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	TextUtilities.writeRaw(text,  null,  _outputBuffer);	          TextUtilities.writeRaw(text,    null);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	53	None	replace
166	[BUG]  [BUGGY]  TextUtilities.writeRaw(text,  _outputBuffer,  null);  [CE]  cannot  find  symbol  TextUtilities  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  TextUtilities.writeRaw(text,  _outputBuffer,  null);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	TextUtilities.writeRaw(text,  _outputBuffer,  null);	          TextUtilities.writeRaw(text,    null);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	53	None	replace
167	[BUG]  [BUGGY]  TextUtilities.writeRaw(text,  null,  room);  [CE]  cannot  find  symbol  TextUtilities  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  TextUtilities.writeRaw(text,  null,  room);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	TextUtilities.writeRaw(text,  null,  room);	          TextUtilities.writeRaw(text,    null);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	53	None	replace
168	[BUG]  [BUGGY]  TextUtilities.writeRaw(text,  null,  _outputTail);  [CE]  cannot  find  symbol  TextUtilities  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  TextUtilities.writeRaw(text,  null,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	TextUtilities.writeRaw(text,  null,  _outputTail);	          TextUtilities.writeRaw(text,    null);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	53	None	replace
169	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  >=  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  _writer.write(text);    if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	1	replace
170	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  _writer.write(text);    if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	1	replace
171	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  SHORT_WRITE)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  ==  SHORT_WRITE)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  _writer.write(text);    if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	1	replace
172	[BUG]  [BUGGY]  if(room  ==  SHORT_WRITE)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  SHORT_WRITE)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  ==  SHORT_WRITE)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  _writer.write(text);    if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	1	replace
173	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  ==  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  _writer.write(text);    if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	1	replace
174	[BUG]  [BUGGY]  if(room  ==  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  ==  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  _writer.write(text);    if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	1	replace
175	[BUG]  [BUGGY]  _writeRaw(text,  _outputBuffer,  room);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text,  _outputBuffer,  room);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text,  _outputBuffer,  room);	  _writeRaw(text,    room);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
176	[BUG]  [BUGGY]  _writeRaw(text,  0,  len);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text,  0,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text,  0,  len);	  _writeRaw(text,    room);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
177	[BUG]  [BUGGY]  _writeRaw(text,  0,  room);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text,  0,  room);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text,  0,  room);	  _writeRaw(text,    room);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
178	[BUG]  [BUGGY]  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail,  len);  return;  [CE]  cannot  find  symbol  TextUtilities  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail,  len);  return;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail,  len);  return;	          TextUtilities.writeRaw(text,    _outputBuffer,    _outputTail);    return;    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	52	None	replace
179	[BUG]  [BUGGY]  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail  +  1);  [CE]  cannot  find  symbol  TextUtilities  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail  +  1);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail  +  1);	          TextUtilities.writeRaw(text,    _outputBuffer,    _outputTail);    return;    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	52	None	replace
180	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
181	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
182	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  	non-compiled	[CE]  ';'  expected	7	None	add
183	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(room  >=  len)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(room  >=  len)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    if(room  >=  len)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  	non-compiled	[CE]  ';'  expected	7	None	add
184	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  	non-compiled	[CE]  ';'  expected	7	None	add
185	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }	  	non-compiled	[CE]  ';'  expected	7	None	add
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_writer!=  null)  {  _flushBuffer();  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(_writer!=  null)  {  _flushBuffer();  _flushBuffer();  }	  _flushBuffer();    _flushBuffer();    	compilable	  [FE]  AssertionFailedError  	31	1	replace
187	[BUG]  [BUGGY]  if(_writer!=  null)  {  _flushBuffer();  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_writer!=  null)  {  _flushBuffer();  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_writer!=  null)  {  _flushBuffer();  _flushBuffer();  }	  _flushBuffer();    _flushBuffer();    	compilable	  [FE]  AssertionFailedError  	31	1	replace
188	[BUG]  [BUGGY]  _writer.writeRaw(text,  _outputBuffer,  _outputHead);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  _outputBuffer,  _outputHead);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  _outputBuffer,  _outputHead);	  _writer.writeRaw(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
189	[BUG]  [BUGGY]  _writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail,    _outputEnd));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	23	None	replace
190	[BUG]  [BUGGY]  writeRaw(_writer.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(_writer.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(_writer.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail,    _outputEnd));    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
191	[BUG]  [BUGGY]  writeRaw(_writer,  text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]                    AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(_writer,  text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(_writer,  text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail,    _outputEnd));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	23	None	replace
192	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  writeRaw(text);  _writer.write(text,  0,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text);        _writer.write(text,    0,    len);    writeRaw(text);  _writer.write(text,  0,  len);	  	compilable	  [FE]  StackOverflowError  	42	1	add
193	[BUG]  [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  writeRaw(text);  _writer.write(text,  0,  len);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  writeRaw(text);  _writer.write(text,  0,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        _writer.write(text,    0,    len);    writeRaw(text);  _writer.write(text,  0,  len);	  	compilable	  [FE]  StackOverflowError  	42	1	add
194	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  _writer.write(text,  0,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text);        _writer.write(text,    0,    len);    _writer.write(text,  0,  len);	  	compilable	  [FE]  StackOverflowError  	42	1	add
195	[BUG]  [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  _writer.write(text,  0,  len);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  _writer.write(text,  0,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        _writer.write(text,    0,    len);    _writer.write(text,  0,  len);	  	compilable	  [FE]  StackOverflowError  	42	1	add
196	[BUG]  [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  _writeRaw(text);  _writer.write(text,  0,  len);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  _writeRaw(text);  _writer.write(text,  0,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        _writer.write(text,    0,    len);    _writeRaw(text);  _writer.write(text,  0,  len);	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
197	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  _writer.write(text);  _writer.write(text,  0,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text);        _writer.write(text,    0,    len);    _writer.write(text);  _writer.write(text,  0,  len);	  	compilable	  [FE]  StackOverflowError  	42	1	add
198	[BUG]  [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  _writer.write(text);  _writer.write(text,  0,  len);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  _writer.write(text);  _writer.write(text,  0,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        _writer.write(text,    0,    len);    _writer.write(text);  _writer.write(text,  0,  len);	  	compilable	  [FE]  StackOverflowError  	42	1	add
199	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  _verifyValueWrite( "write  text  value ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text);        _writer.write(text,    0,    len);    _verifyValueWrite( "write  text  value ");	  	compilable	  [FE]  StackOverflowError  	42	1	add
200	[BUG]  [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  _verifyValueWrite( "write  text  value ");  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  _verifyValueWrite( "write  text  value ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        _writer.write(text,    0,    len);    _verifyValueWrite( "write  text  value ");	  	compilable	  [FE]  StackOverflowError  	42	1	add
201	[BUG]  [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  len,  _outputTail);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  len,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.createWriteRaw(text,  len,  _outputTail);	  Writer    w    =    _writer.createWriteRaw(text,    len);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
202	[BUG]  [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  len,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  len,  _outputBuffer);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.createWriteRaw(text,  len,  _outputBuffer);	  Writer    w    =    _writer.createWriteRaw(text,    len);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
203	[BUG]  [BUGGY]  _writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));	  _writer.writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	21	None	replace
204	[BUG]  [BUGGY]  _writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputHead));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputHead));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputHead));	  _writer.writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	21	None	replace
205	[BUG]  [BUGGY]  _writeRaw(text,  len,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text,  len,  _outputBuffer);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text,  len,  _outputBuffer);	  _writeRaw(text,    len);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
206	[BUG]  [BUGGY]  _writeRaw(text,  _outputBuffer,  len);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text,  _outputBuffer,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text,  _outputBuffer,  len);	  _writeRaw(text,    len);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
207	[BUG]  [BUGGY]  _writeRaw(text,  len,  _outputTail);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text,  len,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text,  len,  _outputTail);	  _writeRaw(text,    len);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
208	[BUG]  [BUGGY]  _writer.write(text.substring(0,  len),  _outputBuffer,  _outputTail,  _outputEnd);  [CE]  no  suitable  method  found  for  write(String,char[],int,int)  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text.substring(0,  len),  _outputBuffer,  _outputTail,  _outputEnd);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text.substring(0,  len),  _outputBuffer,  _outputTail,  _outputEnd);	  _writer.write(text.substring(0,    len),    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,char[],int,int)	89	None	replace
209	[BUG]  [BUGGY]  _writer.write(text.substring(0,  len),  _outputBuffer,  _outputTail,  _outputHead);  [CE]  no  suitable  method  found  for  write(String,char[],int,int)  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text.substring(0,  len),  _outputBuffer,  _outputTail,  _outputHead);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text.substring(0,  len),  _outputBuffer,  _outputTail,  _outputHead);	  _writer.write(text.substring(0,    len),    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,char[],int,int)	89	None	replace
210	[BUG]  [BUGGY]  _writer.write(text.substring(0,  len)+  1,  _outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  write(String,char[],int)  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text.substring(0,  len)+  1,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text.substring(0,  len)+  1,  _outputBuffer,  _outputTail);	  _writer.write(text.substring(0,    len),    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,char[],int)	89	None	replace
211	[BUG]  [BUGGY]  _writer.write(text.substring(0,  len),  _outputBuffer,  _outputTail,  _outputCharset);  [CE]  cannot  find  symbol  _outputCharset  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text.substring(0,  len),  _outputBuffer,  _outputTail,  _outputCharset);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text.substring(0,  len),  _outputBuffer,  _outputTail,  _outputCharset);	  _writer.write(text.substring(0,    len),    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  _outputCharset	89	None	replace
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( "write  text  value.   ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_verifyValueWrite(   "write    text    value.   ");    _verifyValueWrite( "write  text  value.   ");	  	compilable	  [FE]  AssertionFailedError  	48	1	add
213	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( "write  text  value.   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( "write  text  value.   ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite(   "write    text    value.   ");    _verifyValueWrite( "write  text  value.   ");	  	compilable	  [FE]  AssertionFailedError  	48	1	add
214	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( "write  text  value. "));  [CE]  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( "write  text  value. "));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite(   "write    text    value.   ");    _verifyValueWrite( "write  text  value. "));	  	non-compiled	[CE]  	48	None	add
215	[BUG]  [BUGGY]  writeRaw(room);  Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  writeRaw(int)  [FE]          StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(room);  Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(room);  Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputTail);	  writeRaw(text);    Writer    w    =    _writer.createWriteRaw(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(int)	91	None	replace
216	[BUG]  [BUGGY]  w  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  w  [FE]            StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  w  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	w  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputTail);	  writeRaw(text);    Writer    w    =    _writer.createWriteRaw(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  w	91	None	replace
217	[BUG]  [BUGGY]  Writer  writer  =  _writer.getWriter(text);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  writer  =  _writer.getWriter(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  writer  =  _writer.getWriter(text);	  writeRaw(text);    Writer    writer    =    _writer.getWriter(text);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
218	[BUG]  [BUGGY]  writeRaw(_writer);  Writer  writer  =  _writer.getWriter(text);  [CE]  no  suitable  method  found  for  writeRaw(Writer)  [FE]            StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(_writer);  Writer  writer  =  _writer.getWriter(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(_writer);  Writer  writer  =  _writer.getWriter(text);	  writeRaw(text);    Writer    writer    =    _writer.getWriter(text);    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(Writer)	55	None	replace
219	[BUG]  [BUGGY]  writer  =  _writer.getWriter(text);  [CE]  cannot  find  symbol  writer  [FE]              StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writer  =  _writer.getWriter(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writer  =  _writer.getWriter(text);	  writeRaw(text);    Writer    writer    =    _writer.getWriter(text);    	non-compiled	[CE]  cannot  find  symbol  writer	55	None	replace
220	[BUG]  [BUGGY]  _writer.writeRaw(text,  null,  _outputTail);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  null,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  null,  _outputTail);	  _writer.writeRaw(text,    null);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
221	[BUG]  [BUGGY]  _writer.writeRaw(text,  null,  len);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  null,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  null,  len);	  _writer.writeRaw(text,    null);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
222	[BUG]  [BUGGY]  _writer.writeRaw(text,  null,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  null,  _outputBuffer);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  null,  _outputBuffer);	  _writer.writeRaw(text,    null);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
223	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);	  text.getChars(0,    len,    _outputBuffer,    _outputTail);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	1	replace
224	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);	  text.getChars(0,    len,    _outputBuffer,    _outputTail);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	1	replace
225	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputHead);  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputHead);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputHead);	  text.getChars(0,    len,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	79	None	replace
226	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);	  text.getChars(0,    len,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	79	None	replace
227	[BUG]  [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  room);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  room);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  room);	  Writer    w    =    _writer.createWriteRaw(text,    room);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
228	[BUG]  [BUGGY]  writeRaw(_writer,  text.getChars(0,  len),  _outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  getChars(int,int)  [FE]            StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(_writer,  text.getChars(0,  len),  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(_writer,  text.getChars(0,  len),  _outputBuffer,  _outputTail);	  writeRaw(text.getChars(0,    len),    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int)	63	None	replace
229	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(_outputBuffer,  len,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(_outputBuffer,  len,  _outputTail);	  writeRaw(text.getChars(0,    len),    _outputBuffer,    _outputTail);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	1	replace
230	[BUG]  [BUGGY]  writeRaw(_outputBuffer,  len,  _outputTail);  [FE]  ArrayIndexOutOfBoundsException  [FE]              StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(_outputBuffer,  len,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(_outputBuffer,  len,  _outputTail);	  writeRaw(text.getChars(0,    len),    _outputBuffer,    _outputTail);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	1	replace
231	[BUG]  [BUGGY]  writeRaw(text,  _outputBuffer,  len,  _outputTail);  [CE]  no  suitable  method  found  for  writeRaw(String,char[],int,int)  [FE]                StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text,  _outputBuffer,  len,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text,  _outputBuffer,  len,  _outputTail);	  writeRaw(text.getChars(0,    len),    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(String,char[],int,int)	63	None	replace
232	[BUG]  [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));  [CE]  'void'  type  not  allowed  here  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));	  _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	68	None	replace
233	[BUG]  [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]                    AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd));	  _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	68	None	replace
234	[BUG]  [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputHead));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]                      AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputHead));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputHead));	  _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	68	None	replace
235	[BUG]  [BUGGY]  _writer.writeRaw(text,  _outputTail);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  _outputTail);	  _writer.write(text);    TextUtilities.writeRaw(text,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
236	[BUG]  [BUGGY]  writer.writeRaw(text,  _outputTail);  [CE]  cannot  find  symbol  writer  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writer.writeRaw(text,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writer.writeRaw(text,  _outputTail);	  _writer.write(text);    TextUtilities.writeRaw(text,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  writer	59	None	replace
237	[BUG]  [BUGGY]  if(_verifyValueWrite( "write  text  value "))  {  _verifyValueWrite( "write  text  value ");  }  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_verifyValueWrite( "write  text  value "))  {  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_verifyValueWrite( "write  text  value "))  {  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    if(_verifyValueWrite(   "write    text    value       ");    	non-compiled	[CE]  incompatible  types	95	None	replace
238	[BUG]  [BUGGY]  if(_verifyValueWrite( "write  text  value "))  {  _verifyValueWrite( "write  text  value ");  }  else  {  _flushBuffer();  }  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_verifyValueWrite( "write  text  value "))  {  _verifyValueWrite( "write  text  value ");  }  else  {  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_verifyValueWrite( "write  text  value "))  {  _verifyValueWrite( "write  text  value ");  }  else  {  _flushBuffer();  }	  _verifyValueWrite(       "write    text    value       ");    if(_verifyValueWrite(   "write    text    value       ");    	non-compiled	[CE]  incompatible  types	95	None	replace
239	[BUG]  [BUGGY]  writeRaw(_writer.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(_writer.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(_writer.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
240	[BUG]  [BUGGY]  writeRaw(_outputBuffer.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(_outputBuffer.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(_outputBuffer.getChars(0,  len,  _outputBuffer,  _outputTail  +  1));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
241	[BUG]  [BUGGY]  writeRaw(text,  _outputBuffer,  _outputHead);  [CE]  no  suitable  method  found  for  writeRaw(String,char[],int)  [FE]        StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text,  _outputBuffer,  _outputHead);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text,  _outputBuffer,  _outputHead);	  writeRaw(text,    _outputBuffer);    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(String,char[],int)	61	None	replace
242	[BUG]  [BUGGY]  writeRaw(text,  _outputBuffer,  len);  [CE]  no  suitable  method  found  for  writeRaw(String,char[],int)  [FE]          StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text,  _outputBuffer,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text,  _outputBuffer,  len);	  writeRaw(text,    _outputBuffer);    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(String,char[],int)	61	None	replace
243	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  [CE]  'void'  type  not  allowed  here  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(len  <  SHORT_WRITE)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(len  <  SHORT_WRITE)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }	  _flushBuffer();    _flushBuffer(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len));    	non-compiled	[CE]  'void'  type  not  allowed  here	98	None	replace
244	[BUG]  [BUGGY]  if(len  >  0)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(len  >  0)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(len  >  0)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }	  _flushBuffer();    _flushBuffer(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len));    	non-compiled	[CE]  'void'  type  not  allowed  here	98	None	replace
245	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  [CE]  'void'  type  not  allowed  here  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }	  _flushBuffer();    _flushBuffer(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len));    	non-compiled	[CE]  'void'  type  not  allowed  here	98	None	replace
246	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  else  {  break;  }  [CE]  'void'  type  not  allowed  here  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(len  <  SHORT_WRITE)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  else  {  break;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(len  <  SHORT_WRITE)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  else  {  break;  }	  _flushBuffer();    _flushBuffer(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len));    	non-compiled	[CE]  'void'  type  not  allowed  here	98	None	replace
247	[BUG]  [BUGGY]  writeRaw(text,  _outputBuffer.getChars(0,  len,  _outputTail));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text,  _outputBuffer.getChars(0,  len,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text,  _outputBuffer.getChars(0,  len,  _outputTail));	  writeRaw(_writer.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
248	[BUG]  [BUGGY]  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail  +  len);  [CE]  cannot  find  symbol  TextUtilities  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail  +  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail  +  len);	          TextUtilities.writeRaw(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	17	None	replace
249	[BUG]  [BUGGY]  _writeRaw(text,  null,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text,  null,  _outputBuffer);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text,  null,  _outputBuffer);	  _writeRaw(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
250	[BUG]  [BUGGY]  _writeRaw(text,  0,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text,  0,  _outputBuffer);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text,  0,  _outputBuffer);	  _writeRaw(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
251	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  >=  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(text);    if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	replace
252	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(text);    if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	replace
253	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  SHORT_WRITE)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  ==  SHORT_WRITE)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(text);    if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	replace
254	[BUG]  [BUGGY]  if(room  ==  SHORT_WRITE)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  SHORT_WRITE)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  ==  SHORT_WRITE)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(text);    if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	replace
255	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  text.getChars(0,  len,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	text.getChars(0,    len,    _outputBuffer,    _outputTail);    text.getChars(0,  len,  _outputBuffer,  _outputTail);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	1	add
256	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  text.getChars(0,  len,  _outputBuffer,  _outputTail);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  text.getChars(0,  len,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,    len,    _outputBuffer,    _outputTail);    text.getChars(0,  len,  _outputBuffer,  _outputTail);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	1	add
257	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  TextUtilities  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,    len,    _outputBuffer,    _outputTail);    TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);	  	non-compiled	[CE]  cannot  find  symbol  TextUtilities	78	None	add
258	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  TextBuffer  text  =  new  TextBuffer(_outputTail  +  len);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  TextBuffer  text  =  new  TextBuffer(_outputTail  +  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,    len,    _outputBuffer,    _outputTail);    TextBuffer  text  =  new  TextBuffer(_outputTail  +  len);	  	non-compiled	[CE]  cannot  find  symbol	78	None	add
259	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  TextBuffer  text  =  new  TextBuffer(_outputTail,  _outputHead);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  TextBuffer  text  =  new  TextBuffer(_outputTail,  _outputHead);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,    len,    _outputBuffer,    _outputTail);    TextBuffer  text  =  new  TextBuffer(_outputTail,  _outputHead);	  	non-compiled	[CE]  cannot  find  symbol	78	None	add
260	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	text.getChars(0,    len,    _outputBuffer,    _outputTail);    text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	1	add
261	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,    len,    _outputBuffer,    _outputTail);    text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	1	add
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    _writer.write(text);  _writer.write(text);  _writer.write(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);        _writer.write(text);    _writer.write(text);  _writer.write(text);	  	compilable	  [FE]  AssertionFailedError  	5	1	add
263	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  _writer.write(text);  _writer.write(text);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    _writer.write(text);  _writer.write(text);  _writer.write(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        _writer.write(text);    _writer.write(text);  _writer.write(text);	  	compilable	  [FE]  AssertionFailedError  	5	1	add
264	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);        _writer.write(text);    if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
265	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        _writer.write(text);    if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
266	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);        _writer.write(text);    if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
267	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        _writer.write(text);    if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
268	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);        _writer.write(text);    if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
269	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        _writer.write(text);    if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);        _writer.write(text);    if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
271	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        _writer.write(text);    if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
272	[BUG]  [BUGGY]  if(room  ==  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  ==  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
273	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  >=  len)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    	compilable	  [FE]  AssertionFailedError  	11	1	replace
274	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    	compilable	  [FE]  AssertionFailedError  	11	1	replace
275	[BUG]  [BUGGY]  _writer.writeRaw(text,  0,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  0,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  0,  _outputBuffer,  _outputTail);	  _writer.write(text);    TextUtilities.writeRaw(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
276	[BUG]  [BUGGY]  writer.writeRaw(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  writer  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writer.writeRaw(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writer.writeRaw(text,  _outputBuffer,  _outputTail);	  _writer.write(text);    TextUtilities.writeRaw(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  writer	57	None	replace
277	[BUG]  [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  _outputTail,  len);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  _outputTail,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.createWriteRaw(text,  _outputTail,  len);	  Writer    w    =    _writer.createWriteRaw(text,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
278	[BUG]  [BUGGY]  Writer  w  =  _outputBuffer.createWriteRaw(text,  _outputTail);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  _outputBuffer.createWriteRaw(text,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _outputBuffer.createWriteRaw(text,  _outputTail);	  Writer    w    =    _writer.createWriteRaw(text,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
279	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  [CE]  'void'  type  not  allowed  here  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }	  _flushBuffer();    _flushBuffer(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	97	None	replace
280	[BUG]  [BUGGY]  if(_outputTail  >  0)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  [CE]  'void'  type  not  allowed  here  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_outputTail  >  0)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_outputTail  >  0)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }	  _flushBuffer();    _flushBuffer(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	97	None	replace
281	[BUG]  [BUGGY]  if(_outputTail  >=  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_outputTail  >=  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_outputTail  >=  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }	  _flushBuffer();    _flushBuffer(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	97	None	replace
282	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  _flushBuffer();    _flushBuffer(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  	97	None	replace
283	[BUG]  [BUGGY]  _writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputTail);  [CE]  'void'  type  not  allowed  here  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputTail);	  _flushBuffer();    _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail),    _outputTail);    	non-compiled	[CE]  'void'  type  not  allowed  here	34	None	replace
284	[BUG]  [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputTail);  [CE]  'void'  type  not  allowed  here  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputTail);	  _flushBuffer();    _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail),    _outputTail);    	non-compiled	[CE]  'void'  type  not  allowed  here	34	None	replace
285	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputTail);  }  [CE]  'void'  type  not  allowed  here  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputTail);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputTail);  }	  _flushBuffer();    _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail),    _outputTail);    	non-compiled	[CE]  'void'  type  not  allowed  here	34	None	replace
286	[BUG]  [BUGGY]  Writer  w  =  _writer.createWriter(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  _writer.createWriter(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.createWriter(text,  _outputBuffer,  _outputTail);	  writeRaw(text);    Writer    w    =    _writer.createWriter(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
287	[BUG]  [BUGGY]  writeRaw(room);  Writer  w  =  _writer.createWriter(text,  _outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  writeRaw(int)  [FE]          StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(room);  Writer  w  =  _writer.createWriter(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(room);  Writer  w  =  _writer.createWriter(text,  _outputBuffer,  _outputTail);	  writeRaw(text);    Writer    w    =    _writer.createWriter(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(int)	90	None	replace
288	[BUG]  [BUGGY]  _writer  =  _writer.createWriter(text,  _outputBuffer,  _outputTail);  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]            StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer  =  _writer.createWriter(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer  =  _writer.createWriter(text,  _outputBuffer,  _outputTail);	  writeRaw(text);    Writer    w    =    _writer.createWriter(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	90	None	replace
289	[BUG]  [BUGGY]  w  =  _writer.createWriter(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  w  [FE]              StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  w  =  _writer.createWriter(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	w  =  _writer.createWriter(text,  _outputBuffer,  _outputTail);	  writeRaw(text);    Writer    w    =    _writer.createWriter(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  w	90	None	replace
290	[BUG]  [BUGGY]  Writer  writer  =  _writer.createWriteRaw(text);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  writer  =  _writer.createWriteRaw(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  writer  =  _writer.createWriteRaw(text);	  Writer    w    =    text.createWriteRaw(_writer);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
291	[BUG]  [BUGGY]  Writer  w  =  this._writer.createWriteRaw(text);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  this._writer.createWriteRaw(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  this._writer.createWriteRaw(text);	  Writer    w    =    text.createWriteRaw(_writer);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
292	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite(   "write  text  value   "  +  text);  _verifyValueWrite( "write  text  value   "  +  text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_verifyValueWrite(   "write    text    value   "    +    text);    _verifyValueWrite( "write  text  value   "  +  text);	  	compilable	  [FE]  AssertionFailedError  	50	1	add
293	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value   "  +  text);  _verifyValueWrite( "write  text  value   "  +  text);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite(   "write  text  value   "  +  text);  _verifyValueWrite( "write  text  value   "  +  text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite(   "write    text    value   "    +    text);    _verifyValueWrite( "write  text  value   "  +  text);	  	compilable	  [FE]  AssertionFailedError  	50	1	add
294	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite(   "write  text  value   "  +  text);  _verifyValueWrite( ",write  text  value   "  +  text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_verifyValueWrite(   "write    text    value   "    +    text);    _verifyValueWrite( ",write  text  value   "  +  text);	  	compilable	  [FE]  AssertionFailedError  	50	1	add
295	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value   "  +  text);  _verifyValueWrite( ",write  text  value   "  +  text);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite(   "write  text  value   "  +  text);  _verifyValueWrite( ",write  text  value   "  +  text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite(   "write    text    value   "    +    text);    _verifyValueWrite( ",write  text  value   "  +  text);	  	compilable	  [FE]  AssertionFailedError  	50	1	add
296	[BUG]  [BUGGY]  _writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));	  _writer.write(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	88	None	replace
297	[BUG]  [BUGGY]  _writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  2));  [CE]  'void'  type  not  allowed  here  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  2));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  2));	  _writer.write(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len));    	non-compiled	[CE]  'void'  type  not  allowed  here	88	None	replace
298	[BUG]  [BUGGY]  _writer.writeRaw(text,  len,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  len,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  len,  _outputBuffer,  _outputTail);	  _writer.writeRaw(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
299	[BUG]  [BUGGY]  _writer.writeRaw(text,  _outputBuffer,  _outputTail,  len);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  _outputBuffer,  _outputTail,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  _outputBuffer,  _outputTail,  len);	  _writer.writeRaw(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
300	[BUG]  [BUGGY]  _writer.writeRaw(text,  _outputBuffer,  _outputTail  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  _outputBuffer,  _outputTail  +  1);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  _outputBuffer,  _outputTail  +  1);	  _writer.writeRaw(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	27	1	replace
302	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	27	1	replace
303	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeChars(0,  len,  _outputBuffer,  _outputTail  [CE]  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeChars(0,  len,  _outputBuffer,  _outputTail  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeChars(0,  len,  _outputBuffer,  _outputTail	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	non-compiled	[CE]  	27	None	replace
304	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeRaw( "n ");  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeRaw( "n ");  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  else  {  _writer.writeRaw( "n ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
305	[BUG]  [BUGGY]  if(len  <  SHORT_WRITE)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  [CE]  'void'  type  not  allowed  here  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(len  <  SHORT_WRITE)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(len  <  SHORT_WRITE)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }	  _flushBuffer();    _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len));    	non-compiled	[CE]  'void'  type  not  allowed  here	35	None	replace
306	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }	  _writer.write(text);    if(text!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
307	[BUG]  [BUGGY]  if(room  ==  len)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  len)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  ==  len)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }	  _writer.write(text);    if(text!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
308	[BUG]  [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }  [CE]  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_writer!=  null)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value "));  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value   "));    	non-compiled	[CE]  	66	None	replace
309	[BUG]  [BUGGY]  if(_verifyValueWrite( "write  text  value "))  {  _verifyValueWrite( "write  text  value ");  }  else  {  _verifyValueWrite( "write  text  value ");  }  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_verifyValueWrite( "write  text  value "))  {  _verifyValueWrite( "write  text  value ");  }  else  {  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_verifyValueWrite( "write  text  value "))  {  _verifyValueWrite( "write  text  value ");  }  else  {  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value   "));    	non-compiled	[CE]  incompatible  types	66	None	replace
310	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  	compilable	  [FE]  AssertionFailedError  	72	1	add
311	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  	compilable	  [FE]  AssertionFailedError  	72	1	add
312	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTa  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTa  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTa	  	non-compiled	[CE]  ')'  expected	72	None	add
313	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail	  	non-compiled	[CE]  ')'  expected	72	None	add
314	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  	non-compiled	[CE]  ';'  expected	72	None	add
315	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTa  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTa  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTa	  	non-compiled	[CE]  ';'  expected	72	None	add
316	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text,  0,  _outputBuffer.length);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text,  0,  _outputBuffer.length);	  _writer.write(text);    TextUtilities.writeString(text,    _outputBuffer,    _outputTail);    	compilable	  [FE]  AssertionFailedError  	58	1	replace
317	[BUG]  [BUGGY]  _writer.write(text,  0,  _outputBuffer.length);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text,  0,  _outputBuffer.length);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text,  0,  _outputBuffer.length);	  _writer.write(text);    TextUtilities.writeString(text,    _outputBuffer,    _outputTail);    	compilable	  [FE]  AssertionFailedError  	58	1	replace
318	[BUG]  [BUGGY]  writer.write(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  writer  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writer.write(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writer.write(text,  _outputBuffer,  _outputTail);	  _writer.write(text);    TextUtilities.writeString(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  writer	58	None	replace
319	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    writeRaw(text);  writeRaw(text);  writeRaw(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text);        writeRaw(text);    writeRaw(text);  writeRaw(text);	  	compilable	  [FE]  StackOverflowError  	36	1	add
320	[BUG]  [BUGGY]  writeRaw(text);    writeRaw(text);  writeRaw(text);  writeRaw(text);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    writeRaw(text);  writeRaw(text);  writeRaw(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        writeRaw(text);    writeRaw(text);  writeRaw(text);	  	compilable	  [FE]  StackOverflowError  	36	1	add
321	[BUG]  [BUGGY]  writeRaw(text);    writeRaw(text);  _writer.writeRaw(text);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    writeRaw(text);  _writer.writeRaw(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        writeRaw(text);    _writer.writeRaw(text);	  	non-compiled	[CE]  cannot  find  symbol	36	None	add
322	[BUG]  [BUGGY]  writeRaw(text);    writeRaw(text);  _writeRaw(text);  writeRaw(text);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    writeRaw(text);  _writeRaw(text);  writeRaw(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        writeRaw(text);    _writeRaw(text);  writeRaw(text);	  	non-compiled	[CE]  cannot  find  symbol	36	None	add
323	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    writeRaw(text);  _flushBuffer();  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text);        writeRaw(text);    _flushBuffer();	  	compilable	  [FE]  StackOverflowError  	36	1	add
324	[BUG]  [BUGGY]  writeRaw(text);    writeRaw(text);  _flushBuffer();  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    writeRaw(text);  _flushBuffer();  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        writeRaw(text);    _flushBuffer();	  	compilable	  [FE]  StackOverflowError  	36	1	add
325	[BUG]  [BUGGY]  writeRaw(text);    writeRaw(text);  _writer.writeRaw(text);  writeRaw(text);  [CE]  cannot  find  symbol  [FE]            StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    writeRaw(text);  _writer.writeRaw(text);  writeRaw(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        writeRaw(text);    _writer.writeRaw(text);  writeRaw(text);	  	non-compiled	[CE]  cannot  find  symbol	36	None	add
326	[BUG]  [BUGGY]  _writer.write(text,  0,  _outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  write(String,int,char[],int)  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text,  0,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text,  0,  _outputBuffer,  _outputTail);	  _writer.write(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int,char[],int)	24	None	replace
327	[BUG]  [BUGGY]  _writer.write(text,  _outputBuffer,  _outputTail,  len);  [CE]  no  suitable  method  found  for  write(String,char[],int,int)  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text,  _outputBuffer,  _outputTail,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text,  _outputBuffer,  _outputTail,  len);	  _writer.write(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,char[],int,int)	24	None	replace
328	[BUG]  [BUGGY]  _writer.write(text,  len,  _outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  write(String,int,char[],int)  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text,  len,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text,  len,  _outputBuffer,  _outputTail);	  _writer.write(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int,char[],int)	24	None	replace
329	[BUG]  [BUGGY]  _writer.write(text,  null,  _outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  write(String,<null>,char[],int)  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text,  null,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text,  null,  _outputBuffer,  _outputTail);	  _writer.write(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,<null>,char[],int)	24	None	replace
330	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  text,  room);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,String,int)  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value ",  text,  room);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value ",  text,  room);	  _verifyValueWrite(   "write    text    value   ",    text);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,String,int)	83	None	replace
331	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);	  	non-compiled	[CE]  ';'  expected	70	None	add
332	[BUG]  [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  room));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]        StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  room));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  room));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	84	None	replace
333	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer();    _flushBuffer();  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_flushBuffer();        _flushBuffer();    if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	1	add
334	[BUG]  [BUGGY]  _flushBuffer();    _flushBuffer();  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer();    _flushBuffer();  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();        _flushBuffer();    if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	1	add
335	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer();    _flushBuffer();  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_flushBuffer();        _flushBuffer();    if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
336	[BUG]  [BUGGY]  _flushBuffer();    _flushBuffer();  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer();    _flushBuffer();  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();        _flushBuffer();    if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
337	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer();    _flushBuffer();  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_flushBuffer();        _flushBuffer();    if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _flushBuffer();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	1	add
338	[BUG]  [BUGGY]  _flushBuffer();    _flushBuffer();  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _flushBuffer();  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer();    _flushBuffer();  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();        _flushBuffer();    if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _flushBuffer();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	1	add
339	[BUG]  [BUGGY]  _flushBuffer();    _flushBuffer();  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _flush  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer();    _flushBuffer();  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _flush  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();        _flushBuffer();    if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _flush	  	non-compiled	[CE]  ';'  expected	30	None	add
340	[BUG]  [BUGGY]  _writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail  +  1,  _outputTail);  [CE]  no  suitable  method  found  for  getChars(int,int)  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail  +  1,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail  +  1,  _outputTail);	  _flushBuffer();    _writeRaw(text.getChars(0,    len),    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int)	64	None	replace
341	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  }	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    Writer();    }    	non-compiled	[CE]  ';'  expected	12	None	replace
342	[BUG]  [BUGGY]  if(room  ==  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  ==  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  }	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    Writer();    }    	non-compiled	[CE]  ';'  expected	12	None	replace
343	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
344	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
345	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
346	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
347	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  =  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  =  len;  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
348	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  =  len;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  =  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  =  len;  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
349	[BUG]  [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  [CE]  'void'  type  not  allowed  here  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }	  _flushBuffer();    _flushBuffer(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	97	None	replace
350	[BUG]  [BUGGY]  if(room  ==  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  [CE]  'void'  type  not  allowed  here  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  ==  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }	  _flushBuffer();    _flushBuffer(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	97	None	replace
351	[BUG]  [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  else  {  _flushBuffer();  }  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  else  {  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  else  {  _flushBuffer();  }	  _flushBuffer();    _flushBuffer(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	97	None	replace
352	[BUG]  [BUGGY]  if(room  ==  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  else  {  _flushBuffer();  }  [CE]  'void'  type  not  allowed  here  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  else  {  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  ==  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  else  {  _flushBuffer();  }	  _flushBuffer();    _flushBuffer(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	97	None	replace
353	[BUG]  [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail),  _outputEnd);  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail),  _outputEnd);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail),  _outputEnd);	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	87	None	replace
354	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  _flushBuffer();  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text);        _writer.write(text,    0,    len);    _flushBuffer();	  	compilable	  [FE]  StackOverflowError  	42	1	add
355	[BUG]  [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  _flushBuffer();  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  _flushBuffer();  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        _writer.write(text,    0,    len);    _flushBuffer();	  	compilable	  [FE]  StackOverflowError  	42	1	add
356	[BUG]  [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  Writer  w  =  _writer.create(text,  0,  len);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  Writer  w  =  _writer.create(text,  0,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        _writer.write(text,    0,    len);    Writer  w  =  _writer.create(text,  0,  len);	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
357	[BUG]  [BUGGY]  _writer.writeRaw(text.getChars(0,  room,  _outputBuffer,  _outputTail));  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text.getChars(0,  room,  _outputBuffer,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text.getChars(0,  room,  _outputBuffer,  _outputTail));	  _writer.writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	21	None	replace
358	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text);  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text);        _writer.write(text);    _flushBuffer();  room  =  _outputEnd  -  _outputTail;	  	compilable	  [FE]  StackOverflowError  	40	1	add
359	[BUG]  [BUGGY]  writeRaw(text);    _writer.write(text);  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text);  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        _writer.write(text);    _flushBuffer();  room  =  _outputEnd  -  _outputTail;	  	compilable	  [FE]  StackOverflowError  	40	1	add
360	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text);  _flushBuffer();  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text);        _writer.write(text);    _flushBuffer();	  	compilable	  [FE]  StackOverflowError  	40	1	add
361	[BUG]  [BUGGY]  writeRaw(text);    _writer.write(text);  _flushBuffer();  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text);  _flushBuffer();  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        _writer.write(text);    _flushBuffer();	  	compilable	  [FE]  StackOverflowError  	40	1	add
362	[BUG]  [BUGGY]  if(_verifyValueWrite( "write  text  value "))  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_verifyValueWrite( "write  text  value "))  {  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_verifyValueWrite( "write  text  value "))  {	  _verifyValueWrite(       "write    text    value       ");    if(_verifyValueWrite(   "write    text    value       ");    	non-compiled	[CE]  ';'  expected	95	None	replace
363	[BUG]  [BUGGY]  if(_verifyValueWrite( "write  text  value ");  [CE]  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_verifyValueWrite( "write  text  value ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_verifyValueWrite( "write  text  value ");	  _verifyValueWrite(       "write    text    value       ");    if(_verifyValueWrite(   "write    text    value       ");    	non-compiled	[CE]  	95	None	replace
364	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);        _writer.write(text);    if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _writer.write(text);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
365	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _writer.write(text);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        _writer.write(text);    if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _writer.write(text);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
366	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);        _writer.write(text);    if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
367	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        _writer.write(text);    if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
368	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);        _writer.write(text);    if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _writer.write(text);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
369	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _writer.write(text);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        _writer.write(text);    if(room  >=  len)  {  _writer.write(text);  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _writer.write(text);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
370	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value "));  [CE]  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value "));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value "));	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value   "));    	non-compiled	[CE]  	66	None	replace
371	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  	non-compiled	[CE]  ';'  expected	10	None	add
372	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  	non-compiled	[CE]  ';'  expected	10	None	add
373	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(text!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(text!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    if(text!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  	non-compiled	[CE]  ';'  expected	10	None	add
374	[BUG]  [BUGGY]  writeRaw(text,  _outputBuffer);  Writer  writer  =  _writer.getWriter(text);  [CE]  no  suitable  method  found  for  writeRaw(String,char[])  [FE]          StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text,  _outputBuffer);  Writer  writer  =  _writer.getWriter(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text,  _outputBuffer);  Writer  writer  =  _writer.getWriter(text);	  writeRaw(text);    Writer    writer    =    _writer.getWriter(text);    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(String,char[])	55	None	replace
375	[BUG]  [BUGGY]  _writeRaw(text,  0,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text,  0,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text,  0,  _outputBuffer,  _outputTail);	  _writeRaw(text,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
376	[BUG]  [BUGGY]  _verifyValueRead( "write  text  value ");  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueRead( "write  text  value ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueRead( "write  text  value ");	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
377	[BUG]  [BUGGY]  _writeValue( "write  text  value ");  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeValue( "write  text  value ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeValue( "write  text  value ");	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
378	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  Text.getChars(0,  len,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  Text  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  Text.getChars(0,  len,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,    len,    _outputBuffer,    _outputTail);    Text.getChars(0,  len,  _outputBuffer,  _outputTail);	  	non-compiled	[CE]  cannot  find  symbol  Text	78	None	add
379	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  TextUtilities.writeRaw(text);  [CE]  cannot  find  symbol  TextUtilities  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  TextUtilities.writeRaw(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,    len,    _outputBuffer,    _outputTail);    TextUtilities.writeRaw(text);	  	non-compiled	[CE]  cannot  find  symbol  TextUtilities	78	None	add
380	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  TextUtilities.writeRaw(text,  null);  [CE]  cannot  find  symbol  TextUtilities  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  TextUtilities.writeRaw(text,  null);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,    len,    _outputBuffer,    _outputTail);    TextUtilities.writeRaw(text,  null);	  	non-compiled	[CE]  cannot  find  symbol  TextUtilities	78	None	add
381	[BUG]  [BUGGY]  _writer  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputTail);  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]          StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputTail);	  writeRaw(text);    Writer    w    =    _writer.createWriteRaw(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	91	None	replace
382	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( ",write  text  value.   ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_verifyValueWrite(   "write    text    value.   ");    _verifyValueWrite( ",write  text  value.   ");	  	compilable	  [FE]  AssertionFailedError  	48	1	add
383	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( ",write  text  value.   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite(   "write  text  value.   ");  _verifyValueWrite( ",write  text  value.   ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite(   "write    text    value.   ");    _verifyValueWrite( ",write  text  value.   ");	  	compilable	  [FE]  AssertionFailedError  	48	1	add
384	[BUG]  [BUGGY]  TextUtilities.writeString(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  TextUtilities  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  TextUtilities.writeString(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	TextUtilities.writeString(text,  _outputBuffer,  _outputTail);	  _writer.write(text);    TextUtilities.writeString(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	58	None	replace
385	[BUG]  [BUGGY]  _writer.write(text,  0,  len);  TextUtilities.writeString(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  TextUtilities  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text,  0,  len);  TextUtilities.writeString(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text,  0,  len);  TextUtilities.writeString(text,  _outputBuffer,  _outputTail);	  _writer.write(text);    TextUtilities.writeString(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	58	None	replace
386	[BUG]  [BUGGY]  _writer.writeRaw(text,  _outputBuffer,  _outputTail  +  len);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  _outputBuffer,  _outputTail  +  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  _outputBuffer,  _outputTail  +  len);	  _writer.writeRaw(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
387	[BUG]  [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd  +  1));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd  +  1));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd  +  1));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail,    _outputEnd));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	23	None	replace
388	[BUG]  [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd,  _maxContiguous));  [CE]  cannot  find  symbol  _maxContiguous  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd,  _maxContiguous));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd,  _maxContiguous));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail,    _outputEnd));    	non-compiled	[CE]  cannot  find  symbol  _maxContiguous	23	None	replace
389	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
390	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
391	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  	non-compiled	[CE]  ';'  expected	7	None	add
392	[BUG]  [BUGGY]  if(room  ==  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputTail);  }  [CE]  'void'  type  not  allowed  here  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputTail);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  ==  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputTail);  }	  _flushBuffer();    _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail),    _outputTail);    	non-compiled	[CE]  'void'  type  not  allowed  here	34	None	replace
393	[BUG]  [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputTail);  }  [CE]  'void'  type  not  allowed  here  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputTail);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputTail);  }	  _flushBuffer();    _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail),    _outputTail);    	non-compiled	[CE]  'void'  type  not  allowed  here	34	None	replace
394	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;	  text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	81	1	replace
395	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1);  _outputTail  +=  len;	  text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	81	1	replace
396	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail	  	non-compiled	[CE]  ')'  expected	74	None	add
397	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _output  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _output  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    _writer.write(text);  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _output	  	non-compiled	[CE]  ')'  expected	74	None	add
398	[BUG]  [BUGGY]  _writer.writeRaw(text,  0,  _outputBuffer);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  0,  _outputBuffer);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  0,  _outputBuffer);	  _writer.writeRaw(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
399	[BUG]  [BUGGY]  writeRaw(text,  0,  _outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  writeRaw(String,int,char[],int)  [FE]          StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text,  0,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text,  0,  _outputBuffer,  _outputTail);	  writeRaw(text,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(String,int,char[],int)	62	None	replace
400	[BUG]  [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));  }  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));  }	  _flushBuffer();    _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	33	None	replace
401	[BUG]  [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputEnd));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputEnd));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputEnd));	  _flushBuffer();    _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	33	None	replace
402	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _reportUnsupportedOperation();  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_reportUnsupportedOperation();	  writeRaw(text);    _writer.write(text);    	compilable	  [FE]  UnsupportedOperationException  	41	1	replace
403	[BUG]  [BUGGY]  _reportUnsupportedOperation();  [FE]  UnsupportedOperationException  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _reportUnsupportedOperation();  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_reportUnsupportedOperation();	  writeRaw(text);    _writer.write(text);    	compilable	  [FE]  UnsupportedOperationException  	41	1	replace
404	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    writeRaw(text);  _writer.write(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text);        writeRaw(text);    _writer.write(text);	  	compilable	  [FE]  StackOverflowError  	36	1	add
405	[BUG]  [BUGGY]  writeRaw(text);    writeRaw(text);  _writer.write(text);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    writeRaw(text);  _writer.write(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        writeRaw(text);    _writer.write(text);	  	compilable	  [FE]  StackOverflowError  	36	1	add
406	[BUG]  [BUGGY]  _writer.write(text,  start,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  start  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text,  start,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text,  start,  _outputBuffer,  _outputTail);	  _writer.write(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  start	24	None	replace
407	[BUG]  [BUGGY]  _writer.write(text,0,  len,  _outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  write(String,int,int,char[],int)  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text,0,  len,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text,0,  len,  _outputBuffer,  _outputTail);	  _writer.write(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,int,int,char[],int)	24	None	replace
408	[BUG]  [BUGGY]  TextUtilities.writeRaw(text,  null,  len);  [CE]  cannot  find  symbol  TextUtilities  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  TextUtilities.writeRaw(text,  null,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	TextUtilities.writeRaw(text,  null,  len);	          TextUtilities.writeRaw(text,    null);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	53	None	replace
409	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  >=  SHORT_WRITE)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(text);    if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	compilable	  [FE]  AssertionFailedError  	71	1	replace
410	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  SHORT_WRITE)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(text);    if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	compilable	  [FE]  AssertionFailedError  	71	1	replace
411	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(text);    if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
412	[BUG]  [BUGGY]  _writer.writeRaw(text,  null,  room);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  null,  room);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  null,  room);	  _writer.writeRaw(text,    null);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
413	[BUG]  [BUGGY]  _writer.writeRaw(text,  0,  null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  0,  null);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  0,  null);	  _writer.writeRaw(text,    null);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
414	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
415	[BUG]  [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  [CE]  'void'  type  not  allowed  here  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }	  _flushBuffer();    _flushBuffer(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len));    	non-compiled	[CE]  'void'  type  not  allowed  here	98	None	replace
416	[BUG]  [BUGGY]  if(room  ==  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  ==  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }	  _flushBuffer();    _flushBuffer(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len));    	non-compiled	[CE]  'void'  type  not  allowed  here	98	None	replace
417	[BUG]  [BUGGY]  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  [CE]  'void'  type  not  allowed  here  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));	  _flushBuffer();    _flushBuffer(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len));    	non-compiled	[CE]  'void'  type  not  allowed  here	98	None	replace
418	[BUG]  [BUGGY]  if(len  <  =  0)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(len  <  =  0)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(len  <  =  0)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }	  _flushBuffer();    _flushBuffer(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
419	[BUG]  [BUGGY]  Writer  text  =  _writer.createWriteRaw(text);  [CE]  variable  text  is  already  defined  in  method  writeRaw(String)  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  text  =  _writer.createWriteRaw(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  text  =  _writer.createWriteRaw(text);	  Writer    w    =    text.createWriteRaw(_writer);    	non-compiled	[CE]  variable  text  is  already  defined  in  method  writeRaw(String)	77	None	replace
420	[BUG]  [BUGGY]  Writingr  w  =  _writer.createWriteRaw(text);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writingr  w  =  _writer.createWriteRaw(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writingr  w  =  _writer.createWriteRaw(text);	  Writer    w    =    text.createWriteRaw(_writer);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
421	[BUG]  [BUGGY]  TextUtilities.writeRaw(text,  _outputTail);  [CE]  cannot  find  symbol  TextUtilities  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  TextUtilities.writeRaw(text,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	TextUtilities.writeRaw(text,  _outputTail);	  _writer.write(text);    TextUtilities.writeRaw(text,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	59	None	replace
422	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value ");  _writer.write(text,  0,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_verifyValueWrite( "write  text  value ");  _writer.write(text,  0,  len);	  writeRaw(text);    _writer.write(text,    0,    len);    	compilable	  [FE]  AssertionFailedError  	43	1	replace
423	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  _writer.write(text,  0,  len);  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value ");  _writer.write(text,  0,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value ");  _writer.write(text,  0,  len);	  writeRaw(text);    _writer.write(text,    0,    len);    	compilable	  [FE]  AssertionFailedError  	43	1	replace
424	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value ");  _writer.write(text,  0,  room);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_verifyValueWrite( "write  text  value ");  _writer.write(text,  0,  room);	  writeRaw(text);    _writer.write(text,    0,    len);    	compilable	  [FE]  AssertionFailedError  	43	1	replace
425	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  _writer.write(text,  0,  room);  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value ");  _writer.write(text,  0,  room);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value ");  _writer.write(text,  0,  room);	  writeRaw(text);    _writer.write(text,    0,    len);    	compilable	  [FE]  AssertionFailedError  	43	1	replace
426	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
427	[BUG]  [BUGGY]  writeRaw(room);  [CE]  no  suitable  method  found  for  writeRaw(int)  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(room);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(room);	  writeRaw(text);    writeRaw(text);    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(int)	37	None	replace
428	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  if(room!=  0)  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  if(room!=  0)  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _writer.write(text);  if(room!=  0)  {  _writer.write(text);  }	  _writer.write(text);    if(text!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
429	[BUG]  [BUGGY]  writeRaw(text,  _outputBuffer.getChars(0,  len,  _outputBuffer,  _outputTail));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text,  _outputBuffer.getChars(0,  len,  _outputBuffer,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text,  _outputBuffer.getChars(0,  len,  _outputBuffer,  _outputTail));	  writeRaw(_writer.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
430	[BUG]  [BUGGY]  writeRaw(text,  _writer.getChars(0,  len,  _outputBuffer,  _outputTail));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text,  _writer.getChars(0,  len,  _outputBuffer,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text,  _writer.getChars(0,  len,  _outputBuffer,  _outputTail));	  writeRaw(_writer.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
431	[BUG]  [BUGGY]  Writer  w  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail));	  writeRaw(_writer.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  ';'  expected	22	None	replace
432	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  TextUtilities.writeRaw(text,  0,  len);  [CE]  cannot  find  symbol  TextUtilities  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]          _writer.write(text,  0,  len);  TextUtilities.writeRaw(text,  0,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	                _writer.write(text,    0,    len);    TextUtilities.writeRaw(text,  0,  len);	  	non-compiled	[CE]  cannot  find  symbol  TextUtilities	18	None	add
433	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  TextUtilities  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]          _writer.write(text,  0,  len);  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	                _writer.write(text,    0,    len);    TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail);	  	non-compiled	[CE]  cannot  find  symbol  TextUtilities	18	None	add
434	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  _writer.write(text,  0,  len);  }  else  {  _writer.write(text,  0,  len);  [CE]  'else'  without  'if'  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]          _writer.write(text,  0,  len);  _writer.write(text,  0,  len);  }  else  {  _writer.write(text,  0,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	                _writer.write(text,    0,    len);    _writer.write(text,  0,  len);  }  else  {  _writer.write(text,  0,  len);	  	non-compiled	[CE]  'else'  without  'if'	18	None	add
435	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  TextUtilities.writeRaw(text,  0,  len);  _writer.write(text,  0,  len);  [CE]  cannot  find  symbol  TextUtilities  [FE]          AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]          _writer.write(text,  0,  len);  TextUtilities.writeRaw(text,  0,  len);  _writer.write(text,  0,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	                _writer.write(text,    0,    len);    TextUtilities.writeRaw(text,  0,  len);  _writer.write(text,  0,  len);	  	non-compiled	[CE]  cannot  find  symbol  TextUtilities	18	None	add
436	[BUG]  [BUGGY]  _writer.write(text.substring(0,  len),  _outputBuffer,  _outputTail  +  1,  _outputTail);  [CE]  no  suitable  method  found  for  write(String,char[],int,int)  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text.substring(0,  len),  _outputBuffer,  _outputTail  +  1,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text.substring(0,  len),  _outputBuffer,  _outputTail  +  1,  _outputTail);	  _writer.write(text.substring(0,    len),    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,char[],int,int)	89	None	replace
437	[BUG]  [BUGGY]  _writer.write(text.substring(0,  len),  _outputBuffer,  _outputTail  +  1);  [CE]  no  suitable  method  found  for  write(String,char[],int)  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text.substring(0,  len),  _outputBuffer,  _outputTail  +  1);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text.substring(0,  len),  _outputBuffer,  _outputTail  +  1);	  _writer.write(text.substring(0,    len),    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,char[],int)	89	None	replace
438	[BUG]  [BUGGY]  _writer.write(text.substring(0,  room),  _outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  write(String,char[],int)  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text.substring(0,  room),  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text.substring(0,  room),  _outputBuffer,  _outputTail);	  _writer.write(text.substring(0,    len),    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  write(String,char[],int)	89	None	replace
439	[BUG]  [BUGGY]  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail  +  len);  room  =  0;  [CE]  cannot  find  symbol  TextUtilities  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail  +  len);  room  =  0;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail  +  len);  room  =  0;	          TextUtilities.writeRaw(text,    _outputBuffer,    _outputTail);    room    =    0;    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	96	None	replace
440	[BUG]  [BUGGY]  writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail,  _outputEnd);  [CE]  no  suitable  method  found  for  getChars(int,int)  [FE]            StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail,  _outputEnd);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail,  _outputEnd);	  writeRaw(text.getChars(0,    len),    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int)	63	None	replace
441	[BUG]  [BUGGY]  writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail,  _outputHead);  [CE]  no  suitable  method  found  for  getChars(int,int)  [FE]              StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail,  _outputHead);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail,  _outputHead);	  writeRaw(text.getChars(0,    len),    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int)	63	None	replace
442	[BUG]  [BUGGY]  writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail  +  1,  _outputTail);  [CE]  no  suitable  method  found  for  getChars(int,int)  [FE]                StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail  +  1,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(0,  len),  _outputBuffer,  _outputTail  +  1,  _outputTail);	  writeRaw(text.getChars(0,    len),    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int)	63	None	replace
443	[BUG]  [BUGGY]  _writeRaw(text,  len,  _outputBuffer,  _outputTail));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text,  len,  _outputBuffer,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text,  len,  _outputBuffer,  _outputTail));	  _writeRaw(text.getChars(1,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  ';'  expected	93	None	replace
444	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ",  room,  text);  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,int,String)  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value ",  room,  text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value ",  room,  text);	  _verifyValueWrite(   "write    text    value   ",    text);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,int,String)	83	None	replace
445	[BUG]  [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  room  +  1));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]        StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  room  +  1));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  room  +  1));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	1	None	replace
446	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  >=  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	29	1	replace
447	[BUG]  [BUGGY]  if(room  >=  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	29	1	replace
448	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  else  {  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  >=  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  else  {  _flushBuffer();  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	29	1	replace
449	[BUG]  [BUGGY]  if(room  >=  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  else  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  else  {  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( ",write  text  value ");  }  else  {  _flushBuffer();  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   ",write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	29	1	replace
450	[BUG]  [BUGGY]  writeRaw(text,  0,  _outputBuffer);  [CE]  no  suitable  method  found  for  writeRaw(String,int,char[])  [FE]        StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text,  0,  _outputBuffer);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text,  0,  _outputBuffer);	  writeRaw(text,    _outputBuffer);    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(String,int,char[])	61	None	replace
451	[BUG]  [BUGGY]  writeRaw(text,  null,  _outputBuffer);  [CE]  no  suitable  method  found  for  writeRaw(String,<null>,char[])  [FE]          StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text,  null,  _outputBuffer);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text,  null,  _outputBuffer);	  writeRaw(text,    _outputBuffer);    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(String,<null>,char[])	61	None	replace
452	[BUG]  [BUGGY]  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    _writer    =    new    Writer();    _writer.write(text);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	9	None	replace
453	[BUG]  [BUGGY]  _writer.write(text.getChars(0,  room,  _outputBuffer,  _outputTail));  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text.getChars(0,  room,  _outputBuffer,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text.getChars(0,  room,  _outputBuffer,  _outputTail));	  _writer.write(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	86	None	replace
454	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  Text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  [CE]  cannot  find  symbol  Text  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  Text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    Text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;	  	non-compiled	[CE]  cannot  find  symbol  Text	80	None	add
455	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  TextUtilities.writeRaw(text);  [CE]  cannot  find  symbol  TextUtilities  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  TextUtilities.writeRaw(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    TextUtilities.writeRaw(text);	  	non-compiled	[CE]  cannot  find  symbol  TextUtilities	80	None	add
456	[BUG]  [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputEnd);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputEnd);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.createWriteRaw(text,  _outputBuffer,  _outputEnd);	  Writer    w    =    _writer.createWriteRaw(text,    _outputBuffer);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
457	[BUG]  [BUGGY]  _writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  room));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  room));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  room));	  _writer.write(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	88	None	replace
458	[BUG]  [BUGGY]  if(room  ==  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  [CE]  'void'  type  not  allowed  here  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  ==  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }	  _flushBuffer();    _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len));    	non-compiled	[CE]  'void'  type  not  allowed  here	35	None	replace
459	[BUG]  [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  [CE]  'void'  type  not  allowed  here  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }	  _flushBuffer();    _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len));    	non-compiled	[CE]  'void'  type  not  allowed  here	35	None	replace
460	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);	  	non-compiled	[CE]  ';'  expected	72	None	add
461	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    _writer    =    new    Writer();    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
462	[BUG]  [BUGGY]  if(room  ==  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  ==  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    _writer    =    new    Writer();    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
463	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);	  _writer.write(text);    if(_writer!=    null)    {    _writer    =    new    Writer();    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _writer.write(text);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
464	[BUG]  [BUGGY]  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail  +  len);  return;  [CE]  cannot  find  symbol  TextUtilities  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail  +  len);  return;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	TextUtilities.writeRaw(text,  _outputBuffer,  _outputTail  +  len);  return;	          TextUtilities.writeRaw(text,    _outputBuffer,    _outputTail);    return;    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	52	None	replace
465	[BUG]  [BUGGY]  _writer  w  =  _writer.createWriter(text,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer  w  =  _writer.createWriter(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer  w  =  _writer.createWriter(text,  _outputBuffer,  _outputTail);	  writeRaw(text);    Writer    w    =    _writer.createWriter(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
466	[BUG]  [BUGGY]  Writer  w  =  _writer.createWriter(text,  len,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  _writer.createWriter(text,  len,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.createWriter(text,  len,  _outputBuffer,  _outputTail);	  writeRaw(text);    Writer    w    =    _writer.createWriter(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
467	[BUG]  [BUGGY]  _flushBuffer(len,  _outputBuffer,  _outputTail);  [CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer(len,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer(len,  _outputBuffer,  _outputTail);	  _flushBuffer(buffer,    _outputTail);    	non-compiled	[CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;	60	None	replace
468	[BUG]  [BUGGY]  _flushBuffer(buffer,  _outputTail  +  len);  [CE]  cannot  find  symbol  buffer  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer(buffer,  _outputTail  +  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer(buffer,  _outputTail  +  len);	  _flushBuffer(buffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  buffer	60	None	replace
469	[BUG]  [BUGGY]  if(room  ==  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  [CE]  'void'  type  not  allowed  here  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  ==  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }	  _flushBuffer();    _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	32	None	replace
470	[BUG]  [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _flushBuffer();  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }	  _flushBuffer();    _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	32	None	replace
471	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(room!=  SHORT_WRITE)  {  _writer.write(text);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(room!=  SHORT_WRITE)  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  SHORT_WRITE)  {  _writer.write(text);  if(room!=  SHORT_WRITE)  {  _writer.write(text);  }	  _writer.write(text);    if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
472	[BUG]  [BUGGY]  _writeRaw(text.getChars(0,  room,  _outputBuffer,  _outputTail));  [CE]  'void'  type  not  allowed  here  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text.getChars(0,  room,  _outputBuffer,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(0,  room,  _outputBuffer,  _outputTail));	  _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	68	None	replace
473	[BUG]  [BUGGY]  TextUtilities.writeRaw(text,  len,  _outputBuffer,  _outputTail);  room  =  0;  [CE]  cannot  find  symbol  TextUtilities  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  TextUtilities.writeRaw(text,  len,  _outputBuffer,  _outputTail);  room  =  0;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	TextUtilities.writeRaw(text,  len,  _outputBuffer,  _outputTail);  room  =  0;	          TextUtilities.writeRaw(text,    _outputBuffer,    _outputTail);    room    =    0;    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	96	None	replace
474	[BUG]  [BUGGY]  _writeValueWrite( "write  text  value ");  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeValueWrite( "write  text  value ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeValueWrite( "write  text  value ");	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value   "));    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
475	[BUG]  [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputEnd));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputEnd));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputEnd));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	87	None	replace
476	[BUG]  [BUGGY]  Writer  w  =  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail);	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1,    _outputTail));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	87	None	replace
477	[BUG]  [BUGGY]  _writer.writeRaw(text,  room,  len);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  room,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  room,  len);	  _writer.writeRaw(text,    room);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
478	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  [CE]  'else'  without  'if'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	80	None	add
479	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  TextUtilities.writeRaw(text,  null,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  TextUtilities  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  TextUtilities.writeRaw(text,  null,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    TextUtilities.writeRaw(text,  null,  _outputBuffer,  _outputTail);	  	non-compiled	[CE]  cannot  find  symbol  TextUtilities	80	None	add
480	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text,  0,  len);  _outputTail  +=  len;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text,  0,  len);  _outputTail  +=  len;	  text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    	compilable	  [FE]  IndexOutOfBoundsException  	81	1	replace
481	[BUG]  [BUGGY]  _writer.write(text,  0,  len);  _outputTail  +=  len;  [FE]  IndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text,  0,  len);  _outputTail  +=  len;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text,  0,  len);  _outputTail  +=  len;	  text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    	compilable	  [FE]  IndexOutOfBoundsException  	81	1	replace
482	[BUG]  [BUGGY]  _writer.getChars(0,  len,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.getChars(0,  len,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.getChars(0,  len,  _outputBuffer,  _outputTail);	  text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
483	[BUG]  [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputEnd);  [CE]  'void'  type  not  allowed  here  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputEnd);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputEnd);	  _flushBuffer();    _writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail),    _outputTail);    	non-compiled	[CE]  'void'  type  not  allowed  here	34	None	replace
484	[BUG]  [BUGGY]  writeRaw(text,  null,  _outputBuffer,  _outputTail);  [CE]  no  suitable  method  found  for  writeRaw(String,<null>,char[],int)  [FE]          StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text,  null,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text,  null,  _outputBuffer,  _outputTail);	  writeRaw(text,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(String,<null>,char[],int)	62	None	replace
485	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text,  0,  _outputBuffer.length);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text,  0,  _outputBuffer.length);	  writeRaw(text,    _outputTail);    	compilable	  [FE]  AssertionFailedError  	62	1	replace
486	[BUG]  [BUGGY]  writeRaw(text,  0,  _outputBuffer.length);  [FE]  AssertionFailedError  [FE]            StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text,  0,  _outputBuffer.length);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text,  0,  _outputBuffer.length);	  writeRaw(text,    _outputTail);    	compilable	  [FE]  AssertionFailedError  	62	1	replace
487	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  if(_writer  ==  null)  {  _writer  =  new  Writer();  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  if(_writer  ==  null)  {  _writer  =  new  Writer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _writer.write(text);  if(_writer  ==  null)  {  _writer  =  new  Writer();  }	  _writer.write(text);    if(_writer!=    null)    {    if(_writer!=    null)    {    _writer    =    new    Writer();    }    	non-compiled	[CE]  ';'  expected	12	None	replace
488	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    writeRaw(text);  _writer.write(text,  0,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text);        writeRaw(text);    _writer.write(text,  0,  len);	  	compilable	  [FE]  StackOverflowError  	36	1	add
489	[BUG]  [BUGGY]  writeRaw(text);    writeRaw(text);  _writer.write(text,  0,  len);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    writeRaw(text);  _writer.write(text,  0,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        writeRaw(text);    _writer.write(text,  0,  len);	  	compilable	  [FE]  StackOverflowError  	36	1	add
490	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    writeRaw(text);  writeRaw(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text);        writeRaw(text);    writeRaw(text);	  	compilable	  [FE]  StackOverflowError  	36	1	add
491	[BUG]  [BUGGY]  writeRaw(text);    writeRaw(text);  writeRaw(text);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    writeRaw(text);  writeRaw(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        writeRaw(text);    writeRaw(text);	  	compilable	  [FE]  StackOverflowError  	36	1	add
492	[BUG]  [BUGGY]  _verifyValueWrite(   "write  text  value   "  +  text);  if(_verifyValueWrite( "write  text  value   "  +  text);  [CE]  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite(   "write  text  value   "  +  text);  if(_verifyValueWrite( "write  text  value   "  +  text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite(   "write    text    value   "    +    text);    if(_verifyValueWrite( "write  text  value   "  +  text);	  	non-compiled	[CE]  	50	None	add
493	[BUG]  [BUGGY]  writeRaw(text);  Writer  w  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail  +  len);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);  Writer  w  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail  +  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);  Writer  w  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail  +  len);	  writeRaw(text);    Writer    w    =    _writer.createWriteRoot(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
494	[BUG]  [BUGGY]  writeRaw(text);  Writer  w  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail  +  1,  len);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);  Writer  w  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail  +  1,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);  Writer  w  =  _writer.createWriteRoot(text,  _outputBuffer,  _outputTail  +  1,  len);	  writeRaw(text);    Writer    w    =    _writer.createWriteRoot(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
495	[BUG]  [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd,  _bufferLength));  [CE]  cannot  find  symbol  _bufferLength  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd,  _bufferLength));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd,  _bufferLength));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail,    _outputEnd));    	non-compiled	[CE]  cannot  find  symbol  _bufferLength	23	None	replace
496	[BUG]  [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd,  _bufferHead));  [CE]  cannot  find  symbol  _bufferHead  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd,  _bufferHead));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail,  _outputEnd,  _bufferHead));	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail,    _outputEnd));    	non-compiled	[CE]  cannot  find  symbol  _bufferHead	23	None	replace
497	[BUG]  [BUGGY]  Writer  w  =  _writer.createWriter(text,  room,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  _writer.createWriter(text,  room,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.createWriter(text,  room,  _outputBuffer,  _outputTail);	  writeRaw(text);    Writer    w    =    _writer.createWriter(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
498	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
499	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
500	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);        _writer.write(text);    if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
501	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        _writer.write(text);    if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
502	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);        _writer.write(text);    if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
503	[BUG]  [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    _writer.write(text);  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        _writer.write(text);    if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
504	[BUG]  [BUGGY]  _writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail  +  1,  _outputTail));	  _writeRaw(text.getChars(1,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	93	None	replace
505	[BUG]  [BUGGY]  writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail  +  1));  [CE]  'void'  type  not  allowed  here  [FE]          StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail  +  1));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(1,  len,  _outputBuffer,  _outputTail  +  1));	  writeRaw(text.getChars(1,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	85	None	replace
506	[BUG]  [BUGGY]  _writer.write(text.getChars(1,  len,  _outputBuffer,  _outputTail));  [CE]  'void'  type  not  allowed  here  [FE]            StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text.getChars(1,  len,  _outputBuffer,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text.getChars(1,  len,  _outputBuffer,  _outputTail));	  writeRaw(text.getChars(1,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	85	None	replace
507	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  if(room  ==  len)  {  _writeRaw(text);  }  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value ");  if(room  ==  len)  {  _writeRaw(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value ");  if(room  ==  len)  {  _writeRaw(text);  }	  writeRaw(text);    _writeRaw(text);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
508	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ");  if(room  >=  len)  {  _writeRaw(text);  }  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value ");  if(room  >=  len)  {  _writeRaw(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value ");  if(room  >=  len)  {  _writeRaw(text);  }	  writeRaw(text);    _writeRaw(text);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
509	[BUG]  [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1),  _outputHead  +  1);  [CE]  'void'  type  not  allowed  here  [FE]        StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1),  _outputHead  +  1);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1),  _outputHead  +  1);	  writeRaw(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    1));    	non-compiled	[CE]  'void'  type  not  allowed  here	1	None	replace
510	[BUG]  [BUGGY]  Writer  text  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputHead);  [CE]  variable  text  is  already  defined  in  method  writeRaw(String)  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  text  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputHead);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  text  =  _writer.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputHead);	  Writer    text    =    _writer.getChars(0,    len,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  variable  text  is  already  defined  in  method  writeRaw(String)	65	None	replace
511	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  >=  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	27	1	replace
512	[BUG]  [BUGGY]  if(room  >=  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	27	1	replace
513	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  else  {  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  >=  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  else  {  _flushBuffer();  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	27	1	replace
514	[BUG]  [BUGGY]  if(room  >=  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  else  {  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  else  {  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _verifyValueWrite( "write  text  value ");  _verifyValueWrite( "write  text  value ");  }  else  {  _flushBuffer();  }	  _verifyValueWrite(       "write    text    value       ");    _verifyValueWrite(   "write    text    value       ");    	compilable	  [FE]  AssertionFailedError  	27	1	replace
515	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer();    _flushBuffer();  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_flushBuffer();        _flushBuffer();    if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	1	add
516	[BUG]  [BUGGY]  _flushBuffer();    _flushBuffer();  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer();    _flushBuffer();  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();        _flushBuffer();    if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _flushBuffer();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	1	add
517	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer();    _flushBuffer();  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_flushBuffer();        _flushBuffer();    if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _flushBuffer();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	1	add
518	[BUG]  [BUGGY]  _flushBuffer();    _flushBuffer();  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _flushBuffer();  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer();    _flushBuffer();  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();        _flushBuffer();    if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _flushBuffer();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	1	add
519	[BUG]  [BUGGY]  _flushBuffer();    _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  _flushBuffer();  [CE]  'void'  type  not  allowed  here  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer();    _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  _flushBuffer();  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();        _flushBuffer();    _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  _flushBuffer();	  	non-compiled	[CE]  'void'  type  not  allowed  here	30	None	add
520	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer();    _flushBuffer();  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_flushBuffer();        _flushBuffer();    if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
521	[BUG]  [BUGGY]  _flushBuffer();    _flushBuffer();  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer();    _flushBuffer();  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer();        _flushBuffer();    if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
522	[BUG]  [BUGGY]  writeRaw(text,  len,  _outputBuffer);  [CE]  no  suitable  method  found  for  writeRaw(String,int,char[])  [FE]        StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text,  len,  _outputBuffer);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text,  len,  _outputBuffer);	  writeRaw(text,    _outputBuffer);    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(String,int,char[])	61	None	replace
523	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value "  +  text.toString());  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_verifyValueWrite( "write  text  value "  +  text.toString());	  _verifyValueWrite(   "write    text    value   "    +    text);    	compilable	  [FE]  AssertionFailedError  	51	1	replace
524	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value "  +  text.toString());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value "  +  text.toString());  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value "  +  text.toString());	  _verifyValueWrite(   "write    text    value   "    +    text);    	compilable	  [FE]  AssertionFailedError  	51	1	replace
525	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  	non-compiled	[CE]  ';'  expected	74	None	add
526	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  if(room  >=  len)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  if(room  >=  len)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    if(room  >=  len)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  	non-compiled	[CE]  ';'  expected	74	None	add
527	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  	non-compiled	[CE]  ';'  expected	74	None	add
528	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  le  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  le  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    if(_writer!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  le	  	non-compiled	[CE]  ';'  expected	74	None	add
529	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _flushBuffer();    _flushBuffer();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	replace
530	[BUG]  [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _flushBuffer();    _flushBuffer();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	replace
531	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }	  _flushBuffer();    _flushBuffer();    	compilable	  [FE]  AssertionFailedError  	31	1	replace
532	[BUG]  [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }	  _flushBuffer();    _flushBuffer();    	compilable	  [FE]  AssertionFailedError  	31	1	replace
533	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  _flushBuffer();    _flushBuffer();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	replace
534	[BUG]  [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _flushBuffer();  _flushBuffer();  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  _flushBuffer();    _flushBuffer();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	replace
535	[BUG]  [BUGGY]  if(room!=  len)  {  _writer  =  new  Writer();  _writer.write(text);  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]            AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room!=  len)  {  _writer  =  new  Writer();  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room!=  len)  {  _writer  =  new  Writer();  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    _writer    =    new    Writer();    _writer.write(text);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	9	None	replace
536	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
537	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  _writer.write(text);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  _writer.write(text);  }  if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    if(room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {  _writer.write(text);  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
538	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  TextUtilities.writeRaw(text,  getCurrentName());  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail);  TextUtilities.writeRaw(text,  getCurrentName());  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,    len,    _outputBuffer,    _outputTail);    TextUtilities.writeRaw(text,  getCurrentName());	  	non-compiled	[CE]  cannot  find  symbol	78	None	add
539	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _reportError( "Current  context  not  an  ARRAY  but "+room);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_reportError( "Current  context  not  an  ARRAY  but "+room);	  writeRaw(text);    _writer.write(text);    	compilable	  [FE]  JsonGenerationException  	41	1	replace
540	[BUG]  [BUGGY]  _reportError( "Current  context  not  an  ARRAY  but "+room);  [FE]  JsonGenerationException  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _reportError( "Current  context  not  an  ARRAY  but "+room);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_reportError( "Current  context  not  an  ARRAY  but "+room);	  writeRaw(text);    _writer.write(text);    	compilable	  [FE]  JsonGenerationException  	41	1	replace
541	[BUG]  [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  room,  len);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  room,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.createWriteRaw(text,  room,  len);	  Writer    w    =    _writer.createWriteRaw(text,    room);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
542	[BUG]  [BUGGY]  Writer  w  =  _writer.writeRaw(text);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  _writer.writeRaw(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.writeRaw(text);	  writeRaw(text);    _writer.writeRaw(text);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
543	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    if(room  >=  len)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  	non-compiled	[CE]  ';'  expected	72	None	add
544	[BUG]  [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  le  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  le  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(_writer!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    if(_writer!=  null)  {  _writer.write(text);  if(_writer!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  le	  	non-compiled	[CE]  ';'  expected	72	None	add
545	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    if(text!=  null)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  	non-compiled	[CE]  ';'  expected	70	None	add
546	[BUG]  [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  if(room  >=  len)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text);    if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  if(room  >=  len)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text);        if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _outputTail    +=    len;    }    if(room  >=  len)  {  _writer.write(text);  if(text!=  null)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  	non-compiled	[CE]  ';'  expected	70	None	add
547	[BUG]  [BUGGY]  _flushBuffer(text,  _outputBuffer,  _outputTail);  [CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer(text,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer(text,  _outputBuffer,  _outputTail);	  _flushBuffer(buffer,    _outputTail);    	non-compiled	[CE]  method  _flushBuffer  in  class  WriterBasedJsonGenerator  cannot  be  applied  to  given  types;	60	None	replace
548	[BUG]  [BUGGY]  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  [CE]  'void'  type  not  allowed  here  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));	  _flushBuffer(buffer,    _outputTail);    	non-compiled	[CE]  'void'  type  not  allowed  here	60	None	replace
549	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  	compilable	  [FE]  AssertionFailedError  	18	1	add
550	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  	compilable	  [FE]  AssertionFailedError  	18	1	add
551	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _writer.write(text,  0,  len);  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]      AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _writer.write(text,  0,  len);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer  =  new  Writer();  _writer.write(text,  0,  len);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _writer.write(text,  0,  len);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	18	None	add
552	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  _writer.write(text,  0,  len);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  _writer.write(text,  0,  len);  }	  	compilable	  [FE]  AssertionFailedError  	18	1	add
553	[BUG]  [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  _writer.write(text,  0,  len);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]          _writer.write(text,  0,  len);  if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  _writer.write(text,  0,  len);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	                _writer.write(text,    0,    len);    if(_writer!=  null)  {  _writer.write(text,  0,  len);  }  else  {  _writer.write(text,  0,  len);  }	  	compilable	  [FE]  AssertionFailedError  	18	1	add
554	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer  =  new  Writer();  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer  =  new  Writer();  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _writer  =  new  Writer();  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    _writer    =    new    Writer();    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _writer.write(text);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	76	None	replace
555	[BUG]  [BUGGY]  if(room  ==  len)  {  _writer  =  new  Writer();  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }  [CE]  cannot  assign  a  value  to  final  variable  _writer  [FE]                AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  ==  len)  {  _writer  =  new  Writer();  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  ==  len)  {  _writer  =  new  Writer();  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _writer.write(text);  }	  _writer.write(text);    if(_writer!=    null)    {    _writer    =    new    Writer();    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail);    _writer.write(text);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  _writer	76	None	replace
556	[BUG]  [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputEnd);  [CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputEnd);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	text.getChars(0,  len,  _outputBuffer,  _outputTail  +  1,  _outputEnd);	  text.getChars(0,    len,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  getChars(int,int,char[],int,int)	79	None	replace
557	[BUG]  [BUGGY]  _writer.write(room,  text.getChars(0,  len,  _outputBuffer,  _outputTail));  [CE]  'void'  type  not  allowed  here  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(room,  text.getChars(0,  len,  _outputBuffer,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(room,  text.getChars(0,  len,  _outputBuffer,  _outputTail));	  _writer.write(text);    if(text!=    null)    {    _writer.write(text);    }    else    {    _writer.write(text);    }    	non-compiled	[CE]  'void'  type  not  allowed  here	8	None	replace
558	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value ", "room  value ");  [CE]  no  suitable  method  found  for  _verifyValueWrite(String,String)  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value ", "room  value ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value ", "room  value ");	  _verifyValueWrite(   "write    text    value   ",    text);    	non-compiled	[CE]  no  suitable  method  found  for  _verifyValueWrite(String,String)	83	None	replace
559	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  >=  SHORT_WRITE)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  _writer.write(text);    if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    	compilable	  [FE]  AssertionFailedError  	75	1	replace
560	[BUG]  [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  SHORT_WRITE)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  SHORT_WRITE)  {  _writer.write(text);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len);  _outputTail  +=  len;  }	  _writer.write(text);    if(text!=    null)    {    _writer.write(text);    }    else    {    text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len);    _outputTail    +=    len;    }    	compilable	  [FE]  AssertionFailedError  	75	1	replace
561	[BUG]  [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputEnd);  [CE]  'void'  type  not  allowed  here  [FE]            StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputEnd);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text.getChars(0,  len,  _outputBuffer,  _outputTail),  _outputEnd);	  writeRaw(text.getChars(0,    len),    _outputBuffer,    _outputTail);    	non-compiled	[CE]  'void'  type  not  allowed  here	63	None	replace
562	[BUG]  [BUGGY]  _writeRaw(text,  room,  len);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writeRaw(text,  room,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writeRaw(text,  room,  len);	  _writeRaw(text,    room);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
563	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value.* ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	_verifyValueWrite( "write  text  value.* ");	  _verifyValueWrite(   "write    text    value.   ");    	compilable	  [FE]  AssertionFailedError  	49	1	replace
564	[BUG]  [BUGGY]  _verifyValueWrite( "write  text  value.* ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _verifyValueWrite( "write  text  value.* ");  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_verifyValueWrite( "write  text  value.* ");	  _verifyValueWrite(   "write    text    value.   ");    	compilable	  [FE]  AssertionFailedError  	49	1	replace
565	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  TextUtilities.writeString(text,  _outputBuffer,  _outputTail);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [CE]  cannot  find  symbol  TextUtilities  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  TextUtilities.writeString(text,  _outputBuffer,  _outputTail);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _writer.write(text);  TextUtilities.writeString(text,  _outputBuffer,  _outputTail);  }  else  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  }	  _writer.write(text);    TextUtilities.writeString(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	58	None	replace
566	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  _flushBuffer();  room  =  0;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	writeRaw(text);        _writer.write(text,    0,    len);    _flushBuffer();  room  =  0;	  	compilable	  [FE]  StackOverflowError  	42	1	add
567	[BUG]  [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  _flushBuffer();  room  =  0;  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);    _writer.write(text,  0,  len);  _flushBuffer();  room  =  0;  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);        _writer.write(text,    0,    len);    _flushBuffer();  room  =  0;	  	compilable	  [FE]  StackOverflowError  	42	1	add
568	[BUG]  [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  len,  _outputBuffer,  _outputTail);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  len,  _outputBuffer,  _outputTail);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.createWriteRaw(text,  len,  _outputBuffer,  _outputTail);	  writeRaw(text);    Writer    w    =    _writer.createWriteRaw(text,    _outputBuffer,    _outputTail);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
569	[BUG]  [BUGGY]  TextUtilities.writeRaw(text,  null,  _writer);  [CE]  cannot  find  symbol  TextUtilities  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  TextUtilities.writeRaw(text,  null,  _writer);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	TextUtilities.writeRaw(text,  null,  _writer);	          TextUtilities.writeRaw(text,    null);    	non-compiled	[CE]  cannot  find  symbol  TextUtilities	53	None	replace
570	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	if(room  >=  len)  {  _writer.write(text);  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
571	[BUG]  [BUGGY]  if(room  >=  len)  {  _writer.write(text);  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _writer.write(text);  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _writer.write(text);  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }	  _writer.write(text);    _writer.write(text);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
572	[BUG]  [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  else  {  break;  }  [CE]  'void'  type  not  allowed  here  [FE]        AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  else  {  break;  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  else  {  break;  }	  _flushBuffer();    _flushBuffer(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  'void'  type  not  allowed  here	97	None	replace
573	[BUG]  [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  else  {  writeRawLong(text.getChars(0,  len,  _output  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(room  >=  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  else  {  writeRawLong(text.getChars(0,  len,  _output  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(room  >=  len)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail));  }  else  {  writeRawLong(text.getChars(0,  len,  _output	  _flushBuffer();    _flushBuffer(text.getChars(0,    len,    _outputBuffer,    _outputTail));    	non-compiled	[CE]  ')'  expected	97	None	replace
574	[BUG]  [BUGGY]  _writer.writeRaw(text,  null,  latin);  [CE]  cannot  find  symbol  latin  [FE]              AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text,  null,  latin);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text,  null,  latin);	  _writer.writeRaw(text,    null);    	non-compiled	[CE]  cannot  find  symbol  latin	67	None	replace
575	[BUG]  [BUGGY]  if(len  >  room)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  [CE]  'void'  type  not  allowed  here  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  if(len  >  room)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	if(len  >  room)  {  _flushBuffer();  _flushBuffer(text.getChars(0,  len,  _outputBuffer,  _outputTail  +  len));  }	  _flushBuffer();    _flushBuffer(text.getChars(0,    len,    _outputBuffer,    _outputTail    +    len));    	non-compiled	[CE]  'void'  type  not  allowed  here	98	None	replace
576	[BUG]  [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  _outputHead,  len);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  Writer  w  =  _writer.createWriteRaw(text,  _outputHead,  len);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	Writer  w  =  _writer.createWriteRaw(text,  _outputHead,  len);	  Writer    w    =    _writer.createWriteRaw(text,    len);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
577	[BUG]  [BUGGY]  writeRaw(text);  Writer  writer  =  _writer.getWriter(room);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  writeRaw(text);  Writer  writer  =  _writer.getWriter(room);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	writeRaw(text);  Writer  writer  =  _writer.getWriter(room);	  writeRaw(text);    Writer    writer    =    _writer.getWriter(text);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
578	[BUG]  [BUGGY]  _writer.writeRaw(text);  Writer  writer  =  _writer.getWriter(text);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.writeRaw(text);  Writer  writer  =  _writer.getWriter(text);  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.writeRaw(text);  Writer  writer  =  _writer.getWriter(text);	  writeRaw(text);    Writer    writer    =    _writer.getWriter(text);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
579	[BUG]  [BUGGY]  _writer.write(text.substring(0,  len,  _outputBuffer,  _outputTail));  [CE]  no  suitable  method  found  for  substring(int,int,char[],int)  [FE]          AssertionFailedError      [CONTEXT]      if  (room  ==  0)  {  _flushBuffer();  room  =  _outputEnd  -  _outputTail;  }  if  (room  >=  len)  {  text.getChars(0,  len,  _outputBuffer,  _outputTail);  _outputTail  +=  len;  }  else  {      [BUGGY]  _writer.write(text.substring(0,  len,  _outputBuffer,  _outputTail));  [BUGGY]      }  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  writeRaw  [RETURN_TYPE]  void  String  text  [VARIABLES]  SerializableString  _currentEscape  name  sstr  String  text  boolean  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  features  len  length  offset  qlen  room  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	_writer.write(text.substring(0,  len,  _outputBuffer,  _outputTail));	  _writer.write(text.substring(0,    len),    _outputBuffer,    _outputTail);    	non-compiled	[CE]  no  suitable  method  found  for  substring(int,int,char[],int)	89	None	replace
