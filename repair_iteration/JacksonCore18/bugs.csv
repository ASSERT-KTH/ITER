bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] writeRawLong(text); [FE] AssertionFailedError [CONTEXT] if (room == 0) { _flushBuffer(); room = _outputEnd - _outputTail; }  if (room >= len) { text.getChars(0, len, _outputBuffer, _outputTail); _outputTail += len; } else { [BUGGY] writeRawLong(text); [BUGGY] } } [CLASS] WriterBasedJsonGenerator [METHOD] writeRaw [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len length offset qlen room status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (room == 0) { _flushBuffer(); room = _outputEnd - _outputTail; }  if (room >= len) { text.getChars(0, len, _outputBuffer, _outputTail); _outputTail += len; } else { [BUGGY] [BUGGY] writeRawLong(text); } } [CLASS] WriterBasedJsonGenerator [METHOD] writeRaw [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len length offset qlen room status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	418	418	1	add	
3	[BUG] [BUGGY] int room = _outputEnd - _outputTail; [FE] AssertionFailedError [CONTEXT] private void writeRawLong(String text) throws IOException { [BUGGY] int room = _outputEnd - _outputTail; [BUGGY]  text.getChars(0, room, _outputBuffer, _outputTail); _outputTail += room; _flushBuffer(); int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	476	476	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void writeRawLong(String text) throws IOException { [BUGGY] [BUGGY] int room = _outputEnd - _outputTail;  text.getChars(0, room, _outputBuffer, _outputTail); _outputTail += room; _flushBuffer(); int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	476	476	1	add	
5	[BUG] [BUGGY] text.getChars(0, room, _outputBuffer, _outputTail); [FE] AssertionFailedError [CONTEXT] private void writeRawLong(String text) throws IOException { int room = _outputEnd - _outputTail;  [BUGGY] text.getChars(0, room, _outputBuffer, _outputTail); [BUGGY] _outputTail += room; _flushBuffer(); int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	478	478	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void writeRawLong(String text) throws IOException { int room = _outputEnd - _outputTail;  [BUGGY] [BUGGY] text.getChars(0, room, _outputBuffer, _outputTail); _outputTail += room; _flushBuffer(); int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	478	478	1	add	
7	[BUG] [BUGGY] _outputTail += room; [FE] AssertionFailedError [CONTEXT] private void writeRawLong(String text) throws IOException { int room = _outputEnd - _outputTail;  text.getChars(0, room, _outputBuffer, _outputTail); [BUGGY] _outputTail += room; [BUGGY] _flushBuffer(); int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	479	479	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void writeRawLong(String text) throws IOException { int room = _outputEnd - _outputTail;  text.getChars(0, room, _outputBuffer, _outputTail); [BUGGY] [BUGGY] _outputTail += room; _flushBuffer(); int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	479	479	1	add	
9	[BUG] [BUGGY] _flushBuffer(); [FE] AssertionFailedError [CONTEXT] private void writeRawLong(String text) throws IOException { int room = _outputEnd - _outputTail;  text.getChars(0, room, _outputBuffer, _outputTail); _outputTail += room; [BUGGY] _flushBuffer(); [BUGGY] int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void writeRawLong(String text) throws IOException { int room = _outputEnd - _outputTail;  text.getChars(0, room, _outputBuffer, _outputTail); _outputTail += room; [BUGGY] [BUGGY] _flushBuffer(); int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	480	480	1	add	
11	[BUG] [BUGGY] int offset = room; [FE] AssertionFailedError [CONTEXT] private void writeRawLong(String text) throws IOException { int room = _outputEnd - _outputTail;  text.getChars(0, room, _outputBuffer, _outputTail); _outputTail += room; _flushBuffer(); [BUGGY] int offset = room; [BUGGY] int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	481	481	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void writeRawLong(String text) throws IOException { int room = _outputEnd - _outputTail;  text.getChars(0, room, _outputBuffer, _outputTail); _outputTail += room; _flushBuffer(); [BUGGY] [BUGGY] int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	481	481	1	add	
13	[BUG] [BUGGY] int len = text.length() - room; [FE] AssertionFailedError [CONTEXT] private void writeRawLong(String text) throws IOException { int room = _outputEnd - _outputTail;  text.getChars(0, room, _outputBuffer, _outputTail); _outputTail += room; _flushBuffer(); int offset = room; [BUGGY] int len = text.length() - room; [BUGGY]  while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	482	482	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void writeRawLong(String text) throws IOException { int room = _outputEnd - _outputTail;  text.getChars(0, room, _outputBuffer, _outputTail); _outputTail += room; _flushBuffer(); int offset = room; [BUGGY] [BUGGY] int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	482	482	1	add	
15	[BUG] [BUGGY] while (len > _outputEnd) { [FE] AssertionFailedError [CONTEXT] private void writeRawLong(String text) throws IOException { int room = _outputEnd - _outputTail;  text.getChars(0, room, _outputBuffer, _outputTail); _outputTail += room; _flushBuffer(); int offset = room; int len = text.length() - room; [BUGGY] while (len > _outputEnd) { [BUGGY] int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	484	484	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void writeRawLong(String text) throws IOException { int room = _outputEnd - _outputTail;  text.getChars(0, room, _outputBuffer, _outputTail); _outputTail += room; _flushBuffer(); int offset = room; int len = text.length() - room; [BUGGY] [BUGGY] while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	484	484	1	add	
17	[BUG] [BUGGY] int amount = _outputEnd; [FE] AssertionFailedError [CONTEXT] { int room = _outputEnd - _outputTail;  text.getChars(0, room, _outputBuffer, _outputTail); _outputTail += room; _flushBuffer(); int offset = room; int len = text.length() - room; while (len > _outputEnd) { [BUGGY] int amount = _outputEnd; [BUGGY] text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	485	485	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { int room = _outputEnd - _outputTail;  text.getChars(0, room, _outputBuffer, _outputTail); _outputTail += room; _flushBuffer(); int offset = room; int len = text.length() - room; while (len > _outputEnd) { [BUGGY] [BUGGY] int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	485	485	1	add	
19	[BUG] [BUGGY] text.getChars(offset, offset+amount, _outputBuffer, 0); [FE] AssertionFailedError [CONTEXT] int room = _outputEnd - _outputTail;  text.getChars(0, room, _outputBuffer, _outputTail); _outputTail += room; _flushBuffer(); int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; [BUGGY] text.getChars(offset, offset+amount, _outputBuffer, 0); [BUGGY] _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; _outputTail = len; [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	486	486	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int room = _outputEnd - _outputTail;  text.getChars(0, room, _outputBuffer, _outputTail); _outputTail += room; _flushBuffer(); int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; [BUGGY] [BUGGY] text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; _outputTail = len; [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	486	486	1	add	
21	[BUG] [BUGGY] _outputHead = 0; [FE] AssertionFailedError [CONTEXT]  text.getChars(0, room, _outputBuffer, _outputTail); _outputTail += room; _flushBuffer(); int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); [BUGGY] _outputHead = 0; [BUGGY] _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; _outputTail = len; } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	487	487	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  text.getChars(0, room, _outputBuffer, _outputTail); _outputTail += room; _flushBuffer(); int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); [BUGGY] [BUGGY] _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; _outputTail = len; } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	487	487	1	add	
23	[BUG] [BUGGY] _outputTail = amount; [FE] AssertionFailedError [CONTEXT] text.getChars(0, room, _outputBuffer, _outputTail); _outputTail += room; _flushBuffer(); int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; [BUGGY] _outputTail = amount; [BUGGY] _flushBuffer(); offset += amount; len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; _outputTail = len; } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	488	488	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] text.getChars(0, room, _outputBuffer, _outputTail); _outputTail += room; _flushBuffer(); int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; [BUGGY] [BUGGY] _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; _outputTail = len; } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	488	488	1	add	
25	[BUG] [BUGGY] _flushBuffer(); [FE] AssertionFailedError [CONTEXT] _outputTail += room; _flushBuffer(); int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; [BUGGY] _flushBuffer(); [BUGGY] offset += amount; len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; _outputTail = len; } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] _outputTail += room; _flushBuffer(); int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; [BUGGY] [BUGGY] _flushBuffer(); offset += amount; len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; _outputTail = len; } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	489	489	1	add	
27	[BUG] [BUGGY] offset += amount; [FE] AssertionFailedError [CONTEXT] _flushBuffer(); int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); [BUGGY] offset += amount; [BUGGY] len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; _outputTail = len; } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	490	490	1	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] _flushBuffer(); int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); [BUGGY] [BUGGY] offset += amount; len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; _outputTail = len; } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	490	490	1	add	
29	[BUG] [BUGGY] len -= amount; [FE] AssertionFailedError [CONTEXT] int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; [BUGGY] len -= amount; [BUGGY] }  text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; _outputTail = len; } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	491	491	1	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int offset = room; int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; [BUGGY] [BUGGY] len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; _outputTail = len; } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	491	491	1	add	
31	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; [BUGGY] } [BUGGY]  text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; _outputTail = len; } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	492	492	1	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int len = text.length() - room; while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; [BUGGY] [BUGGY] }  text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; _outputTail = len; } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	492	492	1	add	
33	[BUG] [BUGGY] text.getChars(offset, offset+len, _outputBuffer, 0); [FE] AssertionFailedError [CONTEXT] while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; }  [BUGGY] text.getChars(offset, offset+len, _outputBuffer, 0); [BUGGY] _outputHead = 0; _outputTail = len; } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	494	494	1	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] while (len > _outputEnd) { int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; }  [BUGGY] [BUGGY] text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; _outputTail = len; } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	494	494	1	add	
35	[BUG] [BUGGY] _outputHead = 0; [FE] AssertionFailedError [CONTEXT] int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); [BUGGY] _outputHead = 0; [BUGGY] _outputTail = len; } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	495	495	1	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int amount = _outputEnd; text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); [BUGGY] [BUGGY] _outputHead = 0; _outputTail = len; } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	495	495	1	add	
37	[BUG] [BUGGY] _outputTail = len; [FE] AssertionFailedError [CONTEXT] text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; [BUGGY] _outputTail = len; [BUGGY] } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	496	496	1	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] text.getChars(offset, offset+amount, _outputBuffer, 0); _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; [BUGGY] [BUGGY] _outputTail = len; } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	496	496	1	add	
39	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; _outputTail = len; [BUGGY] } [BUGGY]  [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	497	497	1	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] _outputHead = 0; _outputTail = amount; _flushBuffer(); offset += amount; len -= amount; }  text.getChars(offset, offset+len, _outputBuffer, 0); _outputHead = 0; _outputTail = len; [BUGGY] [BUGGY] } [CLASS] WriterBasedJsonGenerator [METHOD] writeRawLong [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr text String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail amount features len length offset qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	1.0	497	497	1	add	
41	[BUG] [BUGGY] _verifyValueWrite("start an array"); [FE] AssertionFailedError [CONTEXT] public void writeStartArray() throws IOException, JsonGenerationException { [BUGGY] _verifyValueWrite("start an array"); [BUGGY] _writeContext = _writeContext.createChildArrayContext(); if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartArray(this); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail++] = '['; } } [CLASS] WriterBasedJsonGenerator [METHOD] writeStartArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	200	200	1	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void writeStartArray() throws IOException, JsonGenerationException { [BUGGY] [BUGGY] _verifyValueWrite("start an array"); _writeContext = _writeContext.createChildArrayContext(); if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartArray(this); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail++] = '['; } } [CLASS] WriterBasedJsonGenerator [METHOD] writeStartArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	200	200	1	add	
43	[BUG] [BUGGY] _writeContext = _writeContext.createChildArrayContext(); [FE] AssertionFailedError [CONTEXT] public void writeStartArray() throws IOException, JsonGenerationException { _verifyValueWrite("start an array"); [BUGGY] _writeContext = _writeContext.createChildArrayContext(); [BUGGY] if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartArray(this); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail++] = '['; } } [CLASS] WriterBasedJsonGenerator [METHOD] writeStartArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	201	201	1	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void writeStartArray() throws IOException, JsonGenerationException { _verifyValueWrite("start an array"); [BUGGY] [BUGGY] _writeContext = _writeContext.createChildArrayContext(); if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartArray(this); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail++] = '['; } } [CLASS] WriterBasedJsonGenerator [METHOD] writeStartArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	201	201	1	add	
45	[BUG] [BUGGY] if (_cfgPrettyPrinter != null) { [FE] AssertionFailedError [CONTEXT] public void writeStartArray() throws IOException, JsonGenerationException { _verifyValueWrite("start an array"); _writeContext = _writeContext.createChildArrayContext(); [BUGGY] if (_cfgPrettyPrinter != null) { [BUGGY] _cfgPrettyPrinter.writeStartArray(this); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail++] = '['; } } [CLASS] WriterBasedJsonGenerator [METHOD] writeStartArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	202	202	1	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void writeStartArray() throws IOException, JsonGenerationException { _verifyValueWrite("start an array"); _writeContext = _writeContext.createChildArrayContext(); [BUGGY] [BUGGY] if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartArray(this); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail++] = '['; } } [CLASS] WriterBasedJsonGenerator [METHOD] writeStartArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	202	202	1	add	
47	[BUG] [BUGGY] if (_outputTail >= _outputEnd) { [FE] AssertionFailedError [CONTEXT] public void writeStartArray() throws IOException, JsonGenerationException { _verifyValueWrite("start an array"); _writeContext = _writeContext.createChildArrayContext(); if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartArray(this); } else { [BUGGY] if (_outputTail >= _outputEnd) { [BUGGY] _flushBuffer(); } _outputBuffer[_outputTail++] = '['; } } [CLASS] WriterBasedJsonGenerator [METHOD] writeStartArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	205	205	1	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void writeStartArray() throws IOException, JsonGenerationException { _verifyValueWrite("start an array"); _writeContext = _writeContext.createChildArrayContext(); if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartArray(this); } else { [BUGGY] [BUGGY] if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail++] = '['; } } [CLASS] WriterBasedJsonGenerator [METHOD] writeStartArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	205	205	1	add	
49	[BUG] [BUGGY] _outputBuffer[_outputTail++] = '['; [FE] AssertionFailedError [CONTEXT] public void writeStartArray() throws IOException, JsonGenerationException { _verifyValueWrite("start an array"); _writeContext = _writeContext.createChildArrayContext(); if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartArray(this); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } [BUGGY] _outputBuffer[_outputTail++] = '['; [BUGGY] } } [CLASS] WriterBasedJsonGenerator [METHOD] writeStartArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	208	208	1	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void writeStartArray() throws IOException, JsonGenerationException { _verifyValueWrite("start an array"); _writeContext = _writeContext.createChildArrayContext(); if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartArray(this); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } [BUGGY] [BUGGY] _outputBuffer[_outputTail++] = '['; } } [CLASS] WriterBasedJsonGenerator [METHOD] writeStartArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	208	208	1	add	
51	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] _verifyValueWrite("start an array"); _writeContext = _writeContext.createChildArrayContext(); if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartArray(this); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail++] = '['; } [BUGGY] } [BUGGY]  [CLASS] WriterBasedJsonGenerator [METHOD] writeStartArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	210	210	1	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] _verifyValueWrite("start an array"); _writeContext = _writeContext.createChildArrayContext(); if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartArray(this); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail++] = '['; } [BUGGY] [BUGGY] } [CLASS] WriterBasedJsonGenerator [METHOD] writeStartArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	210	210	1	add	
53	[BUG] [BUGGY] if (!_writeContext.inArray()) { [FE] AssertionFailedError [CONTEXT] public void writeEndArray() throws IOException, JsonGenerationException { [BUGGY] if (!_writeContext.inArray()) { [BUGGY] _reportError("Current context not an ARRAY but "+_writeContext.getTypeDesc()); } if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail++] = ']'; } [CLASS] WriterBasedJsonGenerator [METHOD] writeEndArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	215	215	1	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void writeEndArray() throws IOException, JsonGenerationException { [BUGGY] [BUGGY] if (!_writeContext.inArray()) { _reportError("Current context not an ARRAY but "+_writeContext.getTypeDesc()); } if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail++] = ']'; } [CLASS] WriterBasedJsonGenerator [METHOD] writeEndArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	215	215	1	add	
55	[BUG] [BUGGY] if (_cfgPrettyPrinter != null) { [FE] AssertionFailedError [CONTEXT] public void writeEndArray() throws IOException, JsonGenerationException { if (!_writeContext.inArray()) { _reportError("Current context not an ARRAY but "+_writeContext.getTypeDesc()); } [BUGGY] if (_cfgPrettyPrinter != null) { [BUGGY] _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail++] = ']'; } _writeContext = _writeContext.clearAndGetParent(); } [CLASS] WriterBasedJsonGenerator [METHOD] writeEndArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	218	218	1	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void writeEndArray() throws IOException, JsonGenerationException { if (!_writeContext.inArray()) { _reportError("Current context not an ARRAY but "+_writeContext.getTypeDesc()); } [BUGGY] [BUGGY] if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail++] = ']'; } _writeContext = _writeContext.clearAndGetParent(); } [CLASS] WriterBasedJsonGenerator [METHOD] writeEndArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	218	218	1	add	
57	[BUG] [BUGGY] if (_outputTail >= _outputEnd) { [FE] AssertionFailedError [CONTEXT] public void writeEndArray() throws IOException, JsonGenerationException { if (!_writeContext.inArray()) { _reportError("Current context not an ARRAY but "+_writeContext.getTypeDesc()); } if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { [BUGGY] if (_outputTail >= _outputEnd) { [BUGGY] _flushBuffer(); } _outputBuffer[_outputTail++] = ']'; } _writeContext = _writeContext.clearAndGetParent(); } [CLASS] WriterBasedJsonGenerator [METHOD] writeEndArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	221	221	1	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void writeEndArray() throws IOException, JsonGenerationException { if (!_writeContext.inArray()) { _reportError("Current context not an ARRAY but "+_writeContext.getTypeDesc()); } if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { [BUGGY] [BUGGY] if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail++] = ']'; } _writeContext = _writeContext.clearAndGetParent(); } [CLASS] WriterBasedJsonGenerator [METHOD] writeEndArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	221	221	1	add	
59	[BUG] [BUGGY] _outputBuffer[_outputTail++] = ']'; [FE] AssertionFailedError [CONTEXT] { if (!_writeContext.inArray()) { _reportError("Current context not an ARRAY but "+_writeContext.getTypeDesc()); } if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } [BUGGY] _outputBuffer[_outputTail++] = ']'; [BUGGY] } _writeContext = _writeContext.clearAndGetParent(); } [CLASS] WriterBasedJsonGenerator [METHOD] writeEndArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	224	224	1	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { if (!_writeContext.inArray()) { _reportError("Current context not an ARRAY but "+_writeContext.getTypeDesc()); } if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } [BUGGY] [BUGGY] _outputBuffer[_outputTail++] = ']'; } _writeContext = _writeContext.clearAndGetParent(); } [CLASS] WriterBasedJsonGenerator [METHOD] writeEndArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	224	224	1	add	
61	[BUG] [BUGGY] _writeContext = _writeContext.clearAndGetParent(); [FE] AssertionFailedError [CONTEXT] _reportError("Current context not an ARRAY but "+_writeContext.getTypeDesc()); } if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail++] = ']'; } [BUGGY] _writeContext = _writeContext.clearAndGetParent(); [BUGGY] } [CLASS] WriterBasedJsonGenerator [METHOD] writeEndArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	226	226	1	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] _reportError("Current context not an ARRAY but "+_writeContext.getTypeDesc()); } if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail++] = ']'; } [BUGGY] [BUGGY] _writeContext = _writeContext.clearAndGetParent(); } [CLASS] WriterBasedJsonGenerator [METHOD] writeEndArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	226	226	1	add	
63	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] } if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail++] = ']'; } _writeContext = _writeContext.clearAndGetParent(); [BUGGY] } [BUGGY]  [CLASS] WriterBasedJsonGenerator [METHOD] writeEndArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	227	227	1	replace	
64	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail++] = ']'; } _writeContext = _writeContext.clearAndGetParent(); [BUGGY] [BUGGY] } [CLASS] WriterBasedJsonGenerator [METHOD] writeEndArray [RETURN_TYPE] void  [VARIABLES] SerializableString _currentEscape name boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len qlen status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	227	227	1	add	
65	[BUG] [BUGGY] writeRaw(value.toPlainString()); [FE] AssertionFailedError [CONTEXT] public void writeNumber(BigDecimal value) throws IOException {  _verifyValueWrite(WRITE_NUMBER); if (value == null) { _writeNull(); } elseif (_cfgNumbersAsStrings) { String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString(); _writeQuotedRaw(raw); } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) { [BUGGY] writeRaw(value.toPlainString()); [BUGGY] } else { writeRaw(_asString(value)); } } [CLASS] WriterBasedJsonGenerator [METHOD] writeNumber [RETURN_TYPE] void  BigDecimal value [VARIABLES] SerializableString _currentEscape name sstr text boolean String raw int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset qlen room start status Writer _writer w BigDecimal value char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	690	690	1	replace	
66	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void writeNumber(BigDecimal value) throws IOException {  _verifyValueWrite(WRITE_NUMBER); if (value == null) { _writeNull(); } elseif (_cfgNumbersAsStrings) { String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString(); _writeQuotedRaw(raw); } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) { [BUGGY] [BUGGY] writeRaw(value.toPlainString()); } else { writeRaw(_asString(value)); } } [CLASS] WriterBasedJsonGenerator [METHOD] writeNumber [RETURN_TYPE] void  BigDecimal value [VARIABLES] SerializableString _currentEscape name sstr text boolean String raw int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset qlen room start status Writer _writer w BigDecimal value char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	690	690	1	add	
67	[BUG] [BUGGY] c = ','; [FE] AssertionFailedError [CONTEXT] _verifyPrettyValueWrite(typeMsg); return; } char c; final int status = _writeContext.writeValue(); if (status == JsonWriteContext.STATUS_EXPECT_NAME) { _reportError("Can not "+typeMsg+", expecting field name"); } switch (status) { case JsonWriteContext.STATUS_OK_AFTER_COMMA: [BUGGY] c = ','; [BUGGY] break; case JsonWriteContext.STATUS_OK_AFTER_COLON: c = ':'; break; case JsonWriteContext.STATUS_OK_AFTER_SPACE: // root-value separator if (_rootValueSeparator != null) { writeRaw(_rootValueSeparator.getValue()); } return; case JsonWriteContext.STATUS_OK_AS_IS: [CLASS] WriterBasedJsonGenerator [METHOD] _verifyValueWrite [RETURN_TYPE] void  String typeMsg [VARIABLES] SerializableString _currentEscape name sstr text boolean char c String typeMsg int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset ptr qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer buf quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	
68	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] _verifyPrettyValueWrite(typeMsg); return; } char c; final int status = _writeContext.writeValue(); if (status == JsonWriteContext.STATUS_EXPECT_NAME) { _reportError("Can not "+typeMsg+", expecting field name"); } switch (status) { case JsonWriteContext.STATUS_OK_AFTER_COMMA: [BUGGY] [BUGGY] c = ','; break; case JsonWriteContext.STATUS_OK_AFTER_COLON: c = ':'; break; case JsonWriteContext.STATUS_OK_AFTER_SPACE: // root-value separator if (_rootValueSeparator != null) { writeRaw(_rootValueSeparator.getValue()); } return; case JsonWriteContext.STATUS_OK_AS_IS: [CLASS] WriterBasedJsonGenerator [METHOD] _verifyValueWrite [RETURN_TYPE] void  String typeMsg [VARIABLES] SerializableString _currentEscape name sstr text boolean char c String typeMsg int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset ptr qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer buf quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	
69	[BUG] [BUGGY] break; [FE] AssertionFailedError [CONTEXT] return; } char c; final int status = _writeContext.writeValue(); if (status == JsonWriteContext.STATUS_EXPECT_NAME) { _reportError("Can not "+typeMsg+", expecting field name"); } switch (status) { case JsonWriteContext.STATUS_OK_AFTER_COMMA: c = ','; [BUGGY] break; [BUGGY] case JsonWriteContext.STATUS_OK_AFTER_COLON: c = ':'; break; case JsonWriteContext.STATUS_OK_AFTER_SPACE: // root-value separator if (_rootValueSeparator != null) { writeRaw(_rootValueSeparator.getValue()); } return; case JsonWriteContext.STATUS_OK_AS_IS: default: [CLASS] WriterBasedJsonGenerator [METHOD] _verifyValueWrite [RETURN_TYPE] void  String typeMsg [VARIABLES] SerializableString _currentEscape name sstr text boolean char c String typeMsg int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset ptr qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer buf quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	replace	
70	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return; } char c; final int status = _writeContext.writeValue(); if (status == JsonWriteContext.STATUS_EXPECT_NAME) { _reportError("Can not "+typeMsg+", expecting field name"); } switch (status) { case JsonWriteContext.STATUS_OK_AFTER_COMMA: c = ','; [BUGGY] [BUGGY] break; case JsonWriteContext.STATUS_OK_AFTER_COLON: c = ':'; break; case JsonWriteContext.STATUS_OK_AFTER_SPACE: // root-value separator if (_rootValueSeparator != null) { writeRaw(_rootValueSeparator.getValue()); } return; case JsonWriteContext.STATUS_OK_AS_IS: default: [CLASS] WriterBasedJsonGenerator [METHOD] _verifyValueWrite [RETURN_TYPE] void  String typeMsg [VARIABLES] SerializableString _currentEscape name sstr text boolean char c String typeMsg int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset ptr qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer buf quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	772	772	1	add	
71	[BUG] [BUGGY] _verifyValueWrite(WRITE_NUMBER); [FE] AssertionFailedError [CONTEXT] public void writeNumber(BigDecimal value) throws IOException {  [BUGGY] _verifyValueWrite(WRITE_NUMBER); [BUGGY] if (value == null) { _writeNull(); } elseif (_cfgNumbersAsStrings) { String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString(); _writeQuotedRaw(raw); } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) { writeRaw(value.toPlainString()); } else { writeRaw(_asString(value)); } [CLASS] WriterBasedJsonGenerator [METHOD] writeNumber [RETURN_TYPE] void  BigDecimal value [VARIABLES] SerializableString _currentEscape name sstr text boolean String raw int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset qlen room start status Writer _writer w BigDecimal value char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.5	683	683	1	replace	
72	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void writeNumber(BigDecimal value) throws IOException {  [BUGGY] [BUGGY] _verifyValueWrite(WRITE_NUMBER); if (value == null) { _writeNull(); } elseif (_cfgNumbersAsStrings) { String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString(); _writeQuotedRaw(raw); } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) { writeRaw(value.toPlainString()); } else { writeRaw(_asString(value)); } [CLASS] WriterBasedJsonGenerator [METHOD] writeNumber [RETURN_TYPE] void  BigDecimal value [VARIABLES] SerializableString _currentEscape name sstr text boolean String raw int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset qlen room start status Writer _writer w BigDecimal value char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.5	683	683	1	add	
73	[BUG] [BUGGY] if (value == null) { [FE] AssertionFailedError [CONTEXT] public void writeNumber(BigDecimal value) throws IOException {  _verifyValueWrite(WRITE_NUMBER); [BUGGY] if (value == null) { [BUGGY] _writeNull(); } elseif (_cfgNumbersAsStrings) { String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString(); _writeQuotedRaw(raw); } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) { writeRaw(value.toPlainString()); } else { writeRaw(_asString(value)); } } [CLASS] WriterBasedJsonGenerator [METHOD] writeNumber [RETURN_TYPE] void  BigDecimal value [VARIABLES] SerializableString _currentEscape name sstr text boolean String raw int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset qlen room start status Writer _writer w BigDecimal value char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.5	684	684	1	replace	
74	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void writeNumber(BigDecimal value) throws IOException {  _verifyValueWrite(WRITE_NUMBER); [BUGGY] [BUGGY] if (value == null) { _writeNull(); } elseif (_cfgNumbersAsStrings) { String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString(); _writeQuotedRaw(raw); } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) { writeRaw(value.toPlainString()); } else { writeRaw(_asString(value)); } } [CLASS] WriterBasedJsonGenerator [METHOD] writeNumber [RETURN_TYPE] void  BigDecimal value [VARIABLES] SerializableString _currentEscape name sstr text boolean String raw int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset qlen room start status Writer _writer w BigDecimal value char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.5	684	684	1	add	
75	[BUG] [BUGGY] } elseif (_cfgNumbersAsStrings) { [FE] AssertionFailedError [CONTEXT] public void writeNumber(BigDecimal value) throws IOException {  _verifyValueWrite(WRITE_NUMBER); if (value == null) { _writeNull(); [BUGGY] } elseif (_cfgNumbersAsStrings) { [BUGGY] String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString(); _writeQuotedRaw(raw); } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) { writeRaw(value.toPlainString()); } else { writeRaw(_asString(value)); } } [CLASS] WriterBasedJsonGenerator [METHOD] writeNumber [RETURN_TYPE] void  BigDecimal value [VARIABLES] SerializableString _currentEscape name sstr text boolean String raw int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset qlen room start status Writer _writer w BigDecimal value char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.5	686	686	1	replace	
76	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void writeNumber(BigDecimal value) throws IOException {  _verifyValueWrite(WRITE_NUMBER); if (value == null) { _writeNull(); [BUGGY] [BUGGY] } elseif (_cfgNumbersAsStrings) { String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString(); _writeQuotedRaw(raw); } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) { writeRaw(value.toPlainString()); } else { writeRaw(_asString(value)); } } [CLASS] WriterBasedJsonGenerator [METHOD] writeNumber [RETURN_TYPE] void  BigDecimal value [VARIABLES] SerializableString _currentEscape name sstr text boolean String raw int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset qlen room start status Writer _writer w BigDecimal value char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.5	686	686	1	add	
77	[BUG] [BUGGY] } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) { [FE] AssertionFailedError [CONTEXT] public void writeNumber(BigDecimal value) throws IOException {  _verifyValueWrite(WRITE_NUMBER); if (value == null) { _writeNull(); } elseif (_cfgNumbersAsStrings) { String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString(); _writeQuotedRaw(raw); [BUGGY] } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) { [BUGGY] writeRaw(value.toPlainString()); } else { writeRaw(_asString(value)); } } [CLASS] WriterBasedJsonGenerator [METHOD] writeNumber [RETURN_TYPE] void  BigDecimal value [VARIABLES] SerializableString _currentEscape name sstr text boolean String raw int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset qlen room start status Writer _writer w BigDecimal value char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.5	689	689	1	replace	
78	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void writeNumber(BigDecimal value) throws IOException {  _verifyValueWrite(WRITE_NUMBER); if (value == null) { _writeNull(); } elseif (_cfgNumbersAsStrings) { String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString(); _writeQuotedRaw(raw); [BUGGY] [BUGGY] } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) { writeRaw(value.toPlainString()); } else { writeRaw(_asString(value)); } } [CLASS] WriterBasedJsonGenerator [METHOD] writeNumber [RETURN_TYPE] void  BigDecimal value [VARIABLES] SerializableString _currentEscape name sstr text boolean String raw int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset qlen room start status Writer _writer w BigDecimal value char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.5	689	689	1	add	
79	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] if (value == null) { _writeNull(); } elseif (_cfgNumbersAsStrings) { String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString(); _writeQuotedRaw(raw); } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) { writeRaw(value.toPlainString()); } else { writeRaw(_asString(value)); } [BUGGY] } [BUGGY]  [CLASS] WriterBasedJsonGenerator [METHOD] writeNumber [RETURN_TYPE] void  BigDecimal value [VARIABLES] SerializableString _currentEscape name sstr text boolean String raw int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset qlen room start status Writer _writer w BigDecimal value char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.5	694	694	1	replace	
80	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (value == null) { _writeNull(); } elseif (_cfgNumbersAsStrings) { String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString(); _writeQuotedRaw(raw); } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) { writeRaw(value.toPlainString()); } else { writeRaw(_asString(value)); } [BUGGY] [BUGGY] } [CLASS] WriterBasedJsonGenerator [METHOD] writeNumber [RETURN_TYPE] void  BigDecimal value [VARIABLES] SerializableString _currentEscape name sstr text boolean String raw int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset qlen room start status Writer _writer w BigDecimal value char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.5	694	694	1	add	
81	[BUG] [BUGGY] int len = text.length(); [FE] AssertionFailedError [CONTEXT] public void writeRaw(String text) throws IOException {  [BUGGY] int len = text.length(); [BUGGY] int room = _outputEnd - _outputTail; if (room == 0) { _flushBuffer(); room = _outputEnd - _outputTail; }  if (room >= len) { text.getChars(0, len, _outputBuffer, _outputTail); _outputTail += len; [CLASS] WriterBasedJsonGenerator [METHOD] writeRaw [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len length offset qlen room status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	406	406	1	replace	
82	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void writeRaw(String text) throws IOException {  [BUGGY] [BUGGY] int len = text.length(); int room = _outputEnd - _outputTail; if (room == 0) { _flushBuffer(); room = _outputEnd - _outputTail; }  if (room >= len) { text.getChars(0, len, _outputBuffer, _outputTail); _outputTail += len; [CLASS] WriterBasedJsonGenerator [METHOD] writeRaw [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len length offset qlen room status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	406	406	1	add	
83	[BUG] [BUGGY] int room = _outputEnd - _outputTail; [FE] AssertionFailedError [CONTEXT] public void writeRaw(String text) throws IOException {  int len = text.length(); [BUGGY] int room = _outputEnd - _outputTail; [BUGGY]  if (room == 0) { _flushBuffer(); room = _outputEnd - _outputTail; }  if (room >= len) { text.getChars(0, len, _outputBuffer, _outputTail); _outputTail += len; } else { [CLASS] WriterBasedJsonGenerator [METHOD] writeRaw [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len length offset qlen room status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	407	407	1	replace	
84	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void writeRaw(String text) throws IOException {  int len = text.length(); [BUGGY] [BUGGY] int room = _outputEnd - _outputTail; if (room == 0) { _flushBuffer(); room = _outputEnd - _outputTail; }  if (room >= len) { text.getChars(0, len, _outputBuffer, _outputTail); _outputTail += len; } else { [CLASS] WriterBasedJsonGenerator [METHOD] writeRaw [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len length offset qlen room status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	407	407	1	add	
85	[BUG] [BUGGY] if (room == 0) { [FE] AssertionFailedError [CONTEXT] public void writeRaw(String text) throws IOException {  int len = text.length(); int room = _outputEnd - _outputTail; [BUGGY] if (room == 0) { [BUGGY] _flushBuffer(); room = _outputEnd - _outputTail; }  if (room >= len) { text.getChars(0, len, _outputBuffer, _outputTail); _outputTail += len; } else { writeRawLong(text); } [CLASS] WriterBasedJsonGenerator [METHOD] writeRaw [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len length offset qlen room status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	replace	
86	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void writeRaw(String text) throws IOException {  int len = text.length(); int room = _outputEnd - _outputTail; [BUGGY] [BUGGY] if (room == 0) { _flushBuffer(); room = _outputEnd - _outputTail; }  if (room >= len) { text.getChars(0, len, _outputBuffer, _outputTail); _outputTail += len; } else { writeRawLong(text); } [CLASS] WriterBasedJsonGenerator [METHOD] writeRaw [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len length offset qlen room status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	409	409	1	add	
87	[BUG] [BUGGY] if (room >= len) { [FE] AssertionFailedError [CONTEXT] {  int len = text.length(); int room = _outputEnd - _outputTail; if (room == 0) { _flushBuffer(); room = _outputEnd - _outputTail; }  [BUGGY] if (room >= len) { [BUGGY] text.getChars(0, len, _outputBuffer, _outputTail); _outputTail += len; } else { writeRawLong(text); } } [CLASS] WriterBasedJsonGenerator [METHOD] writeRaw [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len length offset qlen room status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	replace	
88	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] {  int len = text.length(); int room = _outputEnd - _outputTail; if (room == 0) { _flushBuffer(); room = _outputEnd - _outputTail; }  [BUGGY] [BUGGY] if (room >= len) { text.getChars(0, len, _outputBuffer, _outputTail); _outputTail += len; } else { writeRawLong(text); } } [CLASS] WriterBasedJsonGenerator [METHOD] writeRaw [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len length offset qlen room status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	414	414	1	add	
89	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] _flushBuffer(); room = _outputEnd - _outputTail; }  if (room >= len) { text.getChars(0, len, _outputBuffer, _outputTail); _outputTail += len; } else { writeRawLong(text); } [BUGGY] } [BUGGY]  [CLASS] WriterBasedJsonGenerator [METHOD] writeRaw [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len length offset qlen room status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	replace	
90	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] _flushBuffer(); room = _outputEnd - _outputTail; }  if (room >= len) { text.getChars(0, len, _outputBuffer, _outputTail); _outputTail += len; } else { writeRawLong(text); } [BUGGY] [BUGGY] } [CLASS] WriterBasedJsonGenerator [METHOD] writeRaw [RETURN_TYPE] void  String text [VARIABLES] SerializableString _currentEscape name sstr String text boolean int SHORT_WRITE _outputEnd _outputHead _outputTail features len length offset qlen room status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	420	420	1	add	
91	[BUG] [BUGGY] if (_outputTail >= _outputEnd) { [FE] AssertionFailedError [CONTEXT] break; case JsonWriteContext.STATUS_OK_AFTER_SPACE: // root-value separator if (_rootValueSeparator != null) { writeRaw(_rootValueSeparator.getValue()); } return; case JsonWriteContext.STATUS_OK_AS_IS: default: return; } [BUGGY] if (_outputTail >= _outputEnd) { [BUGGY] _flushBuffer(); } _outputBuffer[_outputTail] = c; ++_outputTail; } [CLASS] WriterBasedJsonGenerator [METHOD] _verifyValueWrite [RETURN_TYPE] void  String typeMsg [VARIABLES] SerializableString _currentEscape name sstr text boolean char c String typeMsg int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset ptr qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer buf quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	
92	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] break; case JsonWriteContext.STATUS_OK_AFTER_SPACE: // root-value separator if (_rootValueSeparator != null) { writeRaw(_rootValueSeparator.getValue()); } return; case JsonWriteContext.STATUS_OK_AS_IS: default: return; } [BUGGY] [BUGGY] if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail] = c; ++_outputTail; } [CLASS] WriterBasedJsonGenerator [METHOD] _verifyValueWrite [RETURN_TYPE] void  String typeMsg [VARIABLES] SerializableString _currentEscape name sstr text boolean char c String typeMsg int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset ptr qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer buf quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	
93	[BUG] [BUGGY] _outputBuffer[_outputTail] = c; [FE] AssertionFailedError [CONTEXT] writeRaw(_rootValueSeparator.getValue()); } return; case JsonWriteContext.STATUS_OK_AS_IS: default: return; } if (_outputTail >= _outputEnd) { _flushBuffer(); } [BUGGY] _outputBuffer[_outputTail] = c; [BUGGY] ++_outputTail; } [CLASS] WriterBasedJsonGenerator [METHOD] _verifyValueWrite [RETURN_TYPE] void  String typeMsg [VARIABLES] SerializableString _currentEscape name sstr text boolean char c String typeMsg int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset ptr qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer buf quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	788	788	1	replace	
94	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] writeRaw(_rootValueSeparator.getValue()); } return; case JsonWriteContext.STATUS_OK_AS_IS: default: return; } if (_outputTail >= _outputEnd) { _flushBuffer(); } [BUGGY] [BUGGY] _outputBuffer[_outputTail] = c; ++_outputTail; } [CLASS] WriterBasedJsonGenerator [METHOD] _verifyValueWrite [RETURN_TYPE] void  String typeMsg [VARIABLES] SerializableString _currentEscape name sstr text boolean char c String typeMsg int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset ptr qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer buf quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	788	788	1	add	
95	[BUG] [BUGGY] ++_outputTail; [FE] AssertionFailedError [CONTEXT] } return; case JsonWriteContext.STATUS_OK_AS_IS: default: return; } if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail] = c; [BUGGY] ++_outputTail; [BUGGY] } [CLASS] WriterBasedJsonGenerator [METHOD] _verifyValueWrite [RETURN_TYPE] void  String typeMsg [VARIABLES] SerializableString _currentEscape name sstr text boolean char c String typeMsg int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset ptr qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer buf quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	789	789	1	replace	
96	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } return; case JsonWriteContext.STATUS_OK_AS_IS: default: return; } if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail] = c; [BUGGY] [BUGGY] ++_outputTail; } [CLASS] WriterBasedJsonGenerator [METHOD] _verifyValueWrite [RETURN_TYPE] void  String typeMsg [VARIABLES] SerializableString _currentEscape name sstr text boolean char c String typeMsg int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset ptr qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer buf quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	789	789	1	add	
97	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] return; case JsonWriteContext.STATUS_OK_AS_IS: default: return; } if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail] = c; ++_outputTail; [BUGGY] } [BUGGY]  [CLASS] WriterBasedJsonGenerator [METHOD] _verifyValueWrite [RETURN_TYPE] void  String typeMsg [VARIABLES] SerializableString _currentEscape name sstr text boolean char c String typeMsg int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset ptr qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer buf quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	790	790	1	replace	
98	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return; case JsonWriteContext.STATUS_OK_AS_IS: default: return; } if (_outputTail >= _outputEnd) { _flushBuffer(); } _outputBuffer[_outputTail] = c; ++_outputTail; [BUGGY] [BUGGY] } [CLASS] WriterBasedJsonGenerator [METHOD] _verifyValueWrite [RETURN_TYPE] void  String typeMsg [VARIABLES] SerializableString _currentEscape name sstr text boolean char c String typeMsg int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset ptr qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer buf quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	790	790	1	add	
99	[BUG] [BUGGY] if (_cfgPrettyPrinter != null) { [FE] AssertionFailedError [CONTEXT] { [BUGGY] if (_cfgPrettyPrinter != null) { [BUGGY]  _verifyPrettyValueWrite(typeMsg); return; } char c; final int status = _writeContext.writeValue(); if (status == JsonWriteContext.STATUS_EXPECT_NAME) { _reportError("Can not "+typeMsg+", expecting field name"); } switch (status) { [CLASS] WriterBasedJsonGenerator [METHOD] _verifyValueWrite [RETURN_TYPE] void  String typeMsg [VARIABLES] SerializableString _currentEscape name sstr text boolean char c String typeMsg int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset ptr qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer buf quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	replace	
100	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { [BUGGY] [BUGGY] if (_cfgPrettyPrinter != null) {  _verifyPrettyValueWrite(typeMsg); return; } char c; final int status = _writeContext.writeValue(); if (status == JsonWriteContext.STATUS_EXPECT_NAME) { _reportError("Can not "+typeMsg+", expecting field name"); } switch (status) { [CLASS] WriterBasedJsonGenerator [METHOD] _verifyValueWrite [RETURN_TYPE] void  String typeMsg [VARIABLES] SerializableString _currentEscape name sstr text boolean char c String typeMsg int SHORT_WRITE _outputEnd _outputHead _outputTail amount bytes dataLength features i len length missing offset ptr qlen room start status Writer _writer w char[] HEX_CHARS _entityBuffer _outputBuffer buf quoted text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.3779644730092272	759	759	1	add	
