bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }  [BUGGY]  if(_outputTail  ==  _outputEnd)  {  [BUGGY]  _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(_outputTail  ==  _outputEnd)  {	if  (_outputTail  >=  _outputEnd)  {  	compilable	  [FE]  AssertionFailedError  	91	1	replace
2	[BUG]  [BUGGY]  if(_outputTail  ==  _outputEnd)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }  [BUGGY]  if(_outputTail  ==  _outputEnd)  {  [BUGGY]  _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  ==  _outputEnd)  {	if  (_outputTail  >=  _outputEnd)  {  	compilable	  [FE]  AssertionFailedError  	91	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }  [BUGGY]  if(_outputTail!=  _outputEnd)  {  [BUGGY]  _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(_outputTail!=  _outputEnd)  {	if  (_outputTail  >=  _outputEnd)  {  	compilable	  [FE]  AssertionFailedError  	91	1	replace
4	[BUG]  [BUGGY]  if(_outputTail!=  _outputEnd)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }  [BUGGY]  if(_outputTail!=  _outputEnd)  {  [BUGGY]  _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail!=  _outputEnd)  {	if  (_outputTail  >=  _outputEnd)  {  	compilable	  [FE]  AssertionFailedError  	91	1	replace
5	[BUG]  [BUGGY]    [CE]  ']'  expected  [FE]        AssertionFailedError  [CONTEXT]  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }  [BUGGY]    [BUGGY]  _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	  	if  (_outputTail  >=  _outputEnd)  {  	non-compiled	[CE]  ']'  expected	91	None	replace
6	[BUG]  [BUGGY]  if(_outputTail  >>  _outputEnd)  {  [CE]  incompatible  types  [FE]    AssertionFailedError  [CONTEXT]  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }  [BUGGY]  if(_outputTail  >>  _outputEnd)  {  [BUGGY]  _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >>  _outputEnd)  {	if  (_outputTail  >=  _outputEnd)  {  	non-compiled	[CE]  incompatible  types	91	None	replace
7	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {  [CE]  incomparable  types:  char  and  <null>  [FE]    AssertionFailedError  [CONTEXT]  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {  [BUGGY]  _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {	if  (_outputTail  >=  _outputEnd)  {  	non-compiled	[CE]  incomparable  types:  char  and  <null>	91	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]  _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	if  (_outputTail  >=  _outputEnd)  {  	compilable	  [FE]  AssertionFailedError  	91	1	replace
9	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]  _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	if  (_outputTail  >=  _outputEnd)  {  	compilable	  [FE]  AssertionFailedError  	91	1	replace
10	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        AssertionFailedError  [CONTEXT]  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }  [BUGGY]  if(++_outputTail  >=  _outputEnd)  {  [BUGGY]  _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(++_outputTail  >=  _outputEnd)  {	if  (_outputTail  >=  _outputEnd)  {  	compilable	  [FE]  ComparisonFailure  	91	5	replace
11	[BUG]  [BUGGY]  if(++_outputTail  >=  _outputEnd)  {  [FE]  ComparisonFailure  [FE]        AssertionFailedError  [CONTEXT]  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }  [BUGGY]  if(++_outputTail  >=  _outputEnd)  {  [BUGGY]  _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(++_outputTail  >=  _outputEnd)  {	if  (_outputTail  >=  _outputEnd)  {  	compilable	  [FE]  ComparisonFailure  	91	5	replace
