bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c  >=  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {  [CE]  incomparable  types:  char  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  >=  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(c  >=  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {	  if(_outputTail    >=    _outputEnd    &&    _buffer[_outputTail]!=    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	45	None	replace
2	[BUG]  [BUGGY]  if(c  >=  _outputEnd  &&  _buffer[_outputTail]!=  null)  {  [CE]  cannot  find  symbol  _buffer  [FE]              AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  >=  _outputEnd  &&  _buffer[_outputTail]!=  null)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(c  >=  _outputEnd  &&  _buffer[_outputTail]!=  null)  {	  if(_outputTail    >=    _outputEnd    &&    _buffer[_outputTail]!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  _buffer	45	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(c  ==  'n'  ||  c  ==  'r')  {	  if(_outputTail!=    _outputEnd)    {    if(_outputTail    >>    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
4	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(c  ==  'n'  ||  c  ==  'r')  {	  if(_outputTail!=    _outputEnd)    {    if(_outputTail    >>    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(_outputTail    ==    _outputEnd)    {    if(_outputTail    >>    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
6	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(_outputTail    ==    _outputEnd)    {    if(_outputTail    >>    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
7	[BUG]  [BUGGY]  if(_outputTail!=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail!=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail!=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }	  if(_outputTail    >=    _outputEnd)    {    c    =    _outputBuffer[_outputTail];    ++_outputTail;    }    else    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  ']'  expected	35	None	replace
8	[BUG]  [BUGGY]  c  =  _outputBuffer[_outputTail];  ++_outputTail;  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  c  =  _outputBuffer[_outputTail];  ++_outputTail;  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	c  =  _outputBuffer[_outputTail];  ++_outputTail;	  if(_outputTail    >=    _outputEnd)    {    c    =    _outputBuffer[_outputTail];    ++_outputTail;    }    else    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  ']'  expected	35	None	replace
9	[BUG]  [BUGGY]  _outputTail  =  _outputBuffer[_outputTail];  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  _outputTail  =  _outputBuffer[_outputTail];  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	_outputTail  =  _outputBuffer[_outputTail];	  if(_outputTail    >=    _outputEnd)    {    c    =    _outputBuffer[_outputTail];    }    else    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  ']'  expected	37	None	replace
10	[BUG]  [BUGGY]  c  =  _outputBuffer[_outputTail];  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  c  =  _outputBuffer[_outputTail];  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	c  =  _outputBuffer[_outputTail];	  if(_outputTail    >=    _outputEnd)    {    c    =    _outputBuffer[_outputTail];    }    else    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  ']'  expected	37	None	replace
11	[BUG]  [BUGGY]  ||(_outputTail  >=  _outputEnd)&&(_outputBuffer[_outputTail]!=  _outputEnd))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  ||(_outputTail  >=  _outputEnd)&&(_outputBuffer[_outputTail]!=  _outputEnd))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	||(_outputTail  >=  _outputEnd)&&(_outputBuffer[_outputTail]!=  _outputEnd))  {	  if(_outputTail    ==    _outputEnd)    {    If(_outputTail    ==    _outputEnd)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
12	[BUG]  [BUGGY]  ||(_outputTail  >=  _outputEnd)&&(_outputBuffer[_outputTail]!=  c))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  ||(_outputTail  >=  _outputEnd)&&(_outputBuffer[_outputTail]!=  c))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	||(_outputTail  >=  _outputEnd)&&(_outputBuffer[_outputTail]!=  c))  {	  if(_outputTail    ==    _outputEnd)    {    If(_outputTail    ==    _outputEnd)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
13	[BUG]  [BUGGY]  If(_outputTail  >=  _outputEnd)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  If(_outputTail  >=  _outputEnd)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	If(_outputTail  >=  _outputEnd)  {	  if(_outputTail    ==    _outputEnd)    {    If(_outputTail    ==    _outputEnd)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
14	[BUG]  [BUGGY]  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail!=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
15	[BUG]  [BUGGY]  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail!=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
16	[BUG]  [BUGGY]  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  >>  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  >>  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail!=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(_outputTail  >>  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
17	[BUG]  [BUGGY]  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail!=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
18	[BUG]  [BUGGY]  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  [BUGGY]  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  [BUGGY]  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail!=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(_outputTail  [BUGGY]  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  	non-compiled	[CE]  ')'  expected	26	None	add
19	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  ')'  expected	50	None	replace
20	[BUG]  [BUGGY]  if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  ')'  expected	50	None	replace
21	[BUG]  [BUGGY]  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  ')'  expected	50	None	replace
22	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _writeRaw(typeMsg);  }  else  {  _flushBuffer();  }  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _writeRaw(typeMsg);  }  else  {  _flushBuffer();  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd)  {  _writeRaw(typeMsg);  }  else  {  _flushBuffer();  }	  if(_outputTail    >=    _outputEnd)    {    writeRaw(typeMsg);    }    else    {    _flushBuffer();    }    	non-compiled	[CE]  ']'  expected	41	None	replace
23	[BUG]  [BUGGY]  _outputTail  =  _outputEnd  +  1;  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  _outputTail  =  _outputEnd  +  1;  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	_outputTail  =  _outputEnd  +  1;	  if(_outputTail    >=    _outputEnd)    {    writeRaw(typeMsg);    }    else    {    _flushBuffer();    }    	non-compiled	[CE]  ']'  expected	41	None	replace
24	[BUG]  [BUGGY]  if(_outputTail!=  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {  [CE]  incomparable  types:  char  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail!=  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail!=  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {	  if(_outputTail    >=    _outputEnd    ||    _outputBuffer[_outputTail]!=    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	2	None	replace
25	[BUG]  [BUGGY]  _writer.writeRaw(c);  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  _writer.writeRaw(c);  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	_writer.writeRaw(c);	  _writer.writeRaw(typeMsg);    	non-compiled	[CE]  ']'  expected	38	None	replace
26	[BUG]  [BUGGY]  _writer.writeString(typeMsg);  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  _writer.writeString(typeMsg);  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	_writer.writeString(typeMsg);	  _writer.writeRaw(typeMsg);    	non-compiled	[CE]  ']'  expected	38	None	replace
27	[BUG]  [BUGGY]  _writer.write(typeMsg);  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  _writer.write(typeMsg);  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	_writer.write(typeMsg);	  _writer.writeRaw(typeMsg);    	non-compiled	[CE]  ']'  expected	38	None	replace
28	[BUG]  [BUGGY]  _outputTail  =  _outputBuffer[_outputTail];  ++_outputTail;  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  _outputTail  =  _outputBuffer[_outputTail];  ++_outputTail;  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	_outputTail  =  _outputBuffer[_outputTail];  ++_outputTail;	  if(_outputTail    >=    _outputEnd)    {    c    =    _outputBuffer[_outputTail];    ++_outputTail;    }    	non-compiled	[CE]  ']'  expected	36	None	replace
29	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  If(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  If(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd)  {  If(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    If(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  ';'  expected	46	None	replace
30	[BUG]  [BUGGY]  if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    ==    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
31	[BUG]  [BUGGY]  if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    ==    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
32	[BUG]  [BUGGY]  if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    ==    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
33	[BUG]  [BUGGY]  if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  If(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  If(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    ==    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    If(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  	non-compiled	[CE]  ';'  expected	24	None	add
34	[BUG]  [BUGGY]  if(_outputTail  <  _outputEnd)  {  if(_outputTail  <  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  <  _outputEnd)  {  if(_outputTail  <  _outputEnd)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    <    _outputEnd)    {    if(_outputTail  <  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
35	[BUG]  [BUGGY]  if(_outputTail  <  _outputEnd)  {  if(_outputTail  >=  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  <  _outputEnd)  {  if(_outputTail  >=  _outputEnd)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    <    _outputEnd)    {    if(_outputTail  >=  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
36	[BUG]  [BUGGY]  if(_outputTail  <  _outputEnd)  {  If(_outputTail  <  _outputEnd)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  <  _outputEnd)  {  If(_outputTail  <  _outputEnd)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    <    _outputEnd)    {    If(_outputTail  <  _outputEnd)  {	  	non-compiled	[CE]  ';'  expected	28	None	add
37	[BUG]  [BUGGY]  if(++_outputTail  >>  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {  [CE]  incomparable  types:  char  and  <null>  [FE]          ComparisonFailure      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(++_outputTail  >>  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(++_outputTail  >>  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {	  if(++_outputTail    >=    _outputEnd    &&    _buffer[_outputTail]!=    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	44	None	replace
38	[BUG]  [BUGGY]  if(++_outputTail  >>  _outputEnd  &&  _buffer[_outputTail]!=  null)  {  [CE]  cannot  find  symbol  _buffer  [FE]            ComparisonFailure      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(++_outputTail  >>  _outputEnd  &&  _buffer[_outputTail]!=  null)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(++_outputTail  >>  _outputEnd  &&  _buffer[_outputTail]!=  null)  {	  if(++_outputTail    >=    _outputEnd    &&    _buffer[_outputTail]!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  _buffer	44	None	replace
39	[BUG]  [BUGGY]  if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(c    ==    '[')    {    if(_outputTail    >=    _outputEnd)    {    writeRaw(typeMsg);    }    if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
40	[BUG]  [BUGGY]  if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  if(c  ==  '[')  {  if(_outputTail  >>  _outputEnd)  {  writeRaw(typeMsg);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  if(c  ==  '[')  {  if(_outputTail  >>  _outputEnd)  {  writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(c    ==    '[')    {    if(_outputTail    >=    _outputEnd)    {    writeRaw(typeMsg);    }    if(c  ==  '[')  {  if(_outputTail  >>  _outputEnd)  {  writeRaw(typeMsg);  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
41	[BUG]  [BUGGY]  if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  if(c  ==  '[')  {  if(_outputTail!=  _outputEnd)  {  writeRaw(typeMsg);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  if(c  ==  '[')  {  if(_outputTail!=  _outputEnd)  {  writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(c    ==    '[')    {    if(_outputTail    >=    _outputEnd)    {    writeRaw(typeMsg);    }    if(c  ==  '[')  {  if(_outputTail!=  _outputEnd)  {  writeRaw(typeMsg);  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
42	[BUG]  [BUGGY]  if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  if(c!=  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  if(c!=  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(c    ==    '[')    {    if(_outputTail    >=    _outputEnd)    {    writeRaw(typeMsg);    }    if(c!=  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
43	[BUG]  [BUGGY]  if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  if(c  ==  '[')  {  if(_outputTail  [Delete]  _outputEnd)  {  writeRaw(typeMsg);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  if(c  ==  '[')  {  if(_outputTail  [Delete]  _outputEnd)  {  writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(c    ==    '[')    {    if(_outputTail    >=    _outputEnd)    {    writeRaw(typeMsg);    }    if(c  ==  '[')  {  if(_outputTail  [Delete]  _outputEnd)  {  writeRaw(typeMsg);  }	  	non-compiled	[CE]  ')'  expected	48	None	add
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(c  ==  '[')  {  writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(_outputTail  >=  _outputEnd)  {  if(c  ==  '[')  {  writeRaw(typeMsg);  }	  if(c    ==    '[')    {    if(_outputTail    >=    _outputEnd)    {    writeRaw(typeMsg);    }    	compilable	  [FE]  AssertionFailedError  	49	1	replace
45	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(c  ==  '[')  {  writeRaw(typeMsg);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  if(c  ==  '[')  {  writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd)  {  if(c  ==  '[')  {  writeRaw(typeMsg);  }	  if(c    ==    '[')    {    if(_outputTail    >=    _outputEnd)    {    writeRaw(typeMsg);    }    	compilable	  [FE]  AssertionFailedError  	49	1	replace
46	[BUG]  [BUGGY]  ||(_outputTail  >=  _outputEnd  &&  _outputBuffer[_outputTail]!=  null))  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  ||(_outputTail  >=  _outputEnd  &&  _outputBuffer[_outputTail]!=  null))  {  writeRaw(typeMsg);  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	||(_outputTail  >=  _outputEnd  &&  _outputBuffer[_outputTail]!=  null))  {  writeRaw(typeMsg);	  if(c    ==    '[')    {    if(_outputTail    >=    _outputEnd)    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
47	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.AUTO_CLOSE_AS_NULL_OBJECT))  {  [CE]  cannot  find  symbol  AUTO_CLOSE_AS_NULL_OBJECT  [FE]        AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.AUTO_CLOSE_AS_NULL_OBJECT))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.AUTO_CLOSE_AS_NULL_OBJECT))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  AUTO_CLOSE_AS_NULL_OBJECT	47	None	replace
48	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.AUTO_CLOSE_AS_NULL))  {  [CE]  cannot  find  symbol  AUTO_CLOSE_AS_NULL  [FE]          AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.AUTO_CLOSE_AS_NULL))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.AUTO_CLOSE_AS_NULL))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  AUTO_CLOSE_AS_NULL	47	None	replace
49	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.AUTO_CLOSE_AS_IS))  {  [CE]  cannot  find  symbol  AUTO_CLOSE_AS_IS  [FE]            AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.AUTO_CLOSE_AS_IS))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.AUTO_CLOSE_AS_IS))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  AUTO_CLOSE_AS_IS	47	None	replace
50	[BUG]  [BUGGY]  _outputTail  =  _outputEnd;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  _outputTail  =  _outputEnd;  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	_outputTail  =  _outputEnd;	  if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    else    {    _flushBuffer();    }    	non-compiled	[CE]  ']'  expected	39	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  &&  _outputTail  >=  _outputEnd)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(_outputTail  >=  _outputEnd  &&  _outputTail  >=  _outputEnd)  {	  if(_outputTail    >=    _outputEnd    ||    _outputTail    >=    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
52	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  _outputTail  >=  _outputEnd)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  &&  _outputTail  >=  _outputEnd)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  &&  _outputTail  >=  _outputEnd)  {	  if(_outputTail    >=    _outputEnd    ||    _outputTail    >=    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  &&  _outputBuffer[_outputTail]!=  _outputEnd)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(_outputTail  >=  _outputEnd  &&  _outputBuffer[_outputTail]!=  _outputEnd)  {	  if(_outputTail    >=    _outputEnd    ||    _outputTail    >=    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
54	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  _outputBuffer[_outputTail]!=  _outputEnd)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  &&  _outputBuffer[_outputTail]!=  _outputEnd)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  &&  _outputBuffer[_outputTail]!=  _outputEnd)  {	  if(_outputTail    >=    _outputEnd    ||    _outputTail    >=    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
55	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  if(_outputTail  >=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  if(_outputTail  >=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    >=    _outputEnd    ||    _outputTail    >=    _outputEnd)    {    if(_outputTail  >=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
56	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  if(_outputTail  >=  _outputEnd  ||  _outputTail  >>  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  if(_outputTail  >=  _outputEnd  ||  _outputTail  >>  _outputEnd)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    >=    _outputEnd    ||    _outputTail    >=    _outputEnd)    {    if(_outputTail  >=  _outputEnd  ||  _outputTail  >>  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
57	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  if(_outputTail  >>  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  if(_outputTail  >>  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    >=    _outputEnd    ||    _outputTail    >=    _outputEnd)    {    if(_outputTail  >>  _outputEnd  ||  _outputTail  >=  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
58	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  if(_outputTail!=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  if(_outputTail!=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    >=    _outputEnd    ||    _outputTail    >=    _outputEnd)    {    if(_outputTail!=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
59	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  if(_outputTail  ==  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  if(_outputTail  ==  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    >=    _outputEnd    ||    _outputTail    >=    _outputEnd)    {    if(_outputTail  ==  _outputEnd  ||  _outputTail  >=  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
60	[BUG]  [BUGGY]  if(++_outputTail  >=  _outputEnd  &&  _outputBuffer[_outputTail]  ==  null)  {  [CE]  incomparable  types:  char  and  <null>  [FE]        ComparisonFailure      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(++_outputTail  >=  _outputEnd  &&  _outputBuffer[_outputTail]  ==  null)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(++_outputTail  >=  _outputEnd  &&  _outputBuffer[_outputTail]  ==  null)  {	  if(++_outputTail    >=    _outputEnd    &&    _outputBuffer[_outputTail]!=    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	43	None	replace
61	[BUG]  [BUGGY]  if(++_outputTail  ==  _outputEnd)  {  if(++_outputTail  ==  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(++_outputTail  ==  _outputEnd)  {  if(++_outputTail  ==  _outputEnd)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(++_outputTail    ==    _outputEnd)    {    if(++_outputTail  ==  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
62	[BUG]  [BUGGY]  if(++_outputTail  ==  _outputEnd)  {  if(++_outputTail  >=  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(++_outputTail  ==  _outputEnd)  {  if(++_outputTail  >=  _outputEnd)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(++_outputTail    ==    _outputEnd)    {    if(++_outputTail  >=  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
63	[BUG]  [BUGGY]  if(++_outputTail  ==  _outputEnd)  {  if(++_outputTail  >>  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(++_outputTail  ==  _outputEnd)  {  if(++_outputTail  >>  _outputEnd)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(++_outputTail    ==    _outputEnd)    {    if(++_outputTail  >>  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
64	[BUG]  [BUGGY]  if(++_outputTail  ==  _outputEnd)  {  if(++_outputTail!=  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(++_outputTail  ==  _outputEnd)  {  if(++_outputTail!=  _outputEnd)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(++_outputTail    ==    _outputEnd)    {    if(++_outputTail!=  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
65	[BUG]  [BUGGY]  _writeRaw(typeMsg);  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  _writeRaw(typeMsg);  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	_writeRaw(typeMsg);	  if(_outputTail    >=    _outputEnd)    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  ']'  expected	34	None	replace
66	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  >=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  >=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    >=    _outputEnd    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(_outputTail  >=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
67	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  >>  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  >>  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    >=    _outputEnd    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(_outputTail  >>  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
68	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail!=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail!=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    >=    _outputEnd    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(_outputTail!=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
69	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  ==  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  ==  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    >=    _outputEnd    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(_outputTail  ==  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
70	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	  _flushBuffer();    	non-compiled	[CE]  ']'  expected	40	None	replace
71	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRaw(typeMsg);  }  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  else  {  writeRaw(typeMsg);  }	  _flushBuffer();    	non-compiled	[CE]  ']'  expected	40	None	replace
72	[BUG]  [BUGGY]  If(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  If(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	If(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    If(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  ';'  expected	46	None	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  ==  '['  ||  c  ==  ']')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(c  ==  '['  ||  c  ==  ']')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }	  if(c    ==    '[')    {    if(_outputTail    >=    _outputEnd)    {    writeRaw(typeMsg);    }    	compilable	  [FE]  AssertionFailedError  	49	1	replace
74	[BUG]  [BUGGY]  if(c  ==  '['  ||  c  ==  ']')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  ==  '['  ||  c  ==  ']')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(c  ==  '['  ||  c  ==  ']')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }	  if(c    ==    '[')    {    if(_outputTail    >=    _outputEnd)    {    writeRaw(typeMsg);    }    	compilable	  [FE]  AssertionFailedError  	49	1	replace
75	[BUG]  [BUGGY]  _outputTail  =  _outputEnd  -  _outputHead;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  _outputTail  =  _outputEnd  -  _outputHead;  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	_outputTail  =  _outputEnd  -  _outputHead;	  if(_outputTail    >=    _outputEnd)    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  ']'  expected	34	None	replace
76	[BUG]  [BUGGY]  _outputTail  =  _outputEnd  -  _outputTail;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  _outputTail  =  _outputEnd  -  _outputTail;  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	_outputTail  =  _outputEnd  -  _outputTail;	  if(_outputTail    >=    _outputEnd)    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  ']'  expected	34	None	replace
77	[BUG]  [BUGGY]  if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  If(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  If(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(c    ==    '[')    {    if(_outputTail    >=    _outputEnd)    {    writeRaw(typeMsg);    }    If(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }	  	non-compiled	[CE]  ';'  expected	48	None	add
78	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  c  =  '[';  ++_outputTail;  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  c  =  '[';  ++_outputTail;  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd)  {  c  =  '[';  ++_outputTail;  }	  if(_outputTail    >=    _outputEnd)    {    c    =    _outputBuffer[_outputTail];    ++_outputTail;    }    	non-compiled	[CE]  ']'  expected	36	None	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(_outputTail!=    _outputEnd)    {    if(_outputTail!=    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
80	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(_outputTail!=    _outputEnd)    {    if(_outputTail!=    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(_outputTail    >>    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
82	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(_outputTail    >>    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
83	[BUG]  [BUGGY]  if(_outputTail  >>  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >>  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >>  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  ')'  expected	50	None	replace
84	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.AUTO_CLOSE_WARNING))  {  [CE]  cannot  find  symbol  AUTO_CLOSE_WARNING  [FE]        AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.AUTO_CLOSE_WARNING))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.AUTO_CLOSE_WARNING))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  AUTO_CLOSE_WARNING	47	None	replace
85	[BUG]  [BUGGY]  if(typeMsg!=  null)  {  _writer.writeRaw(typeMsg);  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(typeMsg!=  null)  {  _writer.writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(typeMsg!=  null)  {  _writer.writeRaw(typeMsg);  }	  _writer.writeRaw(typeMsg);    	non-compiled	[CE]  ']'  expected	38	None	replace
86	[BUG]  [BUGGY]  _writer.writeRaw(typeMsg,  _outputBuffer,  _outputTail);  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  _writer.writeRaw(typeMsg,  _outputBuffer,  _outputTail);  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	_writer.writeRaw(typeMsg,  _outputBuffer,  _outputTail);	  _writer.writeRaw(typeMsg);    	non-compiled	[CE]  ']'  expected	38	None	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(c!=  'n'  ||  c  ==  'r')  {	  if(_outputTail    ==    _outputEnd)    {    if(_outputTail    >=    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	31	1	replace
88	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(c!=  'n'  ||  c  ==  'r')  {	  if(_outputTail    ==    _outputEnd)    {    if(_outputTail    >=    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	31	1	replace
89	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(typeMsg!=  null)  {  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(typeMsg!=  null)  {  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }	  if(_outputTail    >=    _outputEnd)    {    c    =    _outputBuffer[_outputTail];    ++_outputTail;    }    else    {    writeRaw(typeMsg);    }    	compilable	  [FE]  ComparisonFailure  	35	5	replace
90	[BUG]  [BUGGY]  if(typeMsg!=  null)  {  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }  [FE]  ComparisonFailure  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(typeMsg!=  null)  {  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(typeMsg!=  null)  {  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }	  if(_outputTail    >=    _outputEnd)    {    c    =    _outputBuffer[_outputTail];    ++_outputTail;    }    else    {    writeRaw(typeMsg);    }    	compilable	  [FE]  ComparisonFailure  	35	5	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(typeMsg  ==  null)  {  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(typeMsg  ==  null)  {  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }	  if(_outputTail    >=    _outputEnd)    {    c    =    _outputBuffer[_outputTail];    ++_outputTail;    }    else    {    writeRaw(typeMsg);    }    	compilable	  [FE]  AssertionFailedError  	35	1	replace
92	[BUG]  [BUGGY]  if(typeMsg  ==  null)  {  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(typeMsg  ==  null)  {  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(typeMsg  ==  null)  {  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }	  if(_outputTail    >=    _outputEnd)    {    c    =    _outputBuffer[_outputTail];    ++_outputTail;    }    else    {    writeRaw(typeMsg);    }    	compilable	  [FE]  AssertionFailedError  	35	1	replace
93	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  _buffer[_outputTail]  ==  null)  {  [CE]  cannot  find  symbol  _buffer  [FE]            AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  &&  _buffer[_outputTail]  ==  null)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  &&  _buffer[_outputTail]  ==  null)  {	  if(_outputTail    >=    _outputEnd    &&    _buffer[_outputTail]!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  _buffer	45	None	replace
94	[BUG]  [BUGGY]  if(_outputTail  >>  _outputEnd  &&  _buffer[_outputTail]!=  null)  {  [CE]  cannot  find  symbol  _buffer  [FE]              AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >>  _outputEnd  &&  _buffer[_outputTail]!=  null)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >>  _outputEnd  &&  _buffer[_outputTail]!=  null)  {	  if(_outputTail    >=    _outputEnd    &&    _buffer[_outputTail]!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  _buffer	45	None	replace
95	[BUG]  [BUGGY]  if(_outputTail  >>  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >>  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >>  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	23	None	replace
96	[BUG]  [BUGGY]  if(++_outputTail  >=  _outputEnd  &&  _buffer[_outputTail]  ==  null)  {  [CE]  cannot  find  symbol  _buffer  [FE]          ComparisonFailure      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(++_outputTail  >=  _outputEnd  &&  _buffer[_outputTail]  ==  null)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(++_outputTail  >=  _outputEnd  &&  _buffer[_outputTail]  ==  null)  {	  if(++_outputTail    >=    _outputEnd    &&    _buffer[_outputTail]!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  _buffer	44	None	replace
97	[BUG]  [BUGGY]  ||(_outputTail  >=  _outputEnd)&&(_outputBuffer[_outputTail]!=  null))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  ||(_outputTail  >=  _outputEnd)&&(_outputBuffer[_outputTail]!=  null))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	||(_outputTail  >=  _outputEnd)&&(_outputBuffer[_outputTail]!=  null))  {	  if(_outputTail    ==    _outputEnd)    {    If(_outputTail    ==    _outputEnd)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  <  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(_outputTail  <  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	compilable	  [FE]  AssertionFailedError  	23	1	replace
99	[BUG]  [BUGGY]  if(_outputTail  <  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  <  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  <  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	compilable	  [FE]  AssertionFailedError  	23	1	replace
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(_outputTail!=    _outputEnd)    {    if(_outputTail    >>    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
101	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(_outputTail!=    _outputEnd)    {    if(_outputTail    >>    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
102	[BUG]  [BUGGY]  if(c  >  INT_9  ||  c  <  INT_0)  {  [CE]  cannot  find  symbol  INT_9  [FE]              ComparisonFailure      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  >  INT_9  ||  c  <  INT_0)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(c  >  INT_9  ||  c  <  INT_0)  {	  if(++_outputTail    >=    _outputEnd)    {    if(++_outputTail    ==    _outputEnd)    {    	non-compiled	[CE]  cannot  find  symbol  INT_9	20	None	replace
103	[BUG]  [BUGGY]  if(_outputTail  <  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {  [CE]  incomparable  types:  char  and  <null>  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  <  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  <  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {	  if(_outputTail    <    _outputEnd)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	29	None	replace
104	[BUG]  [BUGGY]  _outputTail  =  _outputEnd  -  _outputBuffer.length;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  _outputTail  =  _outputEnd  -  _outputBuffer.length;  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	_outputTail  =  _outputEnd  -  _outputBuffer.length;	  if(_outputTail    >=    _outputEnd)    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  ']'  expected	34	None	replace
105	[BUG]  [BUGGY]  if(_outputTail  <  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  }  else  {  writeRaw(typeMsg);  }  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  <  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  <  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  }  else  {  writeRaw(typeMsg);  }	  if(_outputTail    >=    _outputEnd)    {    c    =    _outputBuffer[_outputTail];    }    else    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  ']'  expected	37	None	replace
106	[BUG]  [BUGGY]  _writer.write(c);  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  _writer.write(c);  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	_writer.write(c);	  _writer.writeRaw(typeMsg);    	non-compiled	[CE]  ']'  expected	38	None	replace
107	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  writeRaw(c);  }  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  writeRaw(c);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd)  {  writeRaw(c);  }	  if(c    ==    '[')    {    if(_outputTail    >=    _outputEnd)    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  ']'  expected	49	None	replace
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
109	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
110	[BUG]  [BUGGY]  if(_outputTail  <  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  <  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  <  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  ')'  expected	50	None	replace
111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(_outputTail    ==    _outputEnd)    {    if(_outputTail    ==    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
112	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(_outputTail    ==    _outputEnd)    {    if(_outputTail    ==    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  ||  _outputBuffer[_outputTail]!=  _outputEnd)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(_outputTail  >=  _outputEnd  ||  _outputBuffer[_outputTail]!=  _outputEnd)  {	  if(_outputTail    >=    _outputEnd    ||    _outputTail    >=    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
114	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  ||  _outputBuffer[_outputTail]!=  _outputEnd)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  ||  _outputBuffer[_outputTail]!=  _outputEnd)  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  ||  _outputBuffer[_outputTail]!=  _outputEnd)  {	  if(_outputTail    >=    _outputEnd    ||    _outputTail    >=    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
115	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  [CE]  cannot  find  symbol  QUOTE_FIELDS_NAMES  [FE]    AssertionFailedError    [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELDS_NAMES))  {	  if(_outputTail!=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  QUOTE_FIELDS_NAMES	27	None	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }	  if(_outputTail    >=    _outputEnd)    {    c    =    _outputBuffer[_outputTail];    ++_outputTail;    }    else    {    writeRaw(typeMsg);    }    	compilable	  [FE]  AssertionFailedError  	35	1	replace
117	[BUG]  [BUGGY]  if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }	  if(_outputTail    >=    _outputEnd)    {    c    =    _outputBuffer[_outputTail];    ++_outputTail;    }    else    {    writeRaw(typeMsg);    }    	compilable	  [FE]  AssertionFailedError  	35	1	replace
118	[BUG]  [BUGGY]  if(_outputTail  <  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  <  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  <  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }	  if(_outputTail    >=    _outputEnd)    {    c    =    _outputBuffer[_outputTail];    ++_outputTail;    }    else    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  ']'  expected	35	None	replace
119	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  c  =  ' "';  ++_outputTail;  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd)  {  c  =  ' "';  ++_outputTail;  }  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd)  {  c  =  ' "';  ++_outputTail;  }	  if(_outputTail    >=    _outputEnd)    {    c    =    _outputBuffer[_outputTail];    ++_outputTail;    }    	non-compiled	[CE]  ']'  expected	36	None	replace
120	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.AUTO_CLOSE_SCRIPT))  {  [CE]  cannot  find  symbol  AUTO_CLOSE_SCRIPT  [FE]        AssertionFailedError      [CONTEXT]      break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }      [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.AUTO_CLOSE_SCRIPT))  {  [BUGGY]      _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.AUTO_CLOSE_SCRIPT))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  cannot  find  symbol  AUTO_CLOSE_SCRIPT	47	None	replace
