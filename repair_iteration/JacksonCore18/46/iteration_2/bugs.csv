bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(_outputTail  >>  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {  [CE]  incomparable  types:  char  and  <null>  [FE]        AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >>  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >>  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {	  if(_outputTail    >=    _outputEnd    &&    _outputBuffer[_outputTail]!=    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	7	None	replace
2	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  ||  _outputBuffer[_outputTail]!=  null)  {  [CE]  incomparable  types:  char  and  <null>  [FE]          AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >=  _outputEnd  ||  _outputBuffer[_outputTail]!=  null)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  ||  _outputBuffer[_outputTail]!=  null)  {	  if(_outputTail    >=    _outputEnd    &&    _outputBuffer[_outputTail]!=    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	7	None	replace
3	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  _outputBuffer[_outputTail]  ==  null)  {  [CE]  incomparable  types:  char  and  <null>  [FE]            AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >=  _outputEnd  &&  _outputBuffer[_outputTail]  ==  null)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  &&  _outputBuffer[_outputTail]  ==  null)  {	  if(_outputTail    >=    _outputEnd    &&    _outputBuffer[_outputTail]!=    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	7	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(_outputTail  >=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {	  if(_outputTail    >>    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
5	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  ||  _outputTail  >=  _outputEnd)  {	  if(_outputTail    >>    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
6	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
7	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
8	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  >>  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  >>  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(_outputTail  >>  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
9	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
10	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(++_outputTail  ==  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(++_outputTail  ==  _outputEnd)  {	  if(++_outputTail    >=    _outputEnd)    {    	compilable	  [FE]  ComparisonFailure  	11	5	replace
11	[BUG]  [BUGGY]  if(++_outputTail  ==  _outputEnd)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(++_outputTail  ==  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(++_outputTail  ==  _outputEnd)  {	  if(++_outputTail    >=    _outputEnd)    {    	compilable	  [FE]  ComparisonFailure  	11	5	replace
12	[BUG]  [BUGGY]  if(++_outputTail  >>  _outputEnd)  {  [CE]  incompatible  types  [FE]      ComparisonFailure    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(++_outputTail  >>  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(++_outputTail  >>  _outputEnd)  {	  if(++_outputTail    >=    _outputEnd)    {    	non-compiled	[CE]  incompatible  types	11	None	replace
13	[BUG]  [BUGGY]  if(_outputTail!=  _outputEnd)  {  if(_outputTail  >=  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail!=  _outputEnd)  {  if(_outputTail  >=  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail!=    _outputEnd)    {    if(_outputTail  >=  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
14	[BUG]  [BUGGY]  if(_outputTail!=  _outputEnd)  {  if(_outputTail!=  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail!=  _outputEnd)  {  if(_outputTail!=  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail!=    _outputEnd)    {    if(_outputTail!=  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
15	[BUG]  [BUGGY]  if(_outputTail!=  _outputEnd)  {  if(_outputTail  >>  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail!=  _outputEnd)  {  if(_outputTail  >>  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail!=    _outputEnd)    {    if(_outputTail  >>  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
16	[BUG]  [BUGGY]  if(_outputTail!=  _outputEnd)  {  if(_outputTail  ==  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail!=  _outputEnd)  {  if(_outputTail  ==  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail!=    _outputEnd)    {    if(_outputTail  ==  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
17	[BUG]  [BUGGY]  if(++_outputTail  >=  _outputEnd)  {  if(++_outputTail  >=  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(++_outputTail  >=  _outputEnd)  {  if(++_outputTail  >=  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(++_outputTail    >=    _outputEnd)    {    if(++_outputTail  >=  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
18	[BUG]  [BUGGY]  if(++_outputTail  >=  _outputEnd)  {  if(++_outputTail  >>  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(++_outputTail  >=  _outputEnd)  {  if(++_outputTail  >>  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(++_outputTail    >=    _outputEnd)    {    if(++_outputTail  >>  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
19	[BUG]  [BUGGY]  if(++_outputTail  >=  _outputEnd)  {  if(++_outputTail!=  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(++_outputTail  >=  _outputEnd)  {  if(++_outputTail!=  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(++_outputTail    >=    _outputEnd)    {    if(++_outputTail!=  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
20	[BUG]  [BUGGY]  if(++_outputTail  >=  _outputEnd)  {  if(++_outputTail  ==  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(++_outputTail  >=  _outputEnd)  {  if(++_outputTail  ==  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(++_outputTail    >=    _outputEnd)    {    if(++_outputTail  ==  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
21	[BUG]  [BUGGY]  if(++_outputTail  >=  _outputEnd)  {  if(++_outputTail  [Delete]  _outputEnd)  {  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(++_outputTail  >=  _outputEnd)  {  if(++_outputTail  [Delete]  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(++_outputTail    >=    _outputEnd)    {    if(++_outputTail  [Delete]  _outputEnd)  {	  	non-compiled	[CE]  ')'  expected	10	None	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(_outputTail  >=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
23	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
25	[BUG]  [BUGGY]  if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  ==  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
27	[BUG]  [BUGGY]  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail!=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  <  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(_outputTail  <  _outputEnd)  {	  if(_outputTail    ==    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
29	[BUG]  [BUGGY]  if(_outputTail  <  _outputEnd)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  <  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  <  _outputEnd)  {	  if(_outputTail    ==    _outputEnd)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
30	[BUG]  [BUGGY]  if(_outputTail  ==  _outputEnd)  {  if(_outputTail  ==  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  ==  _outputEnd)  {  if(_outputTail  ==  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    ==    _outputEnd)    {    if(_outputTail  ==  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
31	[BUG]  [BUGGY]  if(_outputTail  ==  _outputEnd)  {  if(_outputTail  >=  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  ==  _outputEnd)  {  if(_outputTail  >=  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    ==    _outputEnd)    {    if(_outputTail  >=  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
32	[BUG]  [BUGGY]  if(_outputTail  ==  _outputEnd)  {  if(_outputTail!=  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  ==  _outputEnd)  {  if(_outputTail!=  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    ==    _outputEnd)    {    if(_outputTail!=  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
33	[BUG]  [BUGGY]  if(_outputTail  ==  _outputEnd)  {  if(_outputTail  >>  _outputEnd)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  ==  _outputEnd)  {  if(_outputTail  >>  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    ==    _outputEnd)    {    if(_outputTail  >>  _outputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
34	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }	      	non-compiled	[CE]  ']'  expected	5	None	replace
35	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  else  {  writeRaw(typeMsg);  }	      	non-compiled	[CE]  ']'  expected	5	None	replace
36	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  [CE]  ']'  expected  [FE]                AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  ++_outputTail;  }	      	non-compiled	[CE]  ']'  expected	5	None	replace
37	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  }  else  {  writeRaw(typeMsg);  }  [CE]  ']'  expected  [FE]                  AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  }  else  {  writeRaw(typeMsg);  }  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd)  {  c  =  _outputBuffer[_outputTail];  }  else  {  writeRaw(typeMsg);  }	      	non-compiled	[CE]  ']'  expected	5	None	replace
38	[BUG]  [BUGGY]  _writer.writeRaw(typeMsg);  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  _writer.writeRaw(typeMsg);  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	_writer.writeRaw(typeMsg);	      	non-compiled	[CE]  ']'  expected	5	None	replace
39	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  else  {  _flushBuffer();  }  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  else  {  _flushBuffer();  }  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  else  {  _flushBuffer();  }	      	non-compiled	[CE]  ']'  expected	5	None	replace
40	[BUG]  [BUGGY]  _flushBuffer();  [CE]  ']'  expected  [FE]                AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  _flushBuffer();  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	_flushBuffer();	      	non-compiled	[CE]  ']'  expected	5	None	replace
41	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  else  {  _flushBuffer();  }  [CE]  ']'  expected  [FE]                  AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  else  {  _flushBuffer();  }  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  else  {  _flushBuffer();  }	      	non-compiled	[CE]  ']'  expected	5	None	replace
42	[BUG]  [BUGGY]  if(_outputTail  ==  _outputEnd)  {  If(_outputTail  ==  _outputEnd)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  ==  _outputEnd)  {  If(_outputTail  ==  _outputEnd)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    ==    _outputEnd)    {    If(_outputTail  ==  _outputEnd)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
43	[BUG]  [BUGGY]  if(++_outputTail  >=  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {  [CE]  incomparable  types:  char  and  <null>  [FE]    ComparisonFailure    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(++_outputTail  >=  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(++_outputTail  >=  _outputEnd  &&  _outputBuffer[_outputTail]!=  null)  {	  if(++_outputTail    >=    _outputEnd)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	11	None	replace
44	[BUG]  [BUGGY]  if(++_outputTail  >=  _outputEnd  &&  _buffer[_outputTail]!=  null)  {  [CE]  cannot  find  symbol  _buffer  [FE]      ComparisonFailure    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(++_outputTail  >=  _outputEnd  &&  _buffer[_outputTail]!=  null)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(++_outputTail  >=  _outputEnd  &&  _buffer[_outputTail]!=  null)  {	  if(++_outputTail    >=    _outputEnd)    {    	non-compiled	[CE]  cannot  find  symbol  _buffer	11	None	replace
45	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  _buffer[_outputTail]!=  null)  {  [CE]  cannot  find  symbol  _buffer  [FE]        AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >=  _outputEnd  &&  _buffer[_outputTail]!=  null)  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  &&  _buffer[_outputTail]!=  null)  {	  if(_outputTail    >=    _outputEnd    &&    _outputBuffer[_outputTail]!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  _buffer	7	None	replace
46	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  If(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  If(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    If(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  	non-compiled	[CE]  ';'  expected	8	None	add
47	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  cannot  find  symbol  AUTO_CLOSE_SOURCE  [FE]    AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(_outputTail!=    _outputEnd)    {    	non-compiled	[CE]  cannot  find  symbol  AUTO_CLOSE_SOURCE	4	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	add	if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }	      	compilable	  [FE]  AssertionFailedError  	5	1	replace
49	[BUG]  [BUGGY]  if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(c  ==  '[')  {  if(_outputTail  >=  _outputEnd)  {  writeRaw(typeMsg);  }	      	compilable	  [FE]  AssertionFailedError  	5	1	replace
50	[BUG]  [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  default:  return;  }    [BUGGY]  if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    _flushBuffer();  }  _outputBuffer[_outputTail]  =  c;  ++_outputTail;  }  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.4472135954999579	785	785	1	replace	if(_outputTail  >=  _outputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_outputTail    >=    _outputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  ')'  expected	9	None	replace
