bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  [CE]  variable  c  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }	  c    =    ';';    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	5	None	replace
2	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  writeRaw(typeMsg);  }  [CE]  variable  c  might  not  have  been  initialized  [FE]      AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  writeRaw(typeMsg);  }	  c    =    ';';    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	5	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( " ");  }	  c    =    ';';    	compilable	  [FE]  AssertionFailedError  	5	2	replace
4	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( " ");  }	  c    =    ';';    	compilable	  [FE]  AssertionFailedError  	5	2	replace
5	[BUG]  [BUGGY]  c  =  ','  +  typeMsg.charAt(0);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ','  +  typeMsg.charAt(0);  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  typeMsg.charAt(0);	  c    =    ','    +    typeMsg;    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
6	[BUG]  [BUGGY]  c  =  ','  +  typeMsg.charAt(status);  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ','  +  typeMsg.charAt(status);  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  typeMsg.charAt(status);	  c    =    ','    +    typeMsg;    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
7	[BUG]  [BUGGY]  c  =  ','  +  typeMsg.toCharArray();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ','  +  typeMsg.toCharArray();  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  typeMsg.toCharArray();	  c    =    ','    +    typeMsg;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	7	None	replace
8	[BUG]  [BUGGY]  c  =  ','  +  getCurrentName();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ','  +  getCurrentName();  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  getCurrentName();	  c    =    ','    +    status;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
9	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [CE]  variable  c  might  not  have  been  initialized  [FE]              AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }	      	non-compiled	[CE]  variable  c  might  not  have  been  initialized	6	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }	      	compilable	  [FE]  AssertionFailedError  	6	2	replace
11	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }	      	compilable	  [FE]  AssertionFailedError  	6	2	replace
12	[BUG]  [BUGGY]  char  c  =  typeMsg.charAt(status);  [CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)  [FE]                  AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  char  c  =  typeMsg.charAt(status);  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	char  c  =  typeMsg.charAt(status);	      	non-compiled	[CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)	6	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ':';  c  =  ':';  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c    =    ':';    c  =  ':';	  	compilable	  [FE]  AssertionFailedError  	1	1	add
14	[BUG]  [BUGGY]  c  =  ':';  c  =  ':';  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ':';  c  =  ':';  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =    ':';    c  =  ':';	  	compilable	  [FE]  AssertionFailedError  	1	1	add
15	[BUG]  [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =    ':';    ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
16	[BUG]  [BUGGY]  c  =  ':';  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ':';  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  c  =  ':';  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =    ':';    ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  c  =  ':';	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
17	[BUG]  [BUGGY]  c  =  ':';  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  c  =  ':';  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ':';  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  c  =  ':';  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =    ':';    ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  c  =  ':';	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
18	[BUG]  [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =    ':';    ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ';';  c  =  ';';  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c    =    ';';    c  =  ';';	  	compilable	  [FE]  AssertionFailedError  	4	1	add
20	[BUG]  [BUGGY]  c  =  ';';  c  =  ';';  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ';';  c  =  ';';  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =    ';';    c  =  ';';	  	compilable	  [FE]  AssertionFailedError  	4	1	add
21	[BUG]  [BUGGY]  c  =  ';';  c  =  ');';  [CE]  unclosed  character  literal  [FE]      AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ';';  c  =  ');';  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =    ';';    c  =  ');';	  	non-compiled	[CE]  unclosed  character  literal	4	None	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ';';  c  =  ':';  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c    =    ';';    c  =  ':';	  	compilable	  [FE]  AssertionFailedError  	4	1	add
23	[BUG]  [BUGGY]  c  =  ';';  c  =  ':';  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ';';  c  =  ':';  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =    ';';    c  =  ':';	  	compilable	  [FE]  AssertionFailedError  	4	1	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ';';  c  =  ',';  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c    =    ';';    c  =  ',';	  	compilable	  [FE]  AssertionFailedError  	4	1	add
25	[BUG]  [BUGGY]  c  =  ';';  c  =  ',';  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ';';  c  =  ',';  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =    ';';    c  =  ',';	  	compilable	  [FE]  AssertionFailedError  	4	1	add
26	[BUG]  [BUGGY]  c  =  ';';  c  =  ';');  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ';';  c  =  ';');  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =    ';';    c  =  ';');	  	non-compiled	[CE]  ';'  expected	4	None	add
27	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [CE]  variable  c  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }	  c    =    ':';    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	2	None	replace
28	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [CE]  variable  c  might  not  have  been  initialized  [FE]      AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  c    =    ':';    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	2	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';	  c    =    ':';    	compilable	  [FE]  AssertionFailedError  	2	2	replace
30	[BUG]  [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';	  c    =    ':';    	compilable	  [FE]  AssertionFailedError  	2	2	replace
31	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  return;  }  [CE]  variable  c  might  not  have  been  initialized  [FE]              AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  return;  }  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  return;  }	      	non-compiled	[CE]  variable  c  might  not  have  been  initialized	6	None	replace
32	[BUG]  [BUGGY]  c  =  ','  +  getStandardValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ','  +  getStandardValue();  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  getStandardValue();	  c    =    ','    +    status;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
33	[BUG]  [BUGGY]  c  =  ','  +  TypeUtil.stringValue(c);  [CE]  cannot  find  symbol  TypeUtil  [FE]            AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ','  +  TypeUtil.stringValue(c);  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  TypeUtil.stringValue(c);	  c    =    ','    +    status;    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	3	None	replace
34	[BUG]  [BUGGY]  c  =  ','  +  typeMsg  +  1;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ','  +  typeMsg  +  1;  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  typeMsg  +  1;	  c    =    ','    +    typeMsg;    	non-compiled	[CE]  incompatible  types	7	None	replace
35	[BUG]  [BUGGY]  c  =  ','  +  typeMsg.charValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ','  +  typeMsg.charValue();  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  typeMsg.charValue();	  c    =    ','    +    typeMsg;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
36	[BUG]  [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =    ':';    ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
37	[BUG]  [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =    ':';    ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
38	[BUG]  [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  return;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  return;  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =    ':';    ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  return;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
39	[BUG]  [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg  +  ':';  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg  +  ':';  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =    ':';    ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg  +  ':';	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
40	[BUG]  [BUGGY]  c  =  ':'  +  status;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ':'  +  status;  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +  status;	  c    =    ':';    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
41	[BUG]  [BUGGY]  c  =  ':'  +  typeMsg;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ':'  +  typeMsg;  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +  typeMsg;	  c    =    ':';    	non-compiled	[CE]  incompatible  types	2	None	replace
42	[BUG]  [BUGGY]  c  =  ';'  +  status;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ';'  +  status;  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ';'  +  status;	  c    =    ';';    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
43	[BUG]  [BUGGY]  c  =  ':';  c  =  ':';safely(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ':';  c  =  ':';safely(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =    ':';    c  =  ':';safely(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
44	[BUG]  [BUGGY]  c  =  ':';  c  =  ':';safely(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ':';  c  =  ':';safely(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON);  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =    ':';    c  =  ':';safely(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
45	[BUG]  [BUGGY]  c  =  ':';  c  =  ':';safely(status  ==  JsonWriteContext.STATUS_EXPECT_NAME);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ':';  c  =  ':';safely(status  ==  JsonWriteContext.STATUS_EXPECT_NAME);  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =    ':';    c  =  ':';safely(status  ==  JsonWriteContext.STATUS_EXPECT_NAME);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
46	[BUG]  [BUGGY]  c  =  ':';  c  =  ':';safely(JsonWriteContext.STATUS_OK_AFTER_COMMA);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ':';  c  =  ':';safely(JsonWriteContext.STATUS_OK_AFTER_COMMA);  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =    ':';    c  =  ':';safely(JsonWriteContext.STATUS_OK_AFTER_COMMA);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
47	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  [CE]  variable  c  might  not  have  been  initialized  [FE]              AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");	      	non-compiled	[CE]  variable  c  might  not  have  been  initialized	6	None	replace
48	[BUG]  [BUGGY]  if(c  ==  ':')  {  writeRaw(_writeContext.getValue());  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  if(c  ==  ':')  {  writeRaw(_writeContext.getValue());  }  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(c  ==  ':')  {  writeRaw(_writeContext.getValue());  }	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
49	[BUG]  [BUGGY]  char  c  =  typeMsg.charAt(0);  [CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)  [FE]                  AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  char  c  =  typeMsg.charAt(0);  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	char  c  =  typeMsg.charAt(0);	      	non-compiled	[CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)	6	None	replace
50	[BUG]  [BUGGY]  c  =  ','  +  _outputBuffer.length;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ','  +  _outputBuffer.length;  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  _outputBuffer.length;	  c    =    ','    +    status;    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
51	[BUG]  [BUGGY]  c  =  ','  +  TypeUtil.stringValue(status);  [CE]  cannot  find  symbol  TypeUtil  [FE]            AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ','  +  TypeUtil.stringValue(status);  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  TypeUtil.stringValue(status);	  c    =    ','    +    status;    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	3	None	replace
52	[BUG]  [BUGGY]  c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  -1  :  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  -1  :  1;  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  -1  :  1;	  c    =    ':';    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	2	None	replace
53	[BUG]  [BUGGY]  c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  1  :  ':';  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      AssertionFailedError    [CONTEXT]    _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:    [BUGGY]  c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  1  :  ':';  [BUGGY]    break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  1  :  ':';	  c    =    ':';    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	2	None	replace
