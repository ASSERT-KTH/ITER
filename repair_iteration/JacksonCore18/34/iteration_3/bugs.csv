bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ':';  c  =  ';';  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c        =        ';';        c    =    ':';    c  =  ';';  c  =  ':';	  	compilable	  [FE]  AssertionFailedError  	22	1	add
2	[BUG]  [BUGGY]  c    =    ';';    c  =  ':';  c  =  ';';  c  =  ':';  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ':';  c  =  ';';  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ':';    c  =  ';';  c  =  ':';	  	compilable	  [FE]  AssertionFailedError  	22	1	add
3	[BUG]  [BUGGY]  c    =    ';';    c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ':';  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ':';    ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ':';	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
4	[BUG]  [BUGGY]  c    =    ';';    c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  c  =  ';';  c  =  ':';  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  c  =  ';';  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ':';    ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  c  =  ';';  c  =  ':';	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
5	[BUG]  [BUGGY]  c    =    ';';    c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ':';  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ':';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ':';    ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ':';  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ':';  c  =  ';';  c  =  ':';  case  JsonWriteContext.STATUS_EXPECT_NAME:  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c        =        ';';        c    =    ':';    c  =  ';';  c  =  ':';  case  JsonWriteContext.STATUS_EXPECT_NAME:	  	compilable	  [FE]  AssertionFailedError  	22	1	add
7	[BUG]  [BUGGY]  c    =    ';';    c  =  ':';  c  =  ';';  c  =  ':';  case  JsonWriteContext.STATUS_EXPECT_NAME:  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ':';  c  =  ';';  c  =  ':';  case  JsonWriteContext.STATUS_EXPECT_NAME:  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ':';    c  =  ';';  c  =  ':';  case  JsonWriteContext.STATUS_EXPECT_NAME:	  	compilable	  [FE]  AssertionFailedError  	22	1	add
8	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ';';  }  [CE]  variable  c  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ';';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ';';  }	  c    =    ';';    c    =    ';';    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	20	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ';';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ';';  }	  c    =    ';';    c    =    ';';    	compilable	  [FE]  AssertionFailedError  	20	1	replace
10	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ';';  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ';';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ';';  }	  c    =    ';';    c    =    ';';    	compilable	  [FE]  AssertionFailedError  	20	1	replace
11	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ';';  c  =  ';';  }  [CE]  variable  c  might  not  have  been  initialized  [FE]        AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ';';  c  =  ';';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ';';  c  =  ';';  }	  c    =    ';';    c    =    ';';    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	20	None	replace
12	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ':';  }  [CE]  variable  c  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ':';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ':';  }	  c    =    ';';    c    =    ':';    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	23	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ':';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ':';  }	  c    =    ';';    c    =    ':';    	compilable	  [FE]  AssertionFailedError  	23	1	replace
14	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ':';  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ':';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ':';  }	  c    =    ';';    c    =    ':';    	compilable	  [FE]  AssertionFailedError  	23	1	replace
15	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ';';  c  =  ':';  }  [CE]  variable  c  might  not  have  been  initialized  [FE]        AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ';';  c  =  ':';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ';';  c  =  ':';  }	  c    =    ';';    c    =    ':';    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	23	None	replace
16	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
17	[BUG]  [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  '+';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  '+';	  c    =(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    ':'    :    ';';    	compilable	  [FE]  AssertionFailedError  	30	2	replace
19	[BUG]  [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  '+';  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  '+';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  '+';	  c    =(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    ':'    :    ';';    	compilable	  [FE]  AssertionFailedError  	30	2	replace
20	[BUG]  [BUGGY]  safely(status  ==  JsonWriteContext.STATUS_EXPECT_NAME);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  safely(status  ==  JsonWriteContext.STATUS_EXPECT_NAME);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	safely(status  ==  JsonWriteContext.STATUS_EXPECT_NAME);	  c    =    ':';    c    =    ':';safely(status    ==    JsonWriteContext.STATUS_EXPECT_NAME);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
21	[BUG]  [BUGGY]  ensure(status  ==  JsonWriteContext.STATUS_EXPECT_NAME);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ensure(status  ==  JsonWriteContext.STATUS_EXPECT_NAME);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	ensure(status  ==  JsonWriteContext.STATUS_EXPECT_NAME);	  c    =    ':';    c    =    ':';safely(status    ==    JsonWriteContext.STATUS_EXPECT_NAME);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
22	[BUG]  [BUGGY]  safely(status!=  JsonWriteContext.STATUS_EXPECT_NAME);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  safely(status!=  JsonWriteContext.STATUS_EXPECT_NAME);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	safely(status!=  JsonWriteContext.STATUS_EXPECT_NAME);	  c    =    ':';    c    =    ':';safely(status    ==    JsonWriteContext.STATUS_EXPECT_NAME);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
23	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
24	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  [CE]  variable  c  might  not  have  been  initialized  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  }	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	36	None	replace
25	[BUG]  [BUGGY]  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
26	[BUG]  [BUGGY]  c  =  ','  +  typeMsg  +  2;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  typeMsg  +  2;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  typeMsg  +  2;	  c    =    ','    +    typeMsg    +    1;    	non-compiled	[CE]  incompatible  types	34	None	replace
27	[BUG]  [BUGGY]  c  =  ','  +  typeMsg  +  4;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  typeMsg  +  4;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  typeMsg  +  4;	  c    =    ','    +    typeMsg    +    1;    	non-compiled	[CE]  incompatible  types	34	None	replace
28	[BUG]  [BUGGY]  c  =  ','  +  typeMsg  +  3;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  typeMsg  +  3;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  typeMsg  +  3;	  c    =    ','    +    typeMsg    +    1;    	non-compiled	[CE]  incompatible  types	34	None	replace
29	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
30	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(':';  }  else  {  writeRaw(typeMsg);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(':';  }  else  {  writeRaw(typeMsg);  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
31	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
32	[BUG]  [BUGGY]  char  c  =  typeMsg.charAt(status  +  1);  [CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)  [FE]                      AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  char  c  =  typeMsg.charAt(status  +  1);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	char  c  =  typeMsg.charAt(status  +  1);	  char    c    =    typeMsg.charAt(status);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)	12	None	replace
33	[BUG]  [BUGGY]  char  c  =  typeMsg.charAt(status  -  1);  [CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)  [FE]                        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  char  c  =  typeMsg.charAt(status  -  1);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	char  c  =  typeMsg.charAt(status  -  1);	  char    c    =    typeMsg.charAt(status);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)	12	None	replace
34	[BUG]  [BUGGY]  c  =  ','  +  getCurrentName()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  getCurrentName()  +  1;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  getCurrentName()  +  1;	  c    =    ','    +    getCurrentName();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
35	[BUG]  [BUGGY]  c  =  ','  +  getCurrentValue();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  getCurrentValue();  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  getCurrentValue();	  c    =    ','    +    getCurrentName();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	8	None	replace
36	[BUG]  [BUGGY]  c  =  ','  +  getCurrentName().charAt(0);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  getCurrentName().charAt(0);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  getCurrentName().charAt(0);	  c    =    ','    +    getCurrentName();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
37	[BUG]  [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  c  =  ':';	  c    =    ':';    ||(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA))    {    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
38	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';	  c    =    ':';    ||(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA))    {    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
39	[BUG]  [BUGGY]  ||(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  c  =  ':';	  c    =    ':';    ||(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA))    {    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
40	[BUG]  [BUGGY]  c  =  ':';  break;  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':';  break;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':';  break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    break;    }    	non-compiled	[CE]  unreachable  statement	9	None	replace
41	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    break;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
42	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    break;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
43	[BUG]  [BUGGY]  Context.checkState(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);  c  =  ':';  break;  [CE]  cannot  find  symbol  Context  [FE]                        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  Context.checkState(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);  c  =  ':';  break;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	Context.checkState(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);  c  =  ':';  break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    break;    }    	non-compiled	[CE]  cannot  find  symbol  Context	9	None	replace
44	[BUG]  [BUGGY]  c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  2  :  ':';  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  2  :  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  2  :  ':';	  c    =    ':'    +(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    1    :    ':';    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	53	None	replace
45	[BUG]  [BUGGY]  c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  3  :  ':';  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  3  :  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  3  :  ':';	  c    =    ':'    +(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    1    :    ':';    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	53	None	replace
46	[BUG]  [BUGGY]  c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  4  :  ':';  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  4  :  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  4  :  ':';	  c    =    ':'    +(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    1    :    ':';    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	53	None	replace
47	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ',';  }  [CE]  variable  c  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ',';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ',';  }	  c    =    ';';    c    =    ',';    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	25	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':';  c  =  ',';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c  =  ':';  c  =  ',';	  c    =    ';';    c    =    ',';    	compilable	  [FE]  AssertionFailedError  	25	1	replace
49	[BUG]  [BUGGY]  c  =  ':';  c  =  ',';  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':';  c  =  ',';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':';  c  =  ',';	  c    =    ';';    c    =    ',';    	compilable	  [FE]  AssertionFailedError  	25	1	replace
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ',';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ',';  }	  c    =    ';';    c    =    ',';    	compilable	  [FE]  AssertionFailedError  	25	1	replace
51	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ',';  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ',';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ',';  }	  c    =    ';';    c    =    ',';    	compilable	  [FE]  AssertionFailedError  	25	1	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ',';  c  =  ';';  c  =  ',';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c        =        ';';        c    =    ',';    c  =  ';';  c  =  ',';	  	compilable	  [FE]  AssertionFailedError  	24	1	add
53	[BUG]  [BUGGY]  c    =    ';';    c  =  ',';  c  =  ';';  c  =  ',';  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ',';  c  =  ';';  c  =  ',';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ',';    c  =  ';';  c  =  ',';	  	compilable	  [FE]  AssertionFailedError  	24	1	add
54	[BUG]  [BUGGY]  c    =    ';';    c  =  ',';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ',';  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ',';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ',';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ',';    ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ',';	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ',';  c  =  ';';  c  =  ',';  case  JsonWriteContext.STATUS_EXPECT_NAME:  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c        =        ';';        c    =    ',';    c  =  ';';  c  =  ',';  case  JsonWriteContext.STATUS_EXPECT_NAME:	  	compilable	  [FE]  AssertionFailedError  	24	1	add
56	[BUG]  [BUGGY]  c    =    ';';    c  =  ',';  c  =  ';';  c  =  ',';  case  JsonWriteContext.STATUS_EXPECT_NAME:  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ',';  c  =  ';';  c  =  ',';  case  JsonWriteContext.STATUS_EXPECT_NAME:  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ',';    c  =  ';';  c  =  ',';  case  JsonWriteContext.STATUS_EXPECT_NAME:	  	compilable	  [FE]  AssertionFailedError  	24	1	add
57	[BUG]  [BUGGY]  c    =    ';';    c  =  ',';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ',';  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ',';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ',';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ',';    ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ',';  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
58	[BUG]  [BUGGY]  c    =    ';';    c  =  ',';  c  =  ';';  c  =  ',';  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [CE]  duplicate  case  label  [FE]            AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ',';  c  =  ';';  c  =  ',';  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ',';    c  =  ';';  c  =  ',';  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  c  =  ',';	  	non-compiled	[CE]  duplicate  case  label	24	None	add
59	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  return;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  return;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  return;	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    return;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
60	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  return;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  return;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  return;	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    return;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
61	[BUG]  [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  return;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  return;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  return;	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    return;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
62	[BUG]  [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg);  return;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg);  return;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg);  return;	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    return;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
63	[BUG]  [BUGGY]  safely(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  safely(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	safely(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON);	  c    =    ':';    c    =    ':';safely(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
64	[BUG]  [BUGGY]  ensure(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ensure(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	ensure(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON);	  c    =    ':';    c    =    ':';safely(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
65	[BUG]  [BUGGY]  safely(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  safely(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	safely(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON);	  c    =    ':';    c    =    ':';safely(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
66	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg  +  ':';  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg  +  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg  +  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg    +    ':';    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
67	[BUG]  [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg  +  ':';  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg  +  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg  +  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg    +    ':';    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
68	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg  +  ':';  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg  +  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg  +  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg    +    ':';    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
69	[BUG]  [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg  +  ':';  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg  +  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg  +  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg    +    ':';    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
70	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ');';  }  [CE]  unclosed  character  literal  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ');';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ');';  }	  c    =    ';';    c    =    ');';    	non-compiled	[CE]  unclosed  character  literal	21	None	replace
71	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ');';  }  [CE]  unclosed  character  literal  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ');';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ');';  }	  c    =    ';';    c    =    ');';    	non-compiled	[CE]  unclosed  character  literal	21	None	replace
72	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ');';  }  else  {  writeRaw(typeMsg);  }  [CE]  unclosed  character  literal  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ');';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ');';  }  else  {  writeRaw(typeMsg);  }	  c    =    ';';    c    =    ');';    	non-compiled	[CE]  unclosed  character  literal	21	None	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c        =        ':';        c    =    ':';    c  =  ':';  c  =  ':';	  	compilable	  [FE]  AssertionFailedError  	13	1	add
74	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  ':';  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ':';        c    =    ':';    c  =  ':';  c  =  ':';	  	compilable	  [FE]  AssertionFailedError  	13	1	add
75	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ':';    c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ':';        c    =    ':';    ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
76	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ':';    c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ':';        c    =    ':';    ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  ':';  case  JsonWriteContext.STATUS_EXPECT_NAME:  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c        =        ':';        c    =    ':';    c  =  ':';  c  =  ':';  case  JsonWriteContext.STATUS_EXPECT_NAME:	  	compilable	  [FE]  AssertionFailedError  	13	1	add
78	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  ':';  case  JsonWriteContext.STATUS_EXPECT_NAME:  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  ':';  case  JsonWriteContext.STATUS_EXPECT_NAME:  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ':';        c    =    ':';    c  =  ':';  c  =  ':';  case  JsonWriteContext.STATUS_EXPECT_NAME:	  	compilable	  [FE]  AssertionFailedError  	13	1	add
79	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  ':';  case  JsonWriteContext.STATUS_EXPECT_FIELD_NAME:  [CE]  cannot  find  symbol  STATUS_EXPECT_FIELD_NAME  [FE]            AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  ':';  case  JsonWriteContext.STATUS_EXPECT_FIELD_NAME:  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ':';        c    =    ':';    c  =  ':';  c  =  ':';  case  JsonWriteContext.STATUS_EXPECT_FIELD_NAME:	  	non-compiled	[CE]  cannot  find  symbol  STATUS_EXPECT_FIELD_NAME	13	None	add
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	if(status    ==    JsonWriteContext.STATUS_OK_COMMA)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
81	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_COMMA)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	if(status    ==    JsonWriteContext.STATUS_OK_COMMA)    {    c    =    ':';    break;    }    if(status!=  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
83	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  if(status!=  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_COMMA)    {    c    =    ':';    break;    }    if(status!=  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	if(status    ==    JsonWriteContext.STATUS_OK_COMMA)    {    c    =    ':';    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
85	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  if(status  >=  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_COMMA)    {    c    =    ':';    break;    }    if(status  >=  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
86	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    writeRaw(typeMsg);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
87	[BUG]  [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  writeRaw(typeMsg);	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    writeRaw(typeMsg);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
88	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(':');  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(':');  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(':');	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    writeRaw(typeMsg);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
89	[BUG]  [BUGGY]  c  =  ','  +  getStandardValue().charAt(status);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  getStandardValue().charAt(status);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  getStandardValue().charAt(status);	  c    =    ','    +    getStandardValue();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
90	[BUG]  [BUGGY]  c  =  ','  +  getStandardValue().charAt(0);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  getStandardValue().charAt(0);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  getStandardValue().charAt(0);	  c    =    ','    +    getStandardValue();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
91	[BUG]  [BUGGY]  c  =  ','  +  getStandardValue(status);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  getStandardValue(status);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  getStandardValue(status);	  c    =    ','    +    getStandardValue();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
92	[BUG]  [BUGGY]  c  =  ':'  +  typeMsg  +  1;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':'  +  typeMsg  +  1;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +  typeMsg  +  1;	  c    =    ':'    +    typeMsg;    	non-compiled	[CE]  incompatible  types	41	None	replace
93	[BUG]  [BUGGY]  c  =  ':'  +  typeMsg.charAt(0);  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':'  +  typeMsg.charAt(0);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +  typeMsg.charAt(0);	  c    =    ':'    +    typeMsg;    	non-compiled	[CE]  possible  loss  of  precision	41	None	replace
94	[BUG]  [BUGGY]  c  =  ':'  +  typeMsg.toCharArray();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':'  +  typeMsg.toCharArray();  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +  typeMsg.toCharArray();	  c    =    ':'    +    typeMsg;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	41	None	replace
95	[BUG]  [BUGGY]  c  =  ':'  +  typeMsg.charAt(status);  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':'  +  typeMsg.charAt(status);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +  typeMsg.charAt(status);	  c    =    ':'    +    typeMsg;    	non-compiled	[CE]  possible  loss  of  precision	41	None	replace
96	[BUG]  [BUGGY]  c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  -1  :  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  -1  :  2;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  -1  :  2;	  c    =    ':'    +(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    -1    :    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	52	None	replace
97	[BUG]  [BUGGY]  c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  1  :  0;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  1  :  0;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  1  :  0;	  c    =    ':'    +(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    -1    :    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	52	None	replace
98	[BUG]  [BUGGY]  c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  -1  :  4;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  -1  :  4;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  -1  :  4;	  c    =    ':'    +(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    -1    :    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	52	None	replace
99	[BUG]  [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  c  =  ':';  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  c  =  ':';	  c    =    ':';    ||(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA))    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
100	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)c  =  ':';  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)c  =  ':';	  c    =    ':';    ||(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA))    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
101	[BUG]  [BUGGY]  ||(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA))  c  =  ':';  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA))  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA))  c  =  ':';	  c    =    ':';    ||(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA))    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
102	[BUG]  [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  throw  new  IllegalArgumentException( " ");  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  throw  new  IllegalArgumentException( " ");	  c    =    ':';    ||(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA))    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
103	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ';');  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ';');  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ';');  }	  c    =    ';';    c    =    ';');    	non-compiled	[CE]  ';'  expected	26	None	replace
104	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ';');  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ';');  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ';';  c  =  ';');  }	  c    =    ';';    c    =    ';');    	non-compiled	[CE]  ';'  expected	26	None	replace
105	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ';';  c  =  ';');  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ';';  c  =  ';');  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ';';  c  =  ';');  }	  c    =    ';';    c    =    ';');    	non-compiled	[CE]  ';'  expected	26	None	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c    =(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    ':'    :    ';';    c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';	  	compilable	  [FE]  AssertionFailedError  	29	1	add
107	[BUG]  [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    ':'    :    ';';    c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';	  	compilable	  [FE]  AssertionFailedError  	29	1	add
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  c  =(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c    =(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    ':'    :    ';';    c  =(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';	  	compilable	  [FE]  AssertionFailedError  	29	1	add
109	[BUG]  [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  c  =(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  c  =(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    ':'    :    ';';    c  =(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';	  	compilable	  [FE]  AssertionFailedError  	29	1	add
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  c  =(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c    =(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    ':'    :    ';';    c  =(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';	  	compilable	  [FE]  AssertionFailedError  	29	1	add
111	[BUG]  [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  c  =(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  c  =(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    ':'    :    ';';    c  =(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';	  	compilable	  [FE]  AssertionFailedError  	29	1	add
112	[BUG]  [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  c  =(status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  c  =(status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    ':'    :    ';';    c  =(status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';	  	non-compiled	[CE]  incompatible  types	29	None	add
113	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
114	[BUG]  [BUGGY]  (status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  c  =  ';';  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  (status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  c  =  ';';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  c  =  ';';  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    	non-compiled	[CE]  not  a  statement	1	None	replace
115	[BUG]  [BUGGY]  Context.checkState(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);  c  =  ';';  [CE]  cannot  find  symbol  Context  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  Context.checkState(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);  c  =  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	Context.checkState(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);  c  =  ';';	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    	non-compiled	[CE]  cannot  find  symbol  Context	1	None	replace
116	[BUG]  [BUGGY]  c  =  ','  +  typeMsg.length;  [CE]  cannot  find  symbol  length  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  typeMsg.length;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  typeMsg.length;	  c    =    ','    +    _outputBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  length	50	None	replace
117	[BUG]  [BUGGY]  c  =  ','  +  _outputBuffer.length  -  1;  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  _outputBuffer.length  -  1;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  _outputBuffer.length  -  1;	  c    =    ','    +    _outputBuffer.length;    	non-compiled	[CE]  possible  loss  of  precision	50	None	replace
118	[BUG]  [BUGGY]  c  =  ','  +  _outputBuffer.length  +  1;  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  _outputBuffer.length  +  1;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  _outputBuffer.length  +  1;	  c    =    ','    +    _outputBuffer.length;    	non-compiled	[CE]  possible  loss  of  precision	50	None	replace
119	[BUG]  [BUGGY]  c  =  ';'  +  typeMsg;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ';'  +  typeMsg;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ';'  +  typeMsg;	  c    =    ';'    +    status;    	non-compiled	[CE]  incompatible  types	42	None	replace
120	[BUG]  [BUGGY]  c  =  ';'  +  _outputBuffer.toString();  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ';'  +  _outputBuffer.toString();  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ';'  +  _outputBuffer.toString();	  c    =    ';'    +    status;    	non-compiled	[CE]  incompatible  types	42	None	replace
121	[BUG]  [BUGGY]  c  =  ';'  +  _outputBuffer.length;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ';'  +  _outputBuffer.length;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ';'  +  _outputBuffer.length;	  c    =    ';'    +    status;    	non-compiled	[CE]  possible  loss  of  precision	42	None	replace
122	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  writeRaw(typeMsg);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  writeRaw(typeMsg);  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    else    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
123	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  }  [CE]  variable  c  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  }	  c    =    ':';    c    =    ':';    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	14	None	replace
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  c  =  ':';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  c  =  ':';  }	  c    =    ':';    c    =    ':';    	compilable	  [FE]  AssertionFailedError  	14	1	replace
125	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  c  =  ':';  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  c  =  ':';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  c  =  ':';  }	  c    =    ':';    c    =    ':';    	compilable	  [FE]  AssertionFailedError  	14	1	replace
126	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [CE]  variable  c  might  not  have  been  initialized  [FE]        AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  c    =    ':';    c    =    ':';    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	14	None	replace
127	[BUG]  [BUGGY]  c  =  ','  +  TypeUtil.stringValue(typeMsg);  [CE]  cannot  find  symbol  TypeUtil  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  TypeUtil.stringValue(typeMsg);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  TypeUtil.stringValue(typeMsg);	  c    =    ','    +    TypeUtil.stringValue(c);    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	33	None	replace
128	[BUG]  [BUGGY]  c  =  ','  +  TypeUtil.stringValue(c)+  1;  [CE]  cannot  find  symbol  TypeUtil  [FE]                  AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  TypeUtil.stringValue(c)+  1;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  TypeUtil.stringValue(c)+  1;	  c    =    ','    +    TypeUtil.stringValue(c);    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	33	None	replace
129	[BUG]  [BUGGY]  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
130	[BUG]  [BUGGY]  c  =  ','  +  TypeUtil.stringValue(_outputBuffer,  status);  [CE]  cannot  find  symbol  TypeUtil  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  TypeUtil.stringValue(_outputBuffer,  status);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  TypeUtil.stringValue(_outputBuffer,  status);	  c    =    ','    +    TypeUtil.stringValue(status);    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	51	None	replace
131	[BUG]  [BUGGY]  c  =  ','  +  TypeUtil.stringValue(_currentEscape);  [CE]  cannot  find  symbol  TypeUtil  [FE]                  AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  TypeUtil.stringValue(_currentEscape);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  TypeUtil.stringValue(_currentEscape);	  c    =    ','    +    TypeUtil.stringValue(status);    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	51	None	replace
132	[BUG]  [BUGGY]  safely(JsonWriteContext.STATUS_OK_AFTER_COMMA);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  safely(JsonWriteContext.STATUS_OK_AFTER_COMMA);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	safely(JsonWriteContext.STATUS_OK_AFTER_COMMA);	  c    =    ':';    c    =    ':';safely(JsonWriteContext.STATUS_OK_AFTER_COMMA);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
133	[BUG]  [BUGGY]  ensure(JsonWriteContext.STATUS_OK_AFTER_COMMA);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ensure(JsonWriteContext.STATUS_OK_AFTER_COMMA);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	ensure(JsonWriteContext.STATUS_OK_AFTER_COMMA);	  c    =    ':';    c    =    ':';safely(JsonWriteContext.STATUS_OK_AFTER_COMMA);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ';';  c  =  ';';  c  =  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c        =        ';';        c    =    ';';    c  =  ';';  c  =  ';';	  	compilable	  [FE]  AssertionFailedError  	19	1	add
135	[BUG]  [BUGGY]  c    =    ';';    c  =  ';';  c  =  ';';  c  =  ';';  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ';';  c  =  ';';  c  =  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ';';    c  =  ';';  c  =  ';';	  	compilable	  [FE]  AssertionFailedError  	19	1	add
136	[BUG]  [BUGGY]  c    =    ';';    c  =  ';';  c  =  ';',  c  =  ';';  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ';';  c  =  ';',  c  =  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ';';    c  =  ';',  c  =  ';';	  	non-compiled	[CE]  ';'  expected	19	None	add
137	[BUG]  [BUGGY]  c    =    ';';    c  =  ';';  c  =  ';');  c  =  ';';  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ';';  c  =  ';');  c  =  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ';';    c  =  ';');  c  =  ';';	  	non-compiled	[CE]  ';'  expected	19	None	add
138	[BUG]  [BUGGY]  c    =    ';';    c  =  ';';  c  =  ';';  c  =  ');';  [CE]  unclosed  character  literal  [FE]          AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ';';  c  =  ';';  c  =  ');';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ';';    c  =  ';';  c  =  ');';	  	non-compiled	[CE]  unclosed  character  literal	19	None	add
139	[BUG]  [BUGGY]  c    =    ';';    c  =  ';';  c  =  ');';  c  =  ';';  [CE]  unclosed  character  literal  [FE]            AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ';';  c  =  ');';  c  =  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ';';    c  =  ');';  c  =  ';';	  	non-compiled	[CE]  unclosed  character  literal	19	None	add
140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
141	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
142	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	3	2	add
143	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	3	2	add
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
145	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
146	[BUG]  [BUGGY]  c  =  ','  +  typeMsg.charAt(status+1);  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  typeMsg.charAt(status+1);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  typeMsg.charAt(status+1);	  c    =    ','    +    typeMsg.charAt(status);    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
147	[BUG]  [BUGGY]  c  =  ','  +  typeMsg.charAt(status)+  1;  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  typeMsg.charAt(status)+  1;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  typeMsg.charAt(status)+  1;	  c    =    ','    +    typeMsg.charAt(status);    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
148	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
149	[BUG]  [BUGGY]  Context.checkState(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);  c  =  ':';  [CE]  cannot  find  symbol  Context  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  Context.checkState(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	Context.checkState(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);  c  =  ':';	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    	non-compiled	[CE]  cannot  find  symbol  Context	27	None	replace
150	[BUG]  [BUGGY]  Context.checkState(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);  [CE]  cannot  find  symbol  Context  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  Context.checkState(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	Context.checkState(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    	non-compiled	[CE]  cannot  find  symbol  Context	27	None	replace
151	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
152	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_COMMA)    {    c    =    ':';    break;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
153	[BUG]  [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_COMMA))  {  c  =  ':';  break;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_COMMA))  {  c  =  ':';  break;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||(status  ==  JsonWriteContext.STATUS_OK_COMMA))  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_COMMA)    {    c    =    ':';    break;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
154	[BUG]  [BUGGY]  c  =  ':';  return;  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':';  return;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':';  return;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    return;    }    	non-compiled	[CE]  unreachable  statement	31	None	replace
155	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  return;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  return;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    return;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
156	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  return;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  return;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  return;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    return;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
157	[BUG]  [BUGGY]  (status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  c  =  ':';  return;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  (status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  c  =  ':';  return;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  c  =  ':';  return;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    return;    }    	non-compiled	[CE]  not  a  statement	31	None	replace
158	[BUG]  [BUGGY]  safely(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  safely(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	safely(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);	  c    =    ':';    c    =    ':';safely(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
159	[BUG]  [BUGGY]  ensure(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ensure(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	ensure(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA);	  c    =    ':';    c    =    ':';safely(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
160	[BUG]  [BUGGY]  safely(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  safely(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	safely(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA);	  c    =    ':';    c    =    ':';safely(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
161	[BUG]  [BUGGY]  c  =  ','  +  typeMsg.charAt(1);  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  typeMsg.charAt(1);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  typeMsg.charAt(1);	  c    =    ','    +    typeMsg.charAt(0);    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
162	[BUG]  [BUGGY]  c  =  ','  +  typeMsg.substring(status);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  typeMsg.substring(status);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  typeMsg.substring(status);	  c    =    ','    +    typeMsg.charAt(0);    	non-compiled	[CE]  incompatible  types	5	None	replace
163	[BUG]  [BUGGY]  c  =  ':'  +  TypeUtil.stringValue(typeMsg);  [CE]  cannot  find  symbol  TypeUtil  [FE]        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':'  +  TypeUtil.stringValue(typeMsg);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +  TypeUtil.stringValue(typeMsg);	  c    =    ':'    +    status;    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	40	None	replace
164	[BUG]  [BUGGY]  c  =  ':'  +  TypeUtils.stringValue(typeMsg);  [CE]  cannot  find  symbol  TypeUtils  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':'  +  TypeUtils.stringValue(typeMsg);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +  TypeUtils.stringValue(typeMsg);	  c    =    ':'    +    status;    	non-compiled	[CE]  cannot  find  symbol  TypeUtils	40	None	replace
165	[BUG]  [BUGGY]  char  c  =  typeMsg.charAt(0)  ||  status;  [CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)  [FE]                      AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  char  c  =  typeMsg.charAt(0)  ||  status;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	char  c  =  typeMsg.charAt(0)  ||  status;	  char    c    =    typeMsg.charAt(0);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)	49	None	replace
166	[BUG]  [BUGGY]  String  c  =  typeMsg.charAt(0);  [CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)  [FE]                        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  String  c  =  typeMsg.charAt(0);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	String  c  =  typeMsg.charAt(0);	  char    c    =    typeMsg.charAt(0);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)	49	None	replace
167	[BUG]  [BUGGY]  Writer  writer  =  _writeContext.getValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  Writer  writer  =  _writeContext.getValue();  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	Writer  writer  =  _writeContext.getValue();	  if(c    ==    ':')    {    writeRaw(_writeContext.getValue());    }    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
168	[BUG]  [BUGGY]  Writer  w  =  _writeContext.getValue();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  Writer  w  =  _writeContext.getValue();  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	Writer  w  =  _writeContext.getValue();	  if(c    ==    ':')    {    writeRaw(_writeContext.getValue());    }    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
169	[BUG]  [BUGGY]  writeRaw(_writeContext.getValue());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  writeRaw(_writeContext.getValue());  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	writeRaw(_writeContext.getValue());	  if(c    ==    ':')    {    writeRaw(_writeContext.getValue());    }    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
170	[BUG]  [BUGGY]  c  =  ','  +  typeMsg.toString();  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  typeMsg.toString();  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  typeMsg.toString();	  c    =    ','    +    typeMsg.toCharArray();    	non-compiled	[CE]  incompatible  types	7	None	replace
171	[BUG]  [BUGGY]  c  =  ','  +  typeMsg.getLowerCase();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  typeMsg.getLowerCase();  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  typeMsg.getLowerCase();	  c    =    ','    +    typeMsg.toCharArray();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
172	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  [CE]  variable  c  might  not  have  been  initialized  [FE]                  AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");	  _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	47	None	replace
173	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name: "  +  status);  [CE]  variable  c  might  not  have  been  initialized  [FE]                    AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name: "  +  status);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name: "  +  status);	  _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	47	None	replace
174	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name, ");  [CE]  variable  c  might  not  have  been  initialized  [FE]                      AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name, ");  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name, ");	  _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	47	None	replace
175	[BUG]  [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
176	[BUG]  [BUGGY]  ||  status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
177	[BUG]  [BUGGY]  c  =  ','  +  typeMsg.charAt(2);  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  typeMsg.charAt(2);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  typeMsg.charAt(2);	  c    =    ','    +    typeMsg.charAt(0);    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ';';  c  =  ';';  c  =  ',';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c        =        ';';        c    =    ';';    c  =  ';';  c  =  ',';	  	compilable	  [FE]  AssertionFailedError  	19	1	add
179	[BUG]  [BUGGY]  c    =    ';';    c  =  ';';  c  =  ';';  c  =  ',';  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ';';  c  =  ';';  c  =  ',';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ';';    c  =  ';';  c  =  ',';	  	compilable	  [FE]  AssertionFailedError  	19	1	add
180	[BUG]  [BUGGY]  c  =  ','  +  TypeUtil.stringValue(_outputBuffer,  c);  [CE]  cannot  find  symbol  TypeUtil  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  TypeUtil.stringValue(_outputBuffer,  c);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  TypeUtil.stringValue(_outputBuffer,  c);	  c    =    ','    +    TypeUtil.stringValue(c);    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	33	None	replace
181	[BUG]  [BUGGY]  char  c  =  typeMsg.charAt(0)  +  1;  [CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)  [FE]                      AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  char  c  =  typeMsg.charAt(0)  +  1;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	char  c  =  typeMsg.charAt(0)  +  1;	  char    c    =    typeMsg.charAt(0);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)	49	None	replace
182	[BUG]  [BUGGY]  char  c  =  typeMsg.charAt(1);  [CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)  [FE]                        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  char  c  =  typeMsg.charAt(1);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	char  c  =  typeMsg.charAt(1);	  char    c    =    typeMsg.charAt(0);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)	49	None	replace
183	[BUG]  [BUGGY]  c  =  ':';  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg  +  ':';  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':';  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg  +  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':';  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg  +  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg    +    ':';    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
184	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name,  expecting  value ");  [CE]  variable  c  might  not  have  been  initialized  [FE]                  AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name,  expecting  value ");  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name,  expecting  value ");	  _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	47	None	replace
185	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  c  =  ':';  }  [CE]  variable  c  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  c  =  ':';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  c  =  ':';  }	  c    =    ':';    c    =    ':';    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	14	None	replace
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  }  else  {  writeRaw(typeMsg);  return;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  }  else  {  writeRaw(typeMsg);  return;  }	  c    =    ':';    c    =    ':';    	compilable	  [FE]  AssertionFailedError  	14	2	replace
187	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  }  else  {  writeRaw(typeMsg);  return;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  }  else  {  writeRaw(typeMsg);  return;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  c  =  ':';  }  else  {  writeRaw(typeMsg);  return;  }	  c    =    ':';    c    =    ':';    	compilable	  [FE]  AssertionFailedError  	14	2	replace
188	[BUG]  [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON))  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON))  {  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON))  {  c  =  ':';	  c    =    ':';    ||(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA))    {    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
189	[BUG]  [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  return;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':';  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  return;  }	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    return;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
190	[BUG]  [BUGGY]  c  =  ':';  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':';  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  return;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':';  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  return;  }	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    return;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
191	[BUG]  [BUGGY]  c    =    ';';    c  =  ':';  c  =  ';');  c  =  ':';  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ':';  c  =  ';');  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ':';    c  =  ';');  c  =  ':';	  	non-compiled	[CE]  ';'  expected	22	None	add
192	[BUG]  [BUGGY]  c    =    ';';    c  =  ':';  c  =  ');';  c  =  ':';  [CE]  unclosed  character  literal  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ':';  c  =  ');';  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ':';    c  =  ');';  c  =  ':';	  	non-compiled	[CE]  unclosed  character  literal	22	None	add
193	[BUG]  [BUGGY]  c    =    ';';    c  =  ':';  c  =  ';',  c  =  ':';  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ':';  c  =  ';',  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ':';    c  =  ';',  c  =  ':';	  	non-compiled	[CE]  ';'  expected	22	None	add
194	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ':';  c  =  ';';  c  =  '-';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c        =        ';';        c    =    ':';    c  =  ';';  c  =  '-';	  	compilable	  [FE]  AssertionFailedError  	22	1	add
195	[BUG]  [BUGGY]  c    =    ';';    c  =  ':';  c  =  ';';  c  =  '-';  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ':';  c  =  ';';  c  =  '-';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ':';    c  =  ';';  c  =  '-';	  	compilable	  [FE]  AssertionFailedError  	22	1	add
196	[BUG]  [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ':';  return;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ':';  return;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ':';  return;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    return;    }    	non-compiled	[CE]  not  a  statement	31	None	replace
197	[BUG]  [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  ==  0)  {  c  =  ':';  return;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  ==  0)  {  c  =  ':';  return;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  ==  0)  {  c  =  ':';  return;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    return;    }    	non-compiled	[CE]  not  a  statement	31	None	replace
198	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;	  if(status    ==    JsonWriteContext.STATUS_OK_COMMA)    {    c    =    ':';    break;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
199	[BUG]  [BUGGY]  c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  1  :  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  1  :  1;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  1  :  1;	  c    =    ':'    +(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    -1    :    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	52	None	replace
200	[BUG]  [BUGGY]  c  =  ','  +  typeMsg.charAt(status-1);  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  typeMsg.charAt(status-1);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  typeMsg.charAt(status-1);	  c    =    ','    +    typeMsg.charAt(status);    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
201	[BUG]  [BUGGY]  if(c  ==  ':')  {  writeRaw(_writeContext,  _writer.getValue());  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(c  ==  ':')  {  writeRaw(_writeContext,  _writer.getValue());  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(c  ==  ':')  {  writeRaw(_writeContext,  _writer.getValue());  }	  if(c    ==    ':')    {    writeRaw(_writeContext.getValue());    }    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
202	[BUG]  [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  c  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(c  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	4	None	replace
203	[BUG]  [BUGGY]  c  =  ','  +  typeMsg.substring(1);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  typeMsg.substring(1);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  typeMsg.substring(1);	  c    =    ','    +    typeMsg.toCharArray();    	non-compiled	[CE]  incompatible  types	7	None	replace
204	[BUG]  [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ';';  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ';';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ';';  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    	non-compiled	[CE]  not  a  statement	1	None	replace
205	[BUG]  [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  ==  0)  {  c  =  ';';  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  ==  0)  {  c  =  ';';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  ==  0)  {  c  =  ';';  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    	non-compiled	[CE]  not  a  statement	1	None	replace
206	[BUG]  [BUGGY]  c  =  ':';  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':';  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':';  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
207	[BUG]  [BUGGY]  c  =  ':'  +  TypeUtil.stringValue(c,  status);  [CE]  cannot  find  symbol  TypeUtil  [FE]        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':'  +  TypeUtil.stringValue(c,  status);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +  TypeUtil.stringValue(c,  status);	  c    =    ':'    +    status;    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	40	None	replace
208	[BUG]  [BUGGY]  c  =  ':'  +  TypeUtil.stringValue(c);  [CE]  cannot  find  symbol  TypeUtil  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':'  +  TypeUtil.stringValue(c);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +  TypeUtil.stringValue(c);	  c    =    ':'    +    status;    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	40	None	replace
209	[BUG]  [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ':';  break;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ':';  break;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    break;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
210	[BUG]  [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  ==  0)  {  c  =  ':';  break;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  ==  0)  {  c  =  ':';  break;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  ==  0)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    break;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
211	[BUG]  [BUGGY]  safely(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  safely(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	safely(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA);	  c    =    ':';    c    =    ':';safely(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)?  ':'  :  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c  =(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)?  ':'  :  ';';	  c    =(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    ':'    :    ';';    	compilable	  [FE]  AssertionFailedError  	30	2	replace
213	[BUG]  [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)?  ':'  :  ';';  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)?  ':'  :  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)?  ':'  :  ';';	  c    =(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    ':'    :    ';';    	compilable	  [FE]  AssertionFailedError  	30	2	replace
214	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AS_IS)?  ':'  :  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c  =(status  ==  JsonWriteContext.STATUS_OK_AS_IS)?  ':'  :  ';';	  c    =(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    ':'    :    ';';    	compilable	  [FE]  AssertionFailedError  	30	2	replace
215	[BUG]  [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AS_IS)?  ':'  :  ';';  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AS_IS)?  ':'  :  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =(status  ==  JsonWriteContext.STATUS_OK_AS_IS)?  ':'  :  ';';	  c    =(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    ':'    :    ';';    	compilable	  [FE]  AssertionFailedError  	30	2	replace
216	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER)?  ':'  :  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER)?  ':'  :  ';';	  c    =(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    ':'    :    ';';    	compilable	  [FE]  AssertionFailedError  	30	2	replace
217	[BUG]  [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER)?  ':'  :  ';';  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER)?  ':'  :  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER)?  ':'  :  ';';	  c    =(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    ':'    :    ';';    	compilable	  [FE]  AssertionFailedError  	30	2	replace
218	[BUG]  [BUGGY]  c    =    ';';    c  =  ',';  c  =  ';');  c  =  ',';  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ',';  c  =  ';');  c  =  ',';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ',';    c  =  ';');  c  =  ',';	  	non-compiled	[CE]  ';'  expected	24	None	add
219	[BUG]  [BUGGY]  c    =    ';';    c  =  ',';  c  =  ';',  c  =  ',';  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ',';  c  =  ';',  c  =  ',';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ',';    c  =  ';',  c  =  ',';	  	non-compiled	[CE]  ';'  expected	24	None	add
220	[BUG]  [BUGGY]  c    =    ';';    c  =  ',';  c  =  ');';  c  =  ',';  [CE]  unclosed  character  literal  [FE]        AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ',';  c  =  ');';  c  =  ',';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ',';    c  =  ');';  c  =  ',';	  	non-compiled	[CE]  unclosed  character  literal	24	None	add
221	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ',';  c  =  ';';  c  =  '.';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c        =        ';';        c    =    ',';    c  =  ';';  c  =  '.';	  	compilable	  [FE]  AssertionFailedError  	24	1	add
222	[BUG]  [BUGGY]  c    =    ';';    c  =  ',';  c  =  ';';  c  =  '.';  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ',';  c  =  ';';  c  =  '.';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ',';    c  =  ';';  c  =  '.';	  	compilable	  [FE]  AssertionFailedError  	24	1	add
223	[BUG]  [BUGGY]  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
224	[BUG]  [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
225	[BUG]  [BUGGY]  c  =  ':'  +  typeMsg  +  status;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':'  +  typeMsg  +  status;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +  typeMsg  +  status;	  c    =    ':'    +    typeMsg;    	non-compiled	[CE]  incompatible  types	41	None	replace
226	[BUG]  [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ':';  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ':';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ':';  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    	non-compiled	[CE]  not  a  statement	27	None	replace
227	[BUG]  [BUGGY]  ((  status)  {  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ((  status)  {  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	((  status)  {  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    	non-compiled	[CE]  ')'  expected	27	None	replace
228	[BUG]  [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ');';  [CE]  unclosed  character  literal  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ');';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    ':'    :    ';';    c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ');';	  	non-compiled	[CE]  unclosed  character  literal	29	None	add
229	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_CANCEL_ERROR)  {  c  =  ';';  c  =  ':';  }  [CE]  cannot  find  symbol  STATUS_CANCEL_ERROR  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_CANCEL_ERROR)  {  c  =  ';';  c  =  ':';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_CANCEL_ERROR)  {  c  =  ';';  c  =  ':';  }	  c    =    ';';    c    =    ':';    	non-compiled	[CE]  cannot  find  symbol  STATUS_CANCEL_ERROR	23	None	replace
230	[BUG]  [BUGGY]  Safely(JsonWriteContext.STATUS_OK_AFTER_COMMA);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  Safely(JsonWriteContext.STATUS_OK_AFTER_COMMA);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	Safely(JsonWriteContext.STATUS_OK_AFTER_COMMA);	  c    =    ':';    c    =    ':';safely(JsonWriteContext.STATUS_OK_AFTER_COMMA);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
231	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ';';  c  =  ',';  }  [CE]  variable  c  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ';';  c  =  ',';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ';';  c  =  ',';  }	  c    =    ';';    c    =    ',';    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	25	None	replace
232	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_CANCEL_ERROR)  {  c  =  ';';  c  =  ',';  }  [CE]  cannot  find  symbol  STATUS_CANCEL_ERROR  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_CANCEL_ERROR)  {  c  =  ';';  c  =  ',';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_CANCEL_ERROR)  {  c  =  ';';  c  =  ',';  }	  c    =    ';';    c    =    ',';    	non-compiled	[CE]  cannot  find  symbol  STATUS_CANCEL_ERROR	25	None	replace
233	[BUG]  [BUGGY]  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    writeRaw(typeMsg);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
234	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_CANCEL_ERROR)  {  c  =  ';';  c  =  ';';  }  [CE]  cannot  find  symbol  STATUS_CANCEL_ERROR  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_CANCEL_ERROR)  {  c  =  ';';  c  =  ';';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_CANCEL_ERROR)  {  c  =  ';';  c  =  ';';  }	  c    =    ';';    c    =    ';';    	non-compiled	[CE]  cannot  find  symbol  STATUS_CANCEL_ERROR	20	None	replace
235	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  C  =  ':';  c  =  ':';  [CE]  cannot  find  symbol  C  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ':';    c  =  ':';  C  =  ':';  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ':';        c    =    ':';    C  =  ':';  c  =  ':';	  	non-compiled	[CE]  cannot  find  symbol  C	13	None	add
236	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  '-';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c        =        ':';        c    =    ':';    c  =  ':';  c  =  '-';	  	compilable	  [FE]  AssertionFailedError  	13	1	add
237	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  '-';  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  '-';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ':';        c    =    ':';    c  =  ':';  c  =  '-';	  	compilable	  [FE]  AssertionFailedError  	13	1	add
238	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  break;  }  if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_COMMA)    {    c    =    ':';    break;    }    if(status  ==  JsonWriteContext.STATUS_OK_COMMA)  {  c  =  ':';	  	non-compiled	[CE]  orphaned  case	10	None	add
239	[BUG]  [BUGGY]  c  =  ';'  +  TypeUtil.stringValue(c,  status);  [CE]  cannot  find  symbol  TypeUtil  [FE]        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ';'  +  TypeUtil.stringValue(c,  status);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ';'  +  TypeUtil.stringValue(c,  status);	  c    =    ';'    +    status;    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	42	None	replace
240	[BUG]  [BUGGY]  c  =  ';'  +  TypeUtils.stringValue(c,  status);  [CE]  cannot  find  symbol  TypeUtils  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ';'  +  TypeUtils.stringValue(c,  status);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ';'  +  TypeUtils.stringValue(c,  status);	  c    =    ';'    +    status;    	non-compiled	[CE]  cannot  find  symbol  TypeUtils	42	None	replace
241	[BUG]  [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON))  c  =  ':';  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON))  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON))  c  =  ':';	  c    =    ':';    ||(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA))    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
242	[BUG]  [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ';';  }  else  {  writeRaw(typeMsg);  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ';';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ';';  }  else  {  writeRaw(typeMsg);  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    else    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
243	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    else    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
244	[BUG]  [BUGGY]  c  =  ','  +  getCurrentStatus();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  getCurrentStatus();  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  getCurrentStatus();	  c    =    ','    +    getCurrentName();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
245	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ';';  c  =  ');';  }  [CE]  unclosed  character  literal  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ';';  c  =  ');';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ';';  c  =  ');';  }	  c    =    ';';    c    =    ');';    	non-compiled	[CE]  unclosed  character  literal	21	None	replace
246	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_CANCEL_ERROR)  {  c  =  ';';  c  =  ');';  }  [CE]  unclosed  character  literal  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_CANCEL_ERROR)  {  c  =  ';';  c  =  ');';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_CANCEL_ERROR)  {  c  =  ';';  c  =  ');';  }	  c    =    ';';    c    =    ');';    	non-compiled	[CE]  unclosed  character  literal	21	None	replace
247	[BUG]  [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  not  a  statement	28	None	replace
248	[BUG]  [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  ==  0)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  ==  0)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  ==  0)  {  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    else    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  not  a  statement	28	None	replace
249	[BUG]  [BUGGY]  c  =  ';'  +  _outputEnd;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ';'  +  _outputEnd;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ';'  +  _outputEnd;	  c    =    ';'    +    status;    	non-compiled	[CE]  possible  loss  of  precision	42	None	replace
250	[BUG]  [BUGGY]  char  c  =(typeMsg  ==  null)?  0  :  typeMsg.charAt(0);  [CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)  [FE]                      AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  char  c  =(typeMsg  ==  null)?  0  :  typeMsg.charAt(0);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	char  c  =(typeMsg  ==  null)?  0  :  typeMsg.charAt(0);	  char    c    =    typeMsg.charAt(0);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)	49	None	replace
251	[BUG]  [BUGGY]  char  c  =(typeMsg  ==  null)?  -1  :  typeMsg.charAt(0);  [CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)  [FE]                        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  char  c  =(typeMsg  ==  null)?  -1  :  typeMsg.charAt(0);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	char  c  =(typeMsg  ==  null)?  -1  :  typeMsg.charAt(0);	  char    c    =    typeMsg.charAt(0);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  _verifyValueWrite(String)	49	None	replace
252	[BUG]  [BUGGY]  if(c  ==  ':')  {  writeRaw(_writeContext,  _outputBuffer.getValue());  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(c  ==  ':')  {  writeRaw(_writeContext,  _outputBuffer.getValue());  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(c  ==  ':')  {  writeRaw(_writeContext,  _outputBuffer.getValue());  }	  if(c    ==    ':')    {    writeRaw(_writeContext.getValue());    }    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
253	[BUG]  [BUGGY]  if(c  ==  ':')  {  writeRaw(_writeContext,  _currentEscape.getValue());  }  [CE]  no  suitable  method  found  for  writeRaw(JsonWriteContext,String)  [FE]                      AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(c  ==  ':')  {  writeRaw(_writeContext,  _currentEscape.getValue());  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(c  ==  ':')  {  writeRaw(_writeContext,  _currentEscape.getValue());  }	  if(c    ==    ':')    {    writeRaw(_writeContext.getValue());    }    	non-compiled	[CE]  no  suitable  method  found  for  writeRaw(JsonWriteContext,String)	48	None	replace
254	[BUG]  [BUGGY]  if(c  ==  ':')  {  writeRaw(_writeContext,  _typeFactory.getValue());  }  [CE]  cannot  find  symbol  _typeFactory  [FE]                        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(c  ==  ':')  {  writeRaw(_writeContext,  _typeFactory.getValue());  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(c  ==  ':')  {  writeRaw(_writeContext,  _typeFactory.getValue());  }	  if(c    ==    ':')    {    writeRaw(_writeContext.getValue());    }    	non-compiled	[CE]  cannot  find  symbol  _typeFactory	48	None	replace
255	[BUG]  [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  >=  0)  {  c  =  ':';  return;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  >=  0)  {  c  =  ':';  return;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  >=  0)  {  c  =  ':';  return;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    return;    }    	non-compiled	[CE]  not  a  statement	31	None	replace
256	[BUG]  [BUGGY]  Character.isWhitespace(c)||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  Character.isWhitespace(c)||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	Character.isWhitespace(c)||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    }    	non-compiled	[CE]  not  a  statement	27	None	replace
257	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_COLON)  {  c  =  ':';  break;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_COLON)  {  c  =  ':';  break;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_COLON)  {  c  =  ':';  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_COMMA)    {    c    =    ':';    break;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
258	[BUG]  [BUGGY]  c  =  ':'  +  _outputBuffer.length;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':'  +  _outputBuffer.length;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +  _outputBuffer.length;	  c    =    ':'    +    status;    	non-compiled	[CE]  possible  loss  of  precision	40	None	replace
259	[BUG]  [BUGGY]  c  =  ':'  +  _outputBuffer.toString();  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ':'  +  _outputBuffer.toString();  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ':'  +  _outputBuffer.toString();	  c    =    ':'    +    status;    	non-compiled	[CE]  incompatible  types	40	None	replace
260	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ':';  c  =  ':';  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c        =        ';';        c    =    ':';    c  =  ':';  c  =  ':';	  	compilable	  [FE]  AssertionFailedError  	22	1	add
261	[BUG]  [BUGGY]  c    =    ';';    c  =  ':';  c  =  ':';  c  =  ':';  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ':';  c  =  ':';  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ':';    c  =  ':';  c  =  ':';	  	compilable	  [FE]  AssertionFailedError  	22	1	add
262	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [CE]  variable  c  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ':';  }  else  {  writeRaw(typeMsg);  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  c  =  ':';  }  else  {  writeRaw(typeMsg);  }	  c    =    ';';    c    =    ':';    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	23	None	replace
263	[BUG]  [BUGGY]  Character.isWhitespace(c)&&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  Character.isWhitespace(c)&&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	Character.isWhitespace(c)&&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    	non-compiled	[CE]  not  a  statement	1	None	replace
264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ',';  c  =  ':';  c  =  ',';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c        =        ';';        c    =    ',';    c  =  ':';  c  =  ',';	  	compilable	  [FE]  AssertionFailedError  	24	1	add
265	[BUG]  [BUGGY]  c    =    ';';    c  =  ',';  c  =  ':';  c  =  ',';  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ',';  c  =  ':';  c  =  ',';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ',';    c  =  ':';  c  =  ',';	  	compilable	  [FE]  AssertionFailedError  	24	1	add
266	[BUG]  [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
267	[BUG]  [BUGGY]  ||  status  ||  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ||  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ||  JsonWriteContext.STATUS_EXPECT_NAME)  {  c  =  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
268	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  break;  }  [CE]  variable  c  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  break;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  break;  }	  c    =    ';';    c    =    ';';    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	20	None	replace
269	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  return;  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg);  return;  }	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg);    return;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
270	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':');  c  =  ':';  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':');  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ':';        c    =    ':';    c  =  ':');  c  =  ':';	  	non-compiled	[CE]  ';'  expected	13	None	add
271	[BUG]  [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  ':';  }  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ':';    c  =  ':';  c  =  ':';  c  =  ':';  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ':';        c    =    ':';    c  =  ':';  c  =  ':';  }	  	non-compiled	[CE]  orphaned  case	13	None	add
272	[BUG]  [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  writeRaw(typeMsg);  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  writeRaw(typeMsg);  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)!=  0)  {  writeRaw(typeMsg);  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    else    {    writeRaw(typeMsg);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
273	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  c  =(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)?  ':'  :  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c    =(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    ':'    :    ';';    c  =(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)?  ':'  :  ';';	  	compilable	  [FE]  AssertionFailedError  	29	1	add
274	[BUG]  [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  c  =(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)?  ':'  :  ';';  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':'  :  ';';  c  =(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)?  ':'  :  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c    =(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    ':'    :    ';';    c  =(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA)?  ':'  :  ';';	  	compilable	  [FE]  AssertionFailedError  	29	1	add
275	[BUG]  [BUGGY]  c  =  ','  +  _writeContext.getStandardValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  _writeContext.getStandardValue();  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  _writeContext.getStandardValue();	  c    =    ','    +    getStandardValue();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
276	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ';';  c  =  ':';  c  =  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	c        =        ';';        c    =    ';';    c  =  ':';  c  =  ';';	  	compilable	  [FE]  AssertionFailedError  	19	1	add
277	[BUG]  [BUGGY]  c    =    ';';    c  =  ';';  c  =  ':';  c  =  ';';  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c    =    ';';    c  =  ';';  c  =  ':';  c  =  ';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c        =        ';';        c    =    ';';    c  =  ':';  c  =  ';';	  	compilable	  [FE]  AssertionFailedError  	19	1	add
278	[BUG]  [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  writeRaw(typeMsg);	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    writeRaw(typeMsg);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
279	[BUG]  [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  ==  0);  break;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  ==  0);  break;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	((  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  ==  0);  break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    break;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
280	[BUG]  [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':';';  [CE]  :  expected  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':';';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':';';	  c    =(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    ':'    :    ';';    	non-compiled	[CE]  :  expected	30	None	replace
281	[BUG]  [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':';  [CE]  :  expected  [FE]      AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)?  ':';	  c    =(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)?    ':'    :    ';';    	non-compiled	[CE]  :  expected	30	None	replace
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	add	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
283	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ';';    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ';';  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
284	[BUG]  [BUGGY]  c  =  ','  +  getCurrentChar();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  getCurrentChar();  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  getCurrentChar();	  c    =    ','    +    getCurrentName();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
285	[BUG]  [BUGGY]  c  =  ','  +  _outputBuffer.length  -  2;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  c  =  ','  +  _outputBuffer.length  -  2;  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	c  =  ','  +  _outputBuffer.length  -  2;	  c    =    ','    +    _outputBuffer.length;    	non-compiled	[CE]  possible  loss  of  precision	50	None	replace
286	[BUG]  [BUGGY]  ||  status  ||  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  ||  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  ||  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  c  =  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    c    =    ':';    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
287	[BUG]  [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg  +  ':';  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  ||  status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg  +  ':';  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	||  status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {  writeRaw(typeMsg  +  ':';	  c    =    ':';    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    writeRaw(typeMsg    +    ':';    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
288	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name: ");  [CE]  variable  c  might  not  have  been  initialized  [FE]                  AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name: ");  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name: ");	  _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    	non-compiled	[CE]  variable  c  might  not  have  been  initialized	47	None	replace
289	[BUG]  [BUGGY]  Safely(status  ==  JsonWriteContext.STATUS_EXPECT_NAME);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      _verifyPrettyValueWrite(typeMsg);  return;  }  char  c;  final  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:      [BUGGY]  Safely(status  ==  JsonWriteContext.STATUS_EXPECT_NAME);  [BUGGY]      break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  c  =  ':';  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  writeRaw(_rootValueSeparator.getValue());  }  return;  case  JsonWriteContext.STATUS_OK_AS_IS:  [CLASS]  WriterBasedJsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  SerializableString  _currentEscape  name  sstr  text  boolean  char  c  String  typeMsg  int  SHORT_WRITE  _outputEnd  _outputHead  _outputTail  amount  bytes  dataLength  features  i  len  length  missing  offset  ptr  qlen  room  start  status  Writer  _writer  w  char[]  HEX_CHARS  _entityBuffer  _outputBuffer  buf  quoted  text  	projects/JacksonCore18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java	0.7071067811865475	771	771	1	replace	Safely(status  ==  JsonWriteContext.STATUS_EXPECT_NAME);	  c    =    ':';    c    =    ':';safely(status    ==    JsonWriteContext.STATUS_EXPECT_NAME);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
